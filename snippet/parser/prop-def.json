{
  "AirbnbRating": {
    "count": {
      "defaultValue": null,
      "description": "Total number of ratings to display\n\nDefault is 5",
      "name": "count",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "reviews": {
      "defaultValue": null,
      "description": "Labels to show when each value is tapped\n\ne.g. If the first star is tapped, then value in index 0 will be used as the label\n\nDefault is ['Terrible', 'Bad', 'Okay', 'Good', 'Great']",
      "name": "reviews",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string[]"
      },
      "tags": {}
    },
    "showRating": {
      "defaultValue": null,
      "description": "Determines if to show the reviews above the rating\n\nDefault is true",
      "name": "showRating",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "reviewColor": {
      "defaultValue": null,
      "description": "Color value for review.\n\nDefault is #f1c40f",
      "name": "reviewColor",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "reviewSize": {
      "defaultValue": null,
      "description": "Size value for review.\n\nDefault is 40",
      "name": "reviewSize",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "defaultRating": {
      "defaultValue": null,
      "description": "Initial value for the rating\n\nDefault is 3",
      "name": "defaultRating",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "starContainerStyle": {
      "defaultValue": null,
      "description": "Style for star container\n\nDefault is none",
      "name": "starContainerStyle",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "ratingContainerStyle": {
      "defaultValue": null,
      "description": "Style for rating container\n\nDefault is none",
      "name": "ratingContainerStyle",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onFinishRating": {
      "defaultValue": null,
      "description": "Callback method when the user finishes rating. Gives you the final rating value as a whole number",
      "name": "onFinishRating",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(number: any) => void"
      },
      "tags": {}
    },
    "isDisabled": {
      "defaultValue": null,
      "description": "Whether the rating can be modiefied by the user\n\nDefault is false",
      "name": "isDisabled",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectedColor": {
      "defaultValue": null,
      "description": "Color value for filled stars.\n\nDefault is #004666",
      "name": "selectedColor",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "size": {
      "defaultValue": null,
      "description": "Size of rating image\n\nDefault is 40",
      "name": "size",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "starImage": {
      "defaultValue": null,
      "description": "Pass in a custom base image source",
      "name": "starImage",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    }
  },
  "Avatar.Accessory": {
    "type": {
      "defaultValue": null,
      "description": "Type of icon set. [Supported sets here](#available-icon-sets).",
      "name": "type",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "Component": {
      "defaultValue": {
        "value": "`Press handlers present then Pressable else View`\n`Press handlers present then Pressable else View`"
      },
      "description": "Update React Native Component.\nDefine the component passed to image.",
      "name": "Component",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        },
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {
        "default": "`Press handlers present then Pressable else View`\n`Press handlers present then Pressable else View`"
      }
    },
    "reverse": {
      "defaultValue": null,
      "description": "Reverses color scheme.",
      "name": "reverse",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "raised": {
      "defaultValue": null,
      "description": "Adds box shadow to button.",
      "name": "raised",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Add styling to container holding icon.\nAdditional styling for the container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        },
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "iconProps": {
      "defaultValue": null,
      "description": "Provide all props from react-native Icon component.",
      "name": "iconProps",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconProps"
      },
      "tags": {}
    },
    "reverseColor": {
      "defaultValue": null,
      "description": "Specify reverse icon color.",
      "name": "reverseColor",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disables onPress events. Only works when `onPress` has a handler.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style for the button when disabled. Only works when `onPress` has a handler.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "solid": {
      "defaultValue": null,
      "description": "Uses the solid font.",
      "name": "solid",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "brand": {
      "defaultValue": null,
      "description": "Uses the brands font (FontAwesome5 only).",
      "name": "brand",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      },
      "tags": {
        "default": "None",
        "type": "PressableProps except click handlers"
      }
    },
    "color": {
      "defaultValue": {
        "value": "'white'"
      },
      "description": "Text and icon color\nUse iconStyle or nest a Text component if you need different colors.",
      "name": "color",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | ColorValue"
      },
      "tags": {
        "default": "'white'"
      }
    },
    "borderRadius": {
      "defaultValue": {
        "value": "5"
      },
      "description": "Border radius of the button\nSet to 0 to disable.",
      "name": "borderRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "default": "5"
      }
    },
    "iconStyle": {
      "defaultValue": {
        "value": "{marginRight: 10}"
      },
      "description": "Styles applied to the icon only\nGood for setting margins or a different color.",
      "name": "iconStyle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextStyle"
      },
      "tags": {
        "default": "{marginRight: 10}"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "Style prop inherited from TextProps and TouchableWithoutFeedbackProperties\nOnly exist here so we can have ViewStyle or TextStyle\n\nStyle\nAdd custom styling to the accessory of avatar.",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImageProps"
        },
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.Accessory.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "backgroundColor": {
      "defaultValue": {
        "value": "'#007AFF'"
      },
      "description": "Background color of the button",
      "name": "backgroundColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | ColorValue"
      },
      "tags": {
        "default": "'#007AFF'"
      }
    },
    "size": {
      "defaultValue": {
        "value": "12"
      },
      "description": "Size of the icon, can also be passed as fontSize in the style object.",
      "name": "size",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "default": "12"
      }
    },
    "name": {
      "defaultValue": null,
      "description": "Name of the icon to show\n\nSee Icon Explorer app\n{@link https://github.com/oblador/react-native-vector-icons/tree/master/Examples/IconExplorer}",
      "name": "name",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "allowFontScaling": {
      "defaultValue": null,
      "description": "Specifies whether fonts should scale to respect Text Size accessibility settings.\nThe default is `true`.",
      "name": "allowFontScaling",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ellipsizeMode": {
      "defaultValue": null,
      "description": "This can be one of the following values:\n\n- `head` - The line is displayed so that the end fits in the container and the missing text\nat the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n- `middle` - The line is displayed so that the beginning and end fit in the container and the\nmissing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n- `tail` - The line is displayed so that the beginning fits in the container and the\nmissing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n- `clip` - Lines are not drawn past the edge of the text container.\n\nThe default is `tail`.\n\n`numberOfLines` must be set in conjunction with this prop.\n\n> `clip` is working only for iOS",
      "name": "ellipsizeMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "lineBreakMode": {
      "defaultValue": null,
      "description": "Line Break mode. Works only with numberOfLines.\nclip is working only for iOS",
      "name": "lineBreakMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "numberOfLines": {
      "defaultValue": null,
      "description": "Used to truncate the text with an ellipsis after computing the text\nlayout, including line wrapping, such that the total number of lines\ndoes not exceed this number.\n\nThis prop is commonly used with `ellipsizeMode`.",
      "name": "numberOfLines",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.\nonLayout function\n\nInvoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height} }}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "((event: LayoutChangeEvent) => void) & ((event: LayoutChangeEvent) => void)"
      },
      "tags": {}
    },
    "onTextLayout": {
      "defaultValue": null,
      "description": "Invoked on Text layout",
      "name": "onTextLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TextLayoutEventData>) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.\nA unique identifier for this element to be used in UI Automation testing scripts.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.\nUsed to reference react managed images from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "maxFontSizeMultiplier": {
      "defaultValue": null,
      "description": "Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n- null/undefined (default): inherit from the parent node or the global default (0)\n- 0: no max, ignore parent/global default\n- >= 1: sets the maxFontSizeMultiplier of this node to this value",
      "name": "maxFontSizeMultiplier",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "adjustsFontSizeToFit": {
      "defaultValue": null,
      "description": "Specifies whether font should be scaled down automatically to fit given style constraints.",
      "name": "adjustsFontSizeToFit",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "minimumFontScale": {
      "defaultValue": null,
      "description": "Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).",
      "name": "minimumFontScale",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "suppressHighlighting": {
      "defaultValue": null,
      "description": "When `true`, no visual change is made when text is pressed down. By\ndefault, a gray oval highlights the text on press down.",
      "name": "suppressHighlighting",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectable": {
      "defaultValue": null,
      "description": "Lets the user select text, to use the native copy and paste functionality.",
      "name": "selectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectionColor": {
      "defaultValue": null,
      "description": "The highlight color of the text.",
      "name": "selectionColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "textBreakStrategy": {
      "defaultValue": null,
      "description": "Set text break strategy on Android API Level 23+\ndefault is `highQuality`.",
      "name": "textBreakStrategy",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"simple\" | \"highQuality\" | \"balanced\""
      },
      "tags": {}
    },
    "dataDetectorType": {
      "defaultValue": null,
      "description": "Determines the types of data converted to clickable URLs in the text element.\nBy default no data types are detected.",
      "name": "dataDetectorType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"link\" | \"phoneNumber\" | \"email\" | \"all\""
      },
      "tags": {}
    },
    "android_hyphenationFrequency": {
      "defaultValue": null,
      "description": "Hyphenation strategy",
      "name": "android_hyphenationFrequency",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"normal\" | \"full\""
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[] & readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"button\" | \"togglebutton\" | \"link\" | \"search\" | \"image\" | \"keyboardkey\" | \"text\" | \"adjustable\" | \"imagebutton\" | \"header\" | \"summary\" | \"alert\" | \"checkbox\" | \"combobox\" | ... 14 more ... | \"toolbar\""
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState & AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue & AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "((event: AccessibilityActionEvent) => void) & ((event: AccessibilityActionEvent) => void)"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android\nandroid"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios\nios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios\nios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "(() => void) & (() => void)"
      },
      "tags": {
        "platform": "ios\nios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "(() => void) & (() => void)"
      },
      "tags": {
        "platform": "ios\nios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "(() => void) & (() => void)"
      },
      "tags": {
        "platform": "ios\nios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios\nios"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Determines what the opacity of the wrapped view should be when touch is active.",
      "name": "activeOpacity",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onHideUnderlay": {
      "defaultValue": null,
      "description": "\nCalled immediately after the underlay is hidden",
      "name": "onHideUnderlay",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onShowUnderlay": {
      "defaultValue": null,
      "description": "Called immediately after the underlay is shown",
      "name": "onShowUnderlay",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "underlayColor": {
      "defaultValue": {
        "value": "#000"
      },
      "description": "The color of the underlay that will show through when the touch is active.\nAdd underlay color to the accessory of avatar.",
      "name": "underlayColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        },
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.Accessory.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue & ColorValue"
      },
      "tags": {}
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Delay in ms, from onPressIn, before onLongPress is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressIn": {
      "defaultValue": null,
      "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
      "name": "delayPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressOut": {
      "defaultValue": null,
      "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
      "name": "delayPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far your touch can start away from the button.\nThis is added to pressRetentionOffset when moving off of the button.\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch hits\ntwo overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"blur\" occurs, meaning the element lost focus.\nSome platforms may not have the concept of blur.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "onFocus": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"focus\" occurs. Some platforms may not have\nthe concept of focus.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "When the scroll view is disabled, this defines how far your\ntouch may move off of the button, before deactivating the button.\nOnce deactivated, try moving it back and you'll see that the button\nis once again reactivated! Move it back and forth several times\nwhile the scroll view is disabled. Ensure you pass in a constant\nto reduce memory allocations.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "touchSoundDisabled": {
      "defaultValue": null,
      "description": "If true, doesn't play a system sound on touch.",
      "name": "touchSoundDisabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "android"
      }
    },
    "background": {
      "defaultValue": null,
      "description": "Determines the type of background drawable that's going to be used to display feedback.\nIt takes an object with type property and extra data depending on the type.\nIt's recommended to use one of the following static methods to generate that dictionary:\n     1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n        default background for selectable elements (?android:attr/selectableItemBackground)\n     2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n        theme's default background for borderless selectable elements\n        (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n        with specified color (as a string). If property borderless evaluates to true the ripple will render\n        outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n        type is available on Android API level 21+",
      "name": "background",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "BackgroundPropType"
      },
      "tags": {}
    },
    "useForeground": {
      "defaultValue": null,
      "description": "",
      "name": "useForeground",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* TV preferred focus (see documentation for the View component).",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "nextFocusDown": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates down. See the Android documentation.",
      "name": "nextFocusDown",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusForward": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates forward. See the Android documentation.",
      "name": "nextFocusForward",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusLeft": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates left. See the Android documentation.",
      "name": "nextFocusLeft",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusRight": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates right. See the Android documentation.",
      "name": "nextFocusRight",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusUp": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates up. See the Android documentation.",
      "name": "nextFocusUp",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "ImageComponent": {
      "defaultValue": null,
      "description": "Specify a different component as the Image component.",
      "name": "ImageComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "typeof Component"
      },
      "tags": {}
    },
    "PlaceholderContent": {
      "defaultValue": null,
      "description": "Content to load when Image is rendering.",
      "name": "PlaceholderContent",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactElement<any, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "childrenContainerStyle": {
      "defaultValue": null,
      "description": "Additional styling for the children container.",
      "name": "childrenContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "placeholderStyle": {
      "defaultValue": null,
      "description": "Additional styling for the placeholder container.",
      "name": "placeholderStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "transition": {
      "defaultValue": null,
      "description": "Perform fade transition on image load.",
      "name": "transition",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "transitionDuration": {
      "defaultValue": null,
      "description": "Perform fade transition on image load.",
      "name": "transitionDuration",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onError": {
      "defaultValue": null,
      "description": "Invoked on load error with {nativeEvent: {error}}",
      "name": "onError",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "(error: NativeSyntheticEvent<ImageErrorEventData>) => void"
      },
      "tags": {}
    },
    "onLoad": {
      "defaultValue": null,
      "description": "Invoked when load completes successfully\n{ source: { uri, height, width } }.",
      "name": "onLoad",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<ImageLoadEventData>) => void"
      },
      "tags": {}
    },
    "onLoadEnd": {
      "defaultValue": null,
      "description": "Invoked when load either succeeds or fails",
      "name": "onLoadEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onLoadStart": {
      "defaultValue": null,
      "description": "Invoked on load start",
      "name": "onLoadStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "progressiveRenderingEnabled": {
      "defaultValue": null,
      "description": "",
      "name": "progressiveRenderingEnabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "borderTopLeftRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderTopLeftRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "borderTopRightRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderTopRightRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "borderBottomLeftRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderBottomLeftRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "borderBottomRightRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderBottomRightRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "resizeMode": {
      "defaultValue": null,
      "description": "Determines how to resize the image when the frame doesn't match the raw\nimage dimensions.\n\n'cover': Scale the image uniformly (maintain the image's aspect ratio)\nso that both dimensions (width and height) of the image will be equal\nto or larger than the corresponding dimension of the view (minus padding).\n\n'contain': Scale the image uniformly (maintain the image's aspect ratio)\nso that both dimensions (width and height) of the image will be equal to\nor less than the corresponding dimension of the view (minus padding).\n\n'stretch': Scale width and height independently, This may change the\naspect ratio of the src.\n\n'repeat': Repeat the image to cover the frame of the view.\nThe image will keep it's size and aspect ratio. (iOS only)\n\n'center': Scale the image down so that it is completely visible,\nif bigger than the area of the view.\nThe image will not be scaled up.",
      "name": "resizeMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageResizeMode"
      },
      "tags": {}
    },
    "resizeMethod": {
      "defaultValue": null,
      "description": "The mechanism that should be used to resize the image when the image's dimensions\ndiffer from the image view's dimensions. Defaults to `auto`.\n\n- `auto`: Use heuristics to pick between `resize` and `scale`.\n\n- `resize`: A software operation which changes the encoded image in memory before it\ngets decoded. This should be used instead of `scale` when the image is much larger\nthan the view.\n\n- `scale`: The image gets drawn downscaled or upscaled. Compared to `resize`, `scale` is\nfaster (usually hardware accelerated) and produces higher quality images. This\nshould be used if the image is smaller than the view. It should also be used if the\nimage is slightly bigger than the view.\n\nMore details about `resize` and `scale` can be found at http://frescolib.org/docs/resizing-rotating.html.",
      "name": "resizeMethod",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"resize\" | \"scale\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "source": {
      "defaultValue": null,
      "description": "The image source (either a remote URL or a local file resource).\n\nThis prop can also contain several remote URLs, specified together with their width and height and potentially with scale/other URI arguments.\nThe native side will then choose the best uri to display based on the measured size of the image container.\nA cache property can be added to control how networked request interacts with the local cache.\n\nThe currently supported formats are png, jpg, jpeg, bmp, gif, webp (Android only), psd (iOS only).",
      "name": "source",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageSourcePropType"
      },
      "tags": {}
    },
    "loadingIndicatorSource": {
      "defaultValue": null,
      "description": "similarly to `source`, this property represents the resource used to render\nthe loading indicator for the image, displayed until image is ready to be\ndisplayed, typically after when it got downloaded from network.",
      "name": "loadingIndicatorSource",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageURISource"
      },
      "tags": {}
    },
    "defaultSource": {
      "defaultValue": null,
      "description": "A static image to display while downloading the final image off the network.",
      "name": "defaultSource",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number | ImageURISource"
      },
      "tags": {}
    },
    "blurRadius": {
      "defaultValue": null,
      "description": "blurRadius: the blur radius of the blur filter added to the image",
      "name": "blurRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "capInsets": {
      "defaultValue": null,
      "description": "When the image is resized, the corners of the size specified by capInsets will stay a fixed size,\nbut the center content and borders of the image will be stretched.\nThis is useful for creating resizable rounded buttons, shadows, and other resizable assets.\nMore info on Apple documentation",
      "name": "capInsets",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onProgress": {
      "defaultValue": null,
      "description": "Invoked on download progress with {nativeEvent: {loaded, total}}",
      "name": "onProgress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<ImageProgressEventDataIOS>) => void"
      },
      "tags": {}
    },
    "onPartialLoad": {
      "defaultValue": null,
      "description": "Invoked when a partial load of the image is complete. The definition of\nwhat constitutes a \"partial load\" is loader specific though this is meant\nfor progressive JPEG loads.",
      "name": "onPartialLoad",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "fadeDuration": {
      "defaultValue": null,
      "description": "Duration of fade in animation in ms. Defaults to 300",
      "name": "fadeDuration",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "width": {
      "defaultValue": null,
      "description": "Required if loading images via 'uri' from drawable folder on Android.\nExplanation: https://medium.com/@adamjacobb/react-native-performance-images-adf5843e120",
      "name": "width",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "height": {
      "defaultValue": null,
      "description": "Required if loading images via 'uri' from drawable folder on Android\nExplanation: https://medium.com/@adamjacobb/react-native-performance-images-adf5843e120",
      "name": "height",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    }
  },
  "Avatar": {
    "Component": {
      "defaultValue": {
        "value": "`Press handlers present then Pressable else View`"
      },
      "description": "Component for enclosing element (eg: TouchableHighlight, View, etc).",
      "name": "Component",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {
        "default": "`Press handlers present then Pressable else View`"
      }
    },
    "onPress": {
      "defaultValue": null,
      "description": "Callback function when pressing component.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Callback function when long pressing component.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for outer container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "source": {
      "defaultValue": null,
      "description": "Image source to be displayed on avatar.",
      "name": "source",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageSourcePropType"
      },
      "tags": {}
    },
    "avatarStyle": {
      "defaultValue": null,
      "description": "Style for avatar image.",
      "name": "avatarStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageStyle"
      },
      "tags": {}
    },
    "rounded": {
      "defaultValue": null,
      "description": "Makes the avatar circular.",
      "name": "rounded",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "title": {
      "defaultValue": null,
      "description": "Renders title in the placeholder.",
      "name": "title",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Style for the title.",
      "name": "titleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "overlayContainerStyle": {
      "defaultValue": null,
      "description": "Style for the view outside image or icon.",
      "name": "overlayContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "icon": {
      "defaultValue": null,
      "description": "Displays an icon as the main content of the Avatar. **Cannot be used alongside title**. When used with the `source` prop it will be used as the placeholder.",
      "name": "icon",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AvatarIcon"
      },
      "tags": {}
    },
    "iconStyle": {
      "defaultValue": null,
      "description": "Extra styling for icon component.",
      "name": "iconStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "size": {
      "defaultValue": {
        "value": "small"
      },
      "description": "Size of the avatar.",
      "name": "size",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | \"small\" | \"medium\" | \"large\" | \"xlarge\""
      },
      "tags": {}
    },
    "placeholderStyle": {
      "defaultValue": null,
      "description": "Adds style to the placeholder wrapper.",
      "name": "placeholderStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "renderPlaceholderContent": {
      "defaultValue": null,
      "description": "Custom placeholder element (by default, it's the title).",
      "name": "renderPlaceholderContent",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactElement<{}, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "imageProps": {
      "defaultValue": null,
      "description": "Optional properties to pass to the avatar e.g \"resizeMode\".",
      "name": "imageProps",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageProps(Object)"
      },
      "tags": {}
    },
    "ImageComponent": {
      "defaultValue": null,
      "description": "Custom ImageComponent for Avatar.",
      "name": "ImageComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
        "name": "AvatarProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ComponentClass<{}, any>"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      },
      "tags": {
        "default": "None",
        "type": "PressableProps except click handlers"
      }
    }
  },
  "Badge": {
    "containerStyle": {
      "defaultValue": null,
      "description": "Style for the container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Badge/Badge.tsx",
        "name": "BadgeProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Badge/Badge.tsx",
          "name": "BadgeProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "badgeStyle": {
      "defaultValue": null,
      "description": "Additional styling for badge (background) view component.",
      "name": "badgeStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Badge/Badge.tsx",
        "name": "BadgeProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Badge/Badge.tsx",
          "name": "BadgeProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "textProps": {
      "defaultValue": null,
      "description": "Extra props for text component.",
      "name": "textProps",
      "parent": {
        "fileName": "rne/packages/base/src/Badge/Badge.tsx",
        "name": "BadgeProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Badge/Badge.tsx",
          "name": "BadgeProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      },
      "tags": {}
    },
    "textStyle": {
      "defaultValue": null,
      "description": "Extra styling for icon component.",
      "name": "textStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Badge/Badge.tsx",
        "name": "BadgeProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Badge/Badge.tsx",
          "name": "BadgeProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "value": {
      "defaultValue": null,
      "description": "Text value to be displayed by badge, defaults to empty.",
      "name": "value",
      "parent": {
        "fileName": "rne/packages/base/src/Badge/Badge.tsx",
        "name": "BadgeProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Badge/Badge.tsx",
          "name": "BadgeProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode"
      },
      "tags": {}
    },
    "Component": {
      "defaultValue": {
        "value": "`Press handlers present then Pressable else View`"
      },
      "description": "Custom component to replace the badge outer component.",
      "name": "Component",
      "parent": {
        "fileName": "rne/packages/base/src/Badge/Badge.tsx",
        "name": "BadgeProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Badge/Badge.tsx",
          "name": "BadgeProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {
        "default": "`Press handlers present then Pressable else View`"
      }
    },
    "status": {
      "defaultValue": {
        "value": "primary"
      },
      "description": "Determines color of the indicator.",
      "name": "status",
      "parent": {
        "fileName": "rne/packages/base/src/Badge/Badge.tsx",
        "name": "BadgeProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Badge/Badge.tsx",
          "name": "BadgeProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"primary\" | \"success\" | \"warning\" | \"error\""
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      },
      "tags": {
        "default": "None",
        "type": "PressableProps except click handlers"
      }
    }
  },
  "BottomSheet": {
    "containerStyle": {
      "defaultValue": null,
      "description": "Style of the bottom sheet's container. Use this to change the color of the underlay.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/BottomSheet/BottomSheet.tsx",
        "name": "BottomSheetProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/BottomSheet/BottomSheet.tsx",
          "name": "BottomSheetProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "modalProps": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Additional props handed to the `Modal`.",
      "name": "modalProps",
      "parent": {
        "fileName": "rne/packages/base/src/BottomSheet/BottomSheet.tsx",
        "name": "BottomSheetProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/BottomSheet/BottomSheet.tsx",
          "name": "BottomSheetProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ModalProps"
      },
      "tags": {}
    },
    "backdropStyle": {
      "defaultValue": null,
      "description": "Style of the backdrop container.",
      "name": "backdropStyle",
      "parent": {
        "fileName": "rne/packages/base/src/BottomSheet/BottomSheet.tsx",
        "name": "BottomSheetProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/BottomSheet/BottomSheet.tsx",
          "name": "BottomSheetProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onBackdropPress": {
      "defaultValue": {
        "value": "Function"
      },
      "description": "Handler for backdrop press.",
      "name": "onBackdropPress",
      "parent": {
        "fileName": "rne/packages/base/src/BottomSheet/BottomSheet.tsx",
        "name": "BottomSheetProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/BottomSheet/BottomSheet.tsx",
          "name": "BottomSheetProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "isVisible": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Is the modal component shown.",
      "name": "isVisible",
      "parent": {
        "fileName": "rne/packages/base/src/BottomSheet/BottomSheet.tsx",
        "name": "BottomSheetProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/BottomSheet/BottomSheet.tsx",
          "name": "BottomSheetProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "scrollViewProps": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Used to add props to Scroll view.",
      "name": "scrollViewProps",
      "parent": {
        "fileName": "rne/packages/base/src/BottomSheet/BottomSheet.tsx",
        "name": "BottomSheetProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/BottomSheet/BottomSheet.tsx",
          "name": "BottomSheetProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ScrollViewProps"
      },
      "tags": {}
    }
  },
  "Button": {
    "title": {
      "defaultValue": {
        "value": ""
      },
      "description": "Add button title.",
      "name": "title",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ReactElement<{}, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Add additional styling for title component.",
      "name": "titleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "titleProps": {
      "defaultValue": null,
      "description": "Add additional props for Text component.",
      "name": "titleProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      },
      "tags": {}
    },
    "buttonStyle": {
      "defaultValue": null,
      "description": "Add additional styling for button component.",
      "name": "buttonStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "type": {
      "defaultValue": {
        "value": "solid"
      },
      "description": "Type of button.",
      "name": "type",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"solid\" | \"clear\" | \"outline\""
      },
      "tags": {}
    },
    "loading": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Prop to display a loading spinner.",
      "name": "loading",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "loadingStyle": {
      "defaultValue": null,
      "description": "Add additional styling for loading component.",
      "name": "loadingStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "loadingProps": {
      "defaultValue": null,
      "description": "Add additional props for ActivityIndicator component.",
      "name": "loadingProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ActivityIndicatorProps"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for Component container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "icon": {
      "defaultValue": null,
      "description": "Displays a centered icon (when no title) or to the left (with text). (can be used along with iconRight as well). Can be an object or a custom component.",
      "name": "icon",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "iconContainerStyle": {
      "defaultValue": null,
      "description": "Styling for Icon Component container.",
      "name": "iconContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "iconRight": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Displays Icon to the right of title. Needs to be used along with `icon` prop.",
      "name": "iconRight",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Displays a linear gradient. See [usage](#lineargradient-usage).",
      "name": "linearGradientProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      },
      "tags": {}
    },
    "TouchableComponent": {
      "defaultValue": null,
      "description": "Component for user interaction.",
      "name": "TouchableComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "typeof Component"
      },
      "tags": {}
    },
    "ViewComponent": {
      "defaultValue": null,
      "description": "Component for container.",
      "name": "ViewComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Disables user interaction.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style of the button when disabled.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabledTitleStyle": {
      "defaultValue": null,
      "description": "Style of the title when disabled.",
      "name": "disabledTitleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "raised": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Add raised button styling (optional). Has no effect if `type=\"clear\"`.",
      "name": "raised",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "iconPosition": {
      "defaultValue": {
        "value": "left"
      },
      "description": "Displays Icon to the position mentioned. Needs to be used along with `icon` prop.",
      "name": "iconPosition",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\" | \"top\" | \"bottom\""
      },
      "tags": {}
    },
    "uppercase": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Uppercase button title",
      "name": "uppercase",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "radius": {
      "defaultValue": {
        "value": "xs"
      },
      "description": "Radius of button",
      "name": "radius",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | sm | md | lg"
      },
      "tags": {
        "type": "number | sm | md | lg"
      }
    },
    "size": {
      "defaultValue": {
        "value": "md"
      },
      "description": "Button size",
      "name": "size",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"sm\" | \"md\" | \"lg\""
      },
      "tags": {}
    },
    "color": {
      "defaultValue": null,
      "description": "Color of Button",
      "name": "color",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | primary | secondary | success | warning | error"
      },
      "tags": {
        "type": "string | primary | secondary | success | warning | error"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Determines what the opacity of the wrapped view should be when touch is active.\nDefaults to 0.2",
      "name": "activeOpacity",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n\nenabled: If true, parallax effects are enabled.  Defaults to true.\nshiftDistanceX: Defaults to 2.0.\nshiftDistanceY: Defaults to 2.0.\ntiltAngle: Defaults to 0.05.\nmagnification: Defaults to 1.0.\npressMagnification: Defaults to 1.0.\npressDuration: Defaults to 0.3.\npressDelay: Defaults to 0.0.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "android"
      }
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Delay in ms, from onPressIn, before onLongPress is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressIn": {
      "defaultValue": null,
      "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
      "name": "delayPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressOut": {
      "defaultValue": null,
      "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
      "name": "delayPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far your touch can start away from the button.\nThis is added to pressRetentionOffset when moving off of the button.\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch hits\ntwo overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"blur\" occurs, meaning the element lost focus.\nSome platforms may not have the concept of blur.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "onFocus": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"focus\" occurs. Some platforms may not have\nthe concept of focus.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n{nativeEvent: {layout: {x, y, width, height}}}",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": {
        "value": "Function"
      },
      "description": "Called when the touch is released,\nbut not if cancelled (e.g. by a scroll that steals the responder lock).",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "//FIXME: not in doc but available in examples",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "When the scroll view is disabled, this defines how far your\ntouch may move off of the button, before deactivating the button.\nOnce deactivated, try moving it back and you'll see that the button\nis once again reactivated! Move it back and forth several times\nwhile the scroll view is disabled. Ensure you pass in a constant\nto reduce memory allocations.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "touchSoundDisabled": {
      "defaultValue": null,
      "description": "If true, doesn't play a system sound on touch.",
      "name": "touchSoundDisabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "android"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* TV preferred focus (see documentation for the View component).",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "nextFocusDown": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates down. See the Android documentation.",
      "name": "nextFocusDown",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusForward": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates forward. See the Android documentation.",
      "name": "nextFocusForward",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusLeft": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates left. See the Android documentation.",
      "name": "nextFocusLeft",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusRight": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates right. See the Android documentation.",
      "name": "nextFocusRight",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusUp": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates up. See the Android documentation.",
      "name": "nextFocusUp",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "background": {
      "defaultValue": null,
      "description": "Determines the type of background drawable that's going to be used to display feedback.\nIt takes an object with type property and extra data depending on the type.\nIt's recommended to use one of the following static methods to generate that dictionary:\n     1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n        default background for selectable elements (?android:attr/selectableItemBackground)\n     2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n        theme's default background for borderless selectable elements\n        (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n        with specified color (as a string). If property borderless evaluates to true the ripple will render\n        outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n        type is available on Android API level 21+",
      "name": "background",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "BackgroundPropType"
      },
      "tags": {}
    },
    "useForeground": {
      "defaultValue": null,
      "description": "",
      "name": "useForeground",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    }
  },
  "ButtonGroup": {
    "button": {
      "defaultValue": null,
      "description": "Button for the component.",
      "name": "button",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      },
      "tags": {}
    },
    "Component": {
      "defaultValue": null,
      "description": "Choose other button component such as TouchableOpacity.",
      "name": "Component",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": {
        "value": "Function"
      },
      "description": "Method to update Button Group Index.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(...args: any[]) => void"
      },
      "tags": {}
    },
    "buttons": {
      "defaultValue": null,
      "description": "Array of buttons for component (required), if returning a component, must be an object with { element: componentName }.",
      "name": "buttons",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(string | ButtonComponent | ButtonObject)[]"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Specify styling for main button container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "textStyle": {
      "defaultValue": null,
      "description": "Specify specific styling for text.",
      "name": "textStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "selectedTextStyle": {
      "defaultValue": null,
      "description": "Specify specific styling for text in the selected state.",
      "name": "selectedTextStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "selectedButtonStyle": {
      "defaultValue": null,
      "description": "Specify styling for selected button.",
      "name": "selectedButtonStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "underlayColor": {
      "defaultValue": {
        "value": "Color [Primary]"
      },
      "description": "Specify underlayColor for TouchableHighlight.",
      "name": "underlayColor",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "selectedIndex": {
      "defaultValue": {
        "value": "null"
      },
      "description": "Current selected index of array of buttons.",
      "name": "selectedIndex",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "selectedIndexes": {
      "defaultValue": {
        "value": "[]"
      },
      "description": "Current selected indexes from the array of buttons.",
      "name": "selectedIndexes",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number[]"
      },
      "tags": {}
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Add active opacity to the button in buttonGroup.",
      "name": "activeOpacity",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onHideUnderlay": {
      "defaultValue": null,
      "description": "Function called on hiding underlay.",
      "name": "onHideUnderlay",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onShowUnderlay": {
      "defaultValue": null,
      "description": "Function called on showing underlay.",
      "name": "onShowUnderlay",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "setOpacityTo": {
      "defaultValue": null,
      "description": "Function to set the opacity.",
      "name": "setOpacityTo",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(value: number) => void"
      },
      "tags": {}
    },
    "innerBorderStyle": {
      "defaultValue": null,
      "description": "Update the styling of the interior border of the list of buttons.",
      "name": "innerBorderStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "{ color?: string; width?: number; }"
      },
      "tags": {}
    },
    "buttonStyle": {
      "defaultValue": null,
      "description": "Specify styling for button.",
      "name": "buttonStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "buttonContainerStyle": {
      "defaultValue": null,
      "description": "Specify styling for button containers.",
      "name": "buttonContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "selectMultiple": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Allows the user to select multiple buttons.",
      "name": "selectMultiple",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Controls if buttons are disabled. Setting `true` makes all of them disabled, while using an array only makes those indices disabled.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean | number[]"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Styling for each button when disabled.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabledTextStyle": {
      "defaultValue": null,
      "description": "Styling for the text of each button when disabled.",
      "name": "disabledTextStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "disabledSelectedStyle": {
      "defaultValue": null,
      "description": "Styling for each selected button when disabled.",
      "name": "disabledSelectedStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabledSelectedTextStyle": {
      "defaultValue": null,
      "description": "Styling for the text of each selected button when disabled.",
      "name": "disabledSelectedTextStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "vertical": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Display the ButtonGroup vertically.",
      "name": "vertical",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      },
      "tags": {
        "default": "None",
        "type": "PressableProps except click handlers"
      }
    }
  },
  "Card.Divider": {
    "color": {
      "defaultValue": null,
      "description": "The color of the component.",
      "name": "color",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "inset": {
      "defaultValue": null,
      "description": "Applies inset to the divider.",
      "name": "inset",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "insetType": {
      "defaultValue": null,
      "description": "Applies inset to a specific direction to the divider.",
      "name": "insetType",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"middle\" | \"left\" | \"right\""
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Applies style to the divider.",
      "name": "style",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "subHeader": {
      "defaultValue": null,
      "description": "Adds subHeader text to the divider.",
      "name": "subHeader",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "subHeaderStyle": {
      "defaultValue": null,
      "description": "Adds style to the subHeader text of the divider",
      "name": "subHeaderStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "orientation": {
      "defaultValue": null,
      "description": "Apply orientation to the divider.",
      "name": "orientation",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"vertical\" | \"horizontal\""
      },
      "tags": {}
    },
    "width": {
      "defaultValue": null,
      "description": "Apply width to the divider.",
      "name": "width",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    }
  },
  "Card.FeaturedSubtitle": {
    "style": {
      "defaultValue": null,
      "description": "Add additional styling for Text.",
      "name": "style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h1": {
      "defaultValue": null,
      "description": "Text with Font size 40.",
      "name": "h1",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h2": {
      "defaultValue": null,
      "description": "Text with Font size 34.",
      "name": "h2",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h3": {
      "defaultValue": null,
      "description": "Text with Font size 28.",
      "name": "h3",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h4": {
      "defaultValue": null,
      "description": "Text with Font size 22.",
      "name": "h4",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h1Style": {
      "defaultValue": null,
      "description": "Styling when h1 is set.",
      "name": "h1Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h2Style": {
      "defaultValue": null,
      "description": "Styling when h2 is set.",
      "name": "h2Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h3Style": {
      "defaultValue": null,
      "description": "Styling when h3 is set.",
      "name": "h3Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h4Style": {
      "defaultValue": null,
      "description": "Styling when h4 is set.",
      "name": "h4Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "allowFontScaling": {
      "defaultValue": null,
      "description": "Specifies whether fonts should scale to respect Text Size accessibility settings.\nThe default is `true`.",
      "name": "allowFontScaling",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ellipsizeMode": {
      "defaultValue": null,
      "description": "This can be one of the following values:\n\n- `head` - The line is displayed so that the end fits in the container and the missing text\nat the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n- `middle` - The line is displayed so that the beginning and end fit in the container and the\nmissing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n- `tail` - The line is displayed so that the beginning fits in the container and the\nmissing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n- `clip` - Lines are not drawn past the edge of the text container.\n\nThe default is `tail`.\n\n`numberOfLines` must be set in conjunction with this prop.\n\n> `clip` is working only for iOS",
      "name": "ellipsizeMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "lineBreakMode": {
      "defaultValue": null,
      "description": "Line Break mode. Works only with numberOfLines.\nclip is working only for iOS",
      "name": "lineBreakMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "numberOfLines": {
      "defaultValue": null,
      "description": "Used to truncate the text with an ellipsis after computing the text\nlayout, including line wrapping, such that the total number of lines\ndoes not exceed this number.\n\nThis prop is commonly used with `ellipsizeMode`.",
      "name": "numberOfLines",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "onTextLayout": {
      "defaultValue": null,
      "description": "Invoked on Text layout",
      "name": "onTextLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TextLayoutEventData>) => void"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "This function is called on press.\nText intrinsically supports press handling with a default highlight state (which can be disabled with suppressHighlighting).",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "This function is called on long press.\ne.g., `onLongPress={this.increaseSize}>``",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "maxFontSizeMultiplier": {
      "defaultValue": null,
      "description": "Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n- null/undefined (default): inherit from the parent node or the global default (0)\n- 0: no max, ignore parent/global default\n- >= 1: sets the maxFontSizeMultiplier of this node to this value",
      "name": "maxFontSizeMultiplier",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "adjustsFontSizeToFit": {
      "defaultValue": null,
      "description": "Specifies whether font should be scaled down automatically to fit given style constraints.",
      "name": "adjustsFontSizeToFit",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "minimumFontScale": {
      "defaultValue": null,
      "description": "Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).",
      "name": "minimumFontScale",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "suppressHighlighting": {
      "defaultValue": null,
      "description": "When `true`, no visual change is made when text is pressed down. By\ndefault, a gray oval highlights the text on press down.",
      "name": "suppressHighlighting",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectable": {
      "defaultValue": null,
      "description": "Lets the user select text, to use the native copy and paste functionality.",
      "name": "selectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectionColor": {
      "defaultValue": null,
      "description": "The highlight color of the text.",
      "name": "selectionColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "textBreakStrategy": {
      "defaultValue": null,
      "description": "Set text break strategy on Android API Level 23+\ndefault is `highQuality`.",
      "name": "textBreakStrategy",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"simple\" | \"highQuality\" | \"balanced\""
      },
      "tags": {}
    },
    "dataDetectorType": {
      "defaultValue": null,
      "description": "Determines the types of data converted to clickable URLs in the text element.\nBy default no data types are detected.",
      "name": "dataDetectorType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"link\" | \"phoneNumber\" | \"email\" | \"all\""
      },
      "tags": {}
    },
    "android_hyphenationFrequency": {
      "defaultValue": null,
      "description": "Hyphenation strategy",
      "name": "android_hyphenationFrequency",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"balanced\" | \"normal\" | \"full\" | \"high\""
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    }
  },
  "Card.FeaturedTitle": {
    "style": {
      "defaultValue": null,
      "description": "Add additional styling for Text.",
      "name": "style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h1": {
      "defaultValue": null,
      "description": "Text with Font size 40.",
      "name": "h1",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h2": {
      "defaultValue": null,
      "description": "Text with Font size 34.",
      "name": "h2",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h3": {
      "defaultValue": null,
      "description": "Text with Font size 28.",
      "name": "h3",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h4": {
      "defaultValue": null,
      "description": "Text with Font size 22.",
      "name": "h4",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h1Style": {
      "defaultValue": null,
      "description": "Styling when h1 is set.",
      "name": "h1Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h2Style": {
      "defaultValue": null,
      "description": "Styling when h2 is set.",
      "name": "h2Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h3Style": {
      "defaultValue": null,
      "description": "Styling when h3 is set.",
      "name": "h3Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h4Style": {
      "defaultValue": null,
      "description": "Styling when h4 is set.",
      "name": "h4Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "allowFontScaling": {
      "defaultValue": null,
      "description": "Specifies whether fonts should scale to respect Text Size accessibility settings.\nThe default is `true`.",
      "name": "allowFontScaling",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ellipsizeMode": {
      "defaultValue": null,
      "description": "This can be one of the following values:\n\n- `head` - The line is displayed so that the end fits in the container and the missing text\nat the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n- `middle` - The line is displayed so that the beginning and end fit in the container and the\nmissing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n- `tail` - The line is displayed so that the beginning fits in the container and the\nmissing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n- `clip` - Lines are not drawn past the edge of the text container.\n\nThe default is `tail`.\n\n`numberOfLines` must be set in conjunction with this prop.\n\n> `clip` is working only for iOS",
      "name": "ellipsizeMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "lineBreakMode": {
      "defaultValue": null,
      "description": "Line Break mode. Works only with numberOfLines.\nclip is working only for iOS",
      "name": "lineBreakMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "numberOfLines": {
      "defaultValue": null,
      "description": "Used to truncate the text with an ellipsis after computing the text\nlayout, including line wrapping, such that the total number of lines\ndoes not exceed this number.\n\nThis prop is commonly used with `ellipsizeMode`.",
      "name": "numberOfLines",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "onTextLayout": {
      "defaultValue": null,
      "description": "Invoked on Text layout",
      "name": "onTextLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TextLayoutEventData>) => void"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "This function is called on press.\nText intrinsically supports press handling with a default highlight state (which can be disabled with suppressHighlighting).",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "This function is called on long press.\ne.g., `onLongPress={this.increaseSize}>``",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "maxFontSizeMultiplier": {
      "defaultValue": null,
      "description": "Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n- null/undefined (default): inherit from the parent node or the global default (0)\n- 0: no max, ignore parent/global default\n- >= 1: sets the maxFontSizeMultiplier of this node to this value",
      "name": "maxFontSizeMultiplier",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "adjustsFontSizeToFit": {
      "defaultValue": null,
      "description": "Specifies whether font should be scaled down automatically to fit given style constraints.",
      "name": "adjustsFontSizeToFit",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "minimumFontScale": {
      "defaultValue": null,
      "description": "Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).",
      "name": "minimumFontScale",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "suppressHighlighting": {
      "defaultValue": null,
      "description": "When `true`, no visual change is made when text is pressed down. By\ndefault, a gray oval highlights the text on press down.",
      "name": "suppressHighlighting",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectable": {
      "defaultValue": null,
      "description": "Lets the user select text, to use the native copy and paste functionality.",
      "name": "selectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectionColor": {
      "defaultValue": null,
      "description": "The highlight color of the text.",
      "name": "selectionColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "textBreakStrategy": {
      "defaultValue": null,
      "description": "Set text break strategy on Android API Level 23+\ndefault is `highQuality`.",
      "name": "textBreakStrategy",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"simple\" | \"highQuality\" | \"balanced\""
      },
      "tags": {}
    },
    "dataDetectorType": {
      "defaultValue": null,
      "description": "Determines the types of data converted to clickable URLs in the text element.\nBy default no data types are detected.",
      "name": "dataDetectorType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"link\" | \"phoneNumber\" | \"email\" | \"all\""
      },
      "tags": {}
    },
    "android_hyphenationFrequency": {
      "defaultValue": null,
      "description": "Hyphenation strategy",
      "name": "android_hyphenationFrequency",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"balanced\" | \"normal\" | \"full\" | \"high\""
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    }
  },
  "Card.Image": {
    "Component": {
      "defaultValue": {
        "value": "`Press handlers present then Pressable else View`"
      },
      "description": "Define the component passed to image.",
      "name": "Component",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {
        "default": "`Press handlers present then Pressable else View`"
      }
    },
    "ImageComponent": {
      "defaultValue": null,
      "description": "Specify a different component as the Image component.",
      "name": "ImageComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "typeof Component"
      },
      "tags": {}
    },
    "PlaceholderContent": {
      "defaultValue": null,
      "description": "Content to load when Image is rendering.",
      "name": "PlaceholderContent",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactElement<any, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Additional styling for the container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "childrenContainerStyle": {
      "defaultValue": null,
      "description": "Additional styling for the children container.",
      "name": "childrenContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "placeholderStyle": {
      "defaultValue": null,
      "description": "Additional styling for the placeholder container.",
      "name": "placeholderStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "transition": {
      "defaultValue": null,
      "description": "Perform fade transition on image load.",
      "name": "transition",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "transitionDuration": {
      "defaultValue": null,
      "description": "Perform fade transition on image load.",
      "name": "transitionDuration",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "\nStyle",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "onLayout function\n\nInvoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height} }}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "onError": {
      "defaultValue": null,
      "description": "Invoked on load error with {nativeEvent: {error}}",
      "name": "onError",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "(error: NativeSyntheticEvent<ImageErrorEventData>) => void"
      },
      "tags": {}
    },
    "onLoad": {
      "defaultValue": null,
      "description": "Invoked when load completes successfully\n{ source: { uri, height, width } }.",
      "name": "onLoad",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<ImageLoadEventData>) => void"
      },
      "tags": {}
    },
    "onLoadEnd": {
      "defaultValue": null,
      "description": "Invoked when load either succeeds or fails",
      "name": "onLoadEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onLoadStart": {
      "defaultValue": null,
      "description": "Invoked on load start",
      "name": "onLoadStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "progressiveRenderingEnabled": {
      "defaultValue": null,
      "description": "",
      "name": "progressiveRenderingEnabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "borderRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "borderTopLeftRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderTopLeftRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "borderTopRightRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderTopRightRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "borderBottomLeftRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderBottomLeftRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "borderBottomRightRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderBottomRightRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "resizeMode": {
      "defaultValue": null,
      "description": "Determines how to resize the image when the frame doesn't match the raw\nimage dimensions.\n\n'cover': Scale the image uniformly (maintain the image's aspect ratio)\nso that both dimensions (width and height) of the image will be equal\nto or larger than the corresponding dimension of the view (minus padding).\n\n'contain': Scale the image uniformly (maintain the image's aspect ratio)\nso that both dimensions (width and height) of the image will be equal to\nor less than the corresponding dimension of the view (minus padding).\n\n'stretch': Scale width and height independently, This may change the\naspect ratio of the src.\n\n'repeat': Repeat the image to cover the frame of the view.\nThe image will keep it's size and aspect ratio. (iOS only)\n\n'center': Scale the image down so that it is completely visible,\nif bigger than the area of the view.\nThe image will not be scaled up.",
      "name": "resizeMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageResizeMode"
      },
      "tags": {}
    },
    "resizeMethod": {
      "defaultValue": null,
      "description": "The mechanism that should be used to resize the image when the image's dimensions\ndiffer from the image view's dimensions. Defaults to `auto`.\n\n- `auto`: Use heuristics to pick between `resize` and `scale`.\n\n- `resize`: A software operation which changes the encoded image in memory before it\ngets decoded. This should be used instead of `scale` when the image is much larger\nthan the view.\n\n- `scale`: The image gets drawn downscaled or upscaled. Compared to `resize`, `scale` is\nfaster (usually hardware accelerated) and produces higher quality images. This\nshould be used if the image is smaller than the view. It should also be used if the\nimage is slightly bigger than the view.\n\nMore details about `resize` and `scale` can be found at http://frescolib.org/docs/resizing-rotating.html.",
      "name": "resizeMethod",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"resize\" | \"scale\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "source": {
      "defaultValue": null,
      "description": "The image source (either a remote URL or a local file resource).\n\nThis prop can also contain several remote URLs, specified together with their width and height and potentially with scale/other URI arguments.\nThe native side will then choose the best uri to display based on the measured size of the image container.\nA cache property can be added to control how networked request interacts with the local cache.\n\nThe currently supported formats are png, jpg, jpeg, bmp, gif, webp (Android only), psd (iOS only).",
      "name": "source",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": true,
      "type": {
        "name": "ImageSourcePropType"
      },
      "tags": {}
    },
    "loadingIndicatorSource": {
      "defaultValue": null,
      "description": "similarly to `source`, this property represents the resource used to render\nthe loading indicator for the image, displayed until image is ready to be\ndisplayed, typically after when it got downloaded from network.",
      "name": "loadingIndicatorSource",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageURISource"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "A unique identifier for this element to be used in UI Automation testing scripts.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed images from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "defaultSource": {
      "defaultValue": null,
      "description": "A static image to display while downloading the final image off the network.",
      "name": "defaultSource",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number | ImageURISource"
      },
      "tags": {}
    },
    "blurRadius": {
      "defaultValue": null,
      "description": "blurRadius: the blur radius of the blur filter added to the image",
      "name": "blurRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "capInsets": {
      "defaultValue": null,
      "description": "When the image is resized, the corners of the size specified by capInsets will stay a fixed size,\nbut the center content and borders of the image will be stretched.\nThis is useful for creating resizable rounded buttons, shadows, and other resizable assets.\nMore info on Apple documentation",
      "name": "capInsets",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onProgress": {
      "defaultValue": null,
      "description": "Invoked on download progress with {nativeEvent: {loaded, total}}",
      "name": "onProgress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<ImageProgressEventDataIOS>) => void"
      },
      "tags": {}
    },
    "onPartialLoad": {
      "defaultValue": null,
      "description": "Invoked when a partial load of the image is complete. The definition of\nwhat constitutes a \"partial load\" is loader specific though this is meant\nfor progressive JPEG loads.",
      "name": "onPartialLoad",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "fadeDuration": {
      "defaultValue": null,
      "description": "Duration of fade in animation in ms. Defaults to 300",
      "name": "fadeDuration",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "width": {
      "defaultValue": null,
      "description": "Required if loading images via 'uri' from drawable folder on Android.\nExplanation: https://medium.com/@adamjacobb/react-native-performance-images-adf5843e120",
      "name": "width",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "height": {
      "defaultValue": null,
      "description": "Required if loading images via 'uri' from drawable folder on Android\nExplanation: https://medium.com/@adamjacobb/react-native-performance-images-adf5843e120",
      "name": "height",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      },
      "tags": {
        "default": "None",
        "type": "PressableProps except click handlers"
      }
    }
  },
  "Card.Title": {
    "style": {
      "defaultValue": null,
      "description": "Add additional styling for Text.",
      "name": "style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h1": {
      "defaultValue": null,
      "description": "Text with Font size 40.",
      "name": "h1",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h2": {
      "defaultValue": null,
      "description": "Text with Font size 34.",
      "name": "h2",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h3": {
      "defaultValue": null,
      "description": "Text with Font size 28.",
      "name": "h3",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h4": {
      "defaultValue": null,
      "description": "Text with Font size 22.",
      "name": "h4",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h1Style": {
      "defaultValue": null,
      "description": "Styling when h1 is set.",
      "name": "h1Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h2Style": {
      "defaultValue": null,
      "description": "Styling when h2 is set.",
      "name": "h2Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h3Style": {
      "defaultValue": null,
      "description": "Styling when h3 is set.",
      "name": "h3Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h4Style": {
      "defaultValue": null,
      "description": "Styling when h4 is set.",
      "name": "h4Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "allowFontScaling": {
      "defaultValue": null,
      "description": "Specifies whether fonts should scale to respect Text Size accessibility settings.\nThe default is `true`.",
      "name": "allowFontScaling",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ellipsizeMode": {
      "defaultValue": null,
      "description": "This can be one of the following values:\n\n- `head` - The line is displayed so that the end fits in the container and the missing text\nat the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n- `middle` - The line is displayed so that the beginning and end fit in the container and the\nmissing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n- `tail` - The line is displayed so that the beginning fits in the container and the\nmissing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n- `clip` - Lines are not drawn past the edge of the text container.\n\nThe default is `tail`.\n\n`numberOfLines` must be set in conjunction with this prop.\n\n> `clip` is working only for iOS",
      "name": "ellipsizeMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "lineBreakMode": {
      "defaultValue": null,
      "description": "Line Break mode. Works only with numberOfLines.\nclip is working only for iOS",
      "name": "lineBreakMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "numberOfLines": {
      "defaultValue": null,
      "description": "Used to truncate the text with an ellipsis after computing the text\nlayout, including line wrapping, such that the total number of lines\ndoes not exceed this number.\n\nThis prop is commonly used with `ellipsizeMode`.",
      "name": "numberOfLines",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "onTextLayout": {
      "defaultValue": null,
      "description": "Invoked on Text layout",
      "name": "onTextLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TextLayoutEventData>) => void"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "This function is called on press.\nText intrinsically supports press handling with a default highlight state (which can be disabled with suppressHighlighting).",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "This function is called on long press.\ne.g., `onLongPress={this.increaseSize}>``",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "maxFontSizeMultiplier": {
      "defaultValue": null,
      "description": "Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n- null/undefined (default): inherit from the parent node or the global default (0)\n- 0: no max, ignore parent/global default\n- >= 1: sets the maxFontSizeMultiplier of this node to this value",
      "name": "maxFontSizeMultiplier",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "adjustsFontSizeToFit": {
      "defaultValue": null,
      "description": "Specifies whether font should be scaled down automatically to fit given style constraints.",
      "name": "adjustsFontSizeToFit",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "minimumFontScale": {
      "defaultValue": null,
      "description": "Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).",
      "name": "minimumFontScale",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "suppressHighlighting": {
      "defaultValue": null,
      "description": "When `true`, no visual change is made when text is pressed down. By\ndefault, a gray oval highlights the text on press down.",
      "name": "suppressHighlighting",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectable": {
      "defaultValue": null,
      "description": "Lets the user select text, to use the native copy and paste functionality.",
      "name": "selectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectionColor": {
      "defaultValue": null,
      "description": "The highlight color of the text.",
      "name": "selectionColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "textBreakStrategy": {
      "defaultValue": null,
      "description": "Set text break strategy on Android API Level 23+\ndefault is `highQuality`.",
      "name": "textBreakStrategy",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"simple\" | \"highQuality\" | \"balanced\""
      },
      "tags": {}
    },
    "dataDetectorType": {
      "defaultValue": null,
      "description": "Determines the types of data converted to clickable URLs in the text element.\nBy default no data types are detected.",
      "name": "dataDetectorType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"link\" | \"phoneNumber\" | \"email\" | \"all\""
      },
      "tags": {}
    },
    "android_hyphenationFrequency": {
      "defaultValue": null,
      "description": "Hyphenation strategy",
      "name": "android_hyphenationFrequency",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"balanced\" | \"normal\" | \"full\" | \"high\""
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    }
  },
  "Card": {
    "containerStyle": {
      "defaultValue": null,
      "description": "Outer container style.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Card/Card.tsx",
        "name": "CardProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Card/Card.tsx",
          "name": "CardProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "wrapperStyle": {
      "defaultValue": null,
      "description": "Inner container style.",
      "name": "wrapperStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Card/Card.tsx",
        "name": "CardProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Card/Card.tsx",
          "name": "CardProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    }
  },
  "CheckBox": {
    "Component": {
      "defaultValue": null,
      "description": "Specify React Native component for main button.",
      "name": "Component",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "iconRight": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Moves icon to right of text.",
      "name": "iconRight",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "title": {
      "defaultValue": null,
      "description": "Title of checkbox.",
      "name": "title",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ReactElement<{}, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "titleProps": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Additional props for the title Text component.",
      "name": "titleProps",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      },
      "tags": {}
    },
    "center": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Aligns checkbox to center.",
      "name": "center",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "right": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Aligns checkbox to right.",
      "name": "right",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Style of main container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "wrapperStyle": {
      "defaultValue": null,
      "description": "Style for the wrapper of checkbox.",
      "name": "wrapperStyle",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "textStyle": {
      "defaultValue": null,
      "description": "Style of text.",
      "name": "textStyle",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Disables user interaction.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style of the checkbox container when disabled.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabledTitleStyle": {
      "defaultValue": null,
      "description": "Style of the title when disabled.",
      "name": "disabledTitleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "checkedTitle": {
      "defaultValue": null,
      "description": "Specify a custom checked message.",
      "name": "checkedTitle",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "fontFamily": {
      "defaultValue": null,
      "description": "Specify different font family.",
      "name": "fontFamily",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "Called after the element loses focus.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {
        "platform": "windows"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "Called after the element is focused.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {
        "platform": "windows"
      }
    },
    "children": {
      "defaultValue": null,
      "description": "Either children or a render prop that receives a boolean reflecting whether\nthe component is currently pressed.",
      "name": "children",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(ReactNode | ((state: PressableStateCallbackType) => ReactNode)) & ReactNode"
      },
      "tags": {}
    },
    "cancelable": {
      "defaultValue": null,
      "description": "Whether a press gesture can be interrupted by a parent gesture such as a\nscroll event. Defaults to true.",
      "name": "cancelable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a press is detected.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a touch is considered a\npress before `onPressOut` is triggered.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      },
      "tags": {}
    },
    "android_disableSound": {
      "defaultValue": null,
      "description": "If true, doesn't play system sound on touch.",
      "name": "android_disableSound",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "android_ripple": {
      "defaultValue": null,
      "description": "Enables the Android ripple effect and configures its color.",
      "name": "android_ripple",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableAndroidRippleConfig"
      },
      "tags": {}
    },
    "testOnly_pressed": {
      "defaultValue": null,
      "description": "Used only for documentation or testing (e.g. snapshot testing).",
      "name": "testOnly_pressed",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Either view styles or a function that receives a boolean reflecting whether\nthe component is currently pressed and returns view styles.",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "checked": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Flag for checking the icon.",
      "name": "checked",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onIconPress": {
      "defaultValue": null,
      "description": "onPress function for checkbox.",
      "name": "onIconPress",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onLongIconPress": {
      "defaultValue": null,
      "description": "onLongPress function for checkbox.",
      "name": "onLongIconPress",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "size": {
      "defaultValue": null,
      "description": "Size of the checkbox.",
      "name": "size",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "checkedIcon": {
      "defaultValue": null,
      "description": "Default checked icon ([Font Awesome Icon](http://fontawesome.io/icons/)).",
      "name": "checkedIcon",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ReactElement<{}, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "uncheckedIcon": {
      "defaultValue": null,
      "description": "Default checked icon ([Font Awesome Icon](http://fontawesome.io/icons/))",
      "name": "uncheckedIcon",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ReactElement<{}, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "iconType": {
      "defaultValue": null,
      "description": "Type of icon set. [Supported sets here](icon#available-icon-sets).",
      "name": "iconType",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "checkedColor": {
      "defaultValue": {
        "value": "Color [Primary]"
      },
      "description": "Default checked color.",
      "name": "checkedColor",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "uncheckedColor": {
      "defaultValue": null,
      "description": "Default unchecked color.",
      "name": "uncheckedColor",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    }
  },
  "Chip": {
    "type": {
      "defaultValue": null,
      "description": "Type of button.",
      "name": "type",
      "parent": {
        "fileName": "rne/packages/base/src/Chip/Chip.tsx",
        "name": "ChipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Chip/Chip.tsx",
          "name": "ChipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"solid\" | \"outline\""
      },
      "tags": {}
    },
    "size": {
      "defaultValue": null,
      "description": "Button size",
      "name": "size",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"sm\" | \"md\" | \"lg\""
      },
      "tags": {}
    },
    "raised": {
      "defaultValue": null,
      "description": "Add raised button styling (optional). Has no effect if `type=\"clear\"`.",
      "name": "raised",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for Component container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disables user interaction.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style of the button when disabled.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when the touch is released,\nbut not if cancelled (e.g. by a scroll that steals the responder lock).",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "color": {
      "defaultValue": null,
      "description": "Color of Button",
      "name": "color",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | primary | secondary | success | warning | error"
      },
      "tags": {
        "type": "string | primary | secondary | success | warning | error"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "//FIXME: not in doc but available in examples",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n{nativeEvent: {layout: {x, y, width, height}}}",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Determines what the opacity of the wrapped view should be when touch is active.\nDefaults to 0.2",
      "name": "activeOpacity",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Delay in ms, from onPressIn, before onLongPress is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressIn": {
      "defaultValue": null,
      "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
      "name": "delayPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressOut": {
      "defaultValue": null,
      "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
      "name": "delayPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far your touch can start away from the button.\nThis is added to pressRetentionOffset when moving off of the button.\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch hits\ntwo overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"blur\" occurs, meaning the element lost focus.\nSome platforms may not have the concept of blur.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "onFocus": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"focus\" occurs. Some platforms may not have\nthe concept of focus.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "When the scroll view is disabled, this defines how far your\ntouch may move off of the button, before deactivating the button.\nOnce deactivated, try moving it back and you'll see that the button\nis once again reactivated! Move it back and forth several times\nwhile the scroll view is disabled. Ensure you pass in a constant\nto reduce memory allocations.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "touchSoundDisabled": {
      "defaultValue": null,
      "description": "If true, doesn't play a system sound on touch.",
      "name": "touchSoundDisabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "android"
      }
    },
    "background": {
      "defaultValue": null,
      "description": "Determines the type of background drawable that's going to be used to display feedback.\nIt takes an object with type property and extra data depending on the type.\nIt's recommended to use one of the following static methods to generate that dictionary:\n     1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n        default background for selectable elements (?android:attr/selectableItemBackground)\n     2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n        theme's default background for borderless selectable elements\n        (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n        with specified color (as a string). If property borderless evaluates to true the ripple will render\n        outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n        type is available on Android API level 21+",
      "name": "background",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "BackgroundPropType"
      },
      "tags": {}
    },
    "useForeground": {
      "defaultValue": null,
      "description": "",
      "name": "useForeground",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* TV preferred focus (see documentation for the View component).",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "nextFocusDown": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates down. See the Android documentation.",
      "name": "nextFocusDown",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusForward": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates forward. See the Android documentation.",
      "name": "nextFocusForward",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusLeft": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates left. See the Android documentation.",
      "name": "nextFocusLeft",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusRight": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates right. See the Android documentation.",
      "name": "nextFocusRight",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusUp": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates up. See the Android documentation.",
      "name": "nextFocusUp",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n\nenabled: If true, parallax effects are enabled.  Defaults to true.\nshiftDistanceX: Defaults to 2.0.\nshiftDistanceY: Defaults to 2.0.\ntiltAngle: Defaults to 0.05.\nmagnification: Defaults to 1.0.\npressMagnification: Defaults to 1.0.\npressDuration: Defaults to 0.3.\npressDelay: Defaults to 0.0.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "android"
      }
    },
    "title": {
      "defaultValue": null,
      "description": "Add button title.",
      "name": "title",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ReactElement<{}, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Add additional styling for title component.",
      "name": "titleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "icon": {
      "defaultValue": null,
      "description": "Displays a centered icon (when no title) or to the left (with text). (can be used along with iconRight as well). Can be an object or a custom component.",
      "name": "icon",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "titleProps": {
      "defaultValue": null,
      "description": "Add additional props for Text component.",
      "name": "titleProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      },
      "tags": {}
    },
    "buttonStyle": {
      "defaultValue": null,
      "description": "Add additional styling for button component.",
      "name": "buttonStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "iconContainerStyle": {
      "defaultValue": null,
      "description": "Styling for Icon Component container.",
      "name": "iconContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "iconRight": {
      "defaultValue": null,
      "description": "Displays Icon to the right of title. Needs to be used along with `icon` prop.",
      "name": "iconRight",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Displays a linear gradient. See [usage](#lineargradient-usage).",
      "name": "linearGradientProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      },
      "tags": {}
    },
    "TouchableComponent": {
      "defaultValue": null,
      "description": "Component for user interaction.",
      "name": "TouchableComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "typeof Component"
      },
      "tags": {}
    },
    "ViewComponent": {
      "defaultValue": null,
      "description": "Component for container.",
      "name": "ViewComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "disabledTitleStyle": {
      "defaultValue": null,
      "description": "Style of the title when disabled.",
      "name": "disabledTitleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "iconPosition": {
      "defaultValue": null,
      "description": "Displays Icon to the position mentioned. Needs to be used along with `icon` prop.",
      "name": "iconPosition",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\" | \"top\" | \"bottom\""
      },
      "tags": {}
    },
    "uppercase": {
      "defaultValue": null,
      "description": "Uppercase button title",
      "name": "uppercase",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "radius": {
      "defaultValue": null,
      "description": "Radius of button",
      "name": "radius",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | sm | md | lg"
      },
      "tags": {
        "type": "number | sm | md | lg"
      }
    }
  },
  "Dialog.Actions": {
    "children": {
      "defaultValue": null,
      "description": "Add Enclosed components as an action to the dialog.",
      "name": "children",
      "parent": {
        "fileName": "rne/packages/base/src/Dialog/Dialog.Actions.tsx",
        "name": "DialogActionsProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Dialog/Dialog.Actions.tsx",
          "name": "DialogActionsProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode"
      },
      "tags": {}
    }
  },
  "Dialog.Button": {
    "title": {
      "defaultValue": {
        "value": "ACTION"
      },
      "description": "Add button title.",
      "name": "title",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ReactElement<{}, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Add additional styling for title component.",
      "name": "titleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "titleProps": {
      "defaultValue": null,
      "description": "Add additional props for Text component.",
      "name": "titleProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      },
      "tags": {}
    },
    "buttonStyle": {
      "defaultValue": null,
      "description": "Add additional styling for button component.",
      "name": "buttonStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "type": {
      "defaultValue": {
        "value": "clear"
      },
      "description": "Type of button.",
      "name": "type",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"solid\" | \"clear\" | \"outline\""
      },
      "tags": {}
    },
    "loading": {
      "defaultValue": null,
      "description": "Prop to display a loading spinner.",
      "name": "loading",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "loadingStyle": {
      "defaultValue": null,
      "description": "Add additional styling for loading component.",
      "name": "loadingStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "loadingProps": {
      "defaultValue": null,
      "description": "Add additional props for ActivityIndicator component.",
      "name": "loadingProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ActivityIndicatorProps"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for Component container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "icon": {
      "defaultValue": null,
      "description": "Displays a centered icon (when no title) or to the left (with text). (can be used along with iconRight as well). Can be an object or a custom component.",
      "name": "icon",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "iconContainerStyle": {
      "defaultValue": null,
      "description": "Styling for Icon Component container.",
      "name": "iconContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "iconRight": {
      "defaultValue": null,
      "description": "Displays Icon to the right of title. Needs to be used along with `icon` prop.",
      "name": "iconRight",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Displays a linear gradient. See [usage](#lineargradient-usage).",
      "name": "linearGradientProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      },
      "tags": {}
    },
    "TouchableComponent": {
      "defaultValue": null,
      "description": "Component for user interaction.",
      "name": "TouchableComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "typeof Component"
      },
      "tags": {}
    },
    "ViewComponent": {
      "defaultValue": null,
      "description": "Component for container.",
      "name": "ViewComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disables user interaction.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style of the button when disabled.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabledTitleStyle": {
      "defaultValue": null,
      "description": "Style of the title when disabled.",
      "name": "disabledTitleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "raised": {
      "defaultValue": null,
      "description": "Add raised button styling (optional). Has no effect if `type=\"clear\"`.",
      "name": "raised",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "iconPosition": {
      "defaultValue": null,
      "description": "Displays Icon to the position mentioned. Needs to be used along with `icon` prop.",
      "name": "iconPosition",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\" | \"top\" | \"bottom\""
      },
      "tags": {}
    },
    "uppercase": {
      "defaultValue": null,
      "description": "Uppercase button title",
      "name": "uppercase",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "radius": {
      "defaultValue": null,
      "description": "Radius of button",
      "name": "radius",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | sm | md | lg"
      },
      "tags": {
        "type": "number | sm | md | lg"
      }
    },
    "size": {
      "defaultValue": null,
      "description": "Button size",
      "name": "size",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"sm\" | \"md\" | \"lg\""
      },
      "tags": {}
    },
    "color": {
      "defaultValue": null,
      "description": "Color of Button",
      "name": "color",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | primary | secondary | success | warning | error"
      },
      "tags": {
        "type": "string | primary | secondary | success | warning | error"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Determines what the opacity of the wrapped view should be when touch is active.\nDefaults to 0.2",
      "name": "activeOpacity",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n\nenabled: If true, parallax effects are enabled.  Defaults to true.\nshiftDistanceX: Defaults to 2.0.\nshiftDistanceY: Defaults to 2.0.\ntiltAngle: Defaults to 0.05.\nmagnification: Defaults to 1.0.\npressMagnification: Defaults to 1.0.\npressDuration: Defaults to 0.3.\npressDelay: Defaults to 0.0.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "android"
      }
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Delay in ms, from onPressIn, before onLongPress is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressIn": {
      "defaultValue": null,
      "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
      "name": "delayPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressOut": {
      "defaultValue": null,
      "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
      "name": "delayPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far your touch can start away from the button.\nThis is added to pressRetentionOffset when moving off of the button.\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch hits\ntwo overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"blur\" occurs, meaning the element lost focus.\nSome platforms may not have the concept of blur.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "onFocus": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"focus\" occurs. Some platforms may not have\nthe concept of focus.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n{nativeEvent: {layout: {x, y, width, height}}}",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when the touch is released,\nbut not if cancelled (e.g. by a scroll that steals the responder lock).",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "//FIXME: not in doc but available in examples",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "When the scroll view is disabled, this defines how far your\ntouch may move off of the button, before deactivating the button.\nOnce deactivated, try moving it back and you'll see that the button\nis once again reactivated! Move it back and forth several times\nwhile the scroll view is disabled. Ensure you pass in a constant\nto reduce memory allocations.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "touchSoundDisabled": {
      "defaultValue": null,
      "description": "If true, doesn't play a system sound on touch.",
      "name": "touchSoundDisabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "android"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* TV preferred focus (see documentation for the View component).",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "nextFocusDown": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates down. See the Android documentation.",
      "name": "nextFocusDown",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusForward": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates forward. See the Android documentation.",
      "name": "nextFocusForward",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusLeft": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates left. See the Android documentation.",
      "name": "nextFocusLeft",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusRight": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates right. See the Android documentation.",
      "name": "nextFocusRight",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusUp": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates up. See the Android documentation.",
      "name": "nextFocusUp",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "background": {
      "defaultValue": null,
      "description": "Determines the type of background drawable that's going to be used to display feedback.\nIt takes an object with type property and extra data depending on the type.\nIt's recommended to use one of the following static methods to generate that dictionary:\n     1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n        default background for selectable elements (?android:attr/selectableItemBackground)\n     2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n        theme's default background for borderless selectable elements\n        (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n        with specified color (as a string). If property borderless evaluates to true the ripple will render\n        outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n        type is available on Android API level 21+",
      "name": "background",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "BackgroundPropType"
      },
      "tags": {}
    },
    "useForeground": {
      "defaultValue": null,
      "description": "",
      "name": "useForeground",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    }
  },
  "Dialog.Loading": {
    "loadingStyle": {
      "defaultValue": null,
      "description": "Add additional styling for loading component.",
      "name": "loadingStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Dialog/Dialog.Loading.tsx",
        "name": "DialogLoadingProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Dialog/Dialog.Loading.tsx",
          "name": "DialogLoadingProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "loadingProps": {
      "defaultValue": {
        "value": "{ size: 'large' }"
      },
      "description": "Add additional props for ActivityIndicator component",
      "name": "loadingProps",
      "parent": {
        "fileName": "rne/packages/base/src/Dialog/Dialog.Loading.tsx",
        "name": "DialogLoadingProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Dialog/Dialog.Loading.tsx",
          "name": "DialogLoadingProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ActivityIndicatorProps"
      },
      "tags": {}
    }
  },
  "Dialog.Title": {
    "title": {
      "defaultValue": null,
      "description": "Add Dialog title.",
      "name": "title",
      "parent": {
        "fileName": "rne/packages/base/src/Dialog/Dialog.Title.tsx",
        "name": "DialogTitleProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Dialog/Dialog.Title.tsx",
          "name": "DialogTitleProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Add additional styling for title component.",
      "name": "titleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Dialog/Dialog.Title.tsx",
        "name": "DialogTitleProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Dialog/Dialog.Title.tsx",
          "name": "DialogTitleProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "titleProps": {
      "defaultValue": null,
      "description": "Add additional props for Text component.",
      "name": "titleProps",
      "parent": {
        "fileName": "rne/packages/base/src/Dialog/Dialog.Title.tsx",
        "name": "DialogTitleProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Dialog/Dialog.Title.tsx",
          "name": "DialogTitleProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      },
      "tags": {}
    }
  },
  "Dialog": {
    "children": {
      "defaultValue": null,
      "description": "Add Enclosed components.",
      "name": "children",
      "parent": {
        "fileName": "rne/packages/base/src/Dialog/Dialog.tsx",
        "name": "DialogProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode"
      },
      "tags": {}
    },
    "overlayStyle": {
      "defaultValue": null,
      "description": "Add additional styling to the internal Overlay component.",
      "name": "overlayStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Dialog/Dialog.tsx",
        "name": "DialogProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      },
      "tags": {
        "default": "None",
        "type": "PressableProps except click handlers"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "backdropStyle": {
      "defaultValue": null,
      "description": "Style of the backdrop container.",
      "name": "backdropStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
        "name": "OverlayProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
          "name": "OverlayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onBackdropPress": {
      "defaultValue": null,
      "description": "Handler for backdrop press (only works when `fullscreen` is false).",
      "name": "onBackdropPress",
      "parent": {
        "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
        "name": "OverlayProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
          "name": "OverlayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "isVisible": {
      "defaultValue": null,
      "description": "If true, the overlay is visible.",
      "name": "isVisible",
      "parent": {
        "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
        "name": "OverlayProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
          "name": "OverlayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "animated": {
      "defaultValue": null,
      "description": "",
      "name": "animated",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "deprecated": "Use animationType instead"
      }
    },
    "animationType": {
      "defaultValue": null,
      "description": "The `animationType` prop controls how the modal animates.\n\n- `slide` slides in from the bottom\n- `fade` fades into view\n- `none` appears without an animation",
      "name": "animationType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"slide\" | \"fade\""
      },
      "tags": {}
    },
    "transparent": {
      "defaultValue": null,
      "description": "The `transparent` prop determines whether your modal will fill the entire view.\nSetting this to `true` will render the modal over a transparent background.",
      "name": "transparent",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onRequestClose": {
      "defaultValue": null,
      "description": "The `onRequestClose` prop allows passing a function that will be called once the modal has been dismissed.\n_On the Android platform, this is a required function._",
      "name": "onRequestClose",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onShow": {
      "defaultValue": null,
      "description": "The `onShow` prop allows passing a function that will be called once the modal has been shown.",
      "name": "onShow",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<any>) => void"
      },
      "tags": {}
    },
    "presentationStyle": {
      "defaultValue": null,
      "description": "The `presentationStyle` determines the style of modal to show",
      "name": "presentationStyle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "\"fullScreen\" | \"pageSheet\" | \"formSheet\" | \"overFullScreen\""
      },
      "tags": {}
    },
    "supportedOrientations": {
      "defaultValue": null,
      "description": "The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.\nOn iOS, the modal is still restricted by what's specified in your app's Info.plist's UISupportedInterfaceOrientations field.",
      "name": "supportedOrientations",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "(\"portrait\" | \"portrait-upside-down\" | \"landscape\" | \"landscape-left\" | \"landscape-right\")[]"
      },
      "tags": {}
    },
    "onDismiss": {
      "defaultValue": null,
      "description": "The `onDismiss` prop allows passing a function that will be called once the modal has been dismissed.",
      "name": "onDismiss",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onOrientationChange": {
      "defaultValue": null,
      "description": "The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed.\nThe orientation provided is only 'portrait' or 'landscape'. This callback is also called on initial render, regardless of the current orientation.",
      "name": "onOrientationChange",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<any>) => void"
      },
      "tags": {}
    },
    "hardwareAccelerated": {
      "defaultValue": null,
      "description": "Controls whether to force hardware acceleration for the underlying window.",
      "name": "hardwareAccelerated",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "statusBarTranslucent": {
      "defaultValue": null,
      "description": "Determines whether your modal should go under the system statusbar.",
      "name": "statusBarTranslucent",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ModalComponent": {
      "defaultValue": null,
      "description": "Override React Native `Modal` component (usable for web-platform).",
      "name": "ModalComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
        "name": "OverlayProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
          "name": "OverlayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "typeof Component"
      },
      "tags": {}
    }
  },
  "Divider": {
    "color": {
      "defaultValue": null,
      "description": "The color of the component.",
      "name": "color",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "inset": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Applies inset to the divider.",
      "name": "inset",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "insetType": {
      "defaultValue": {
        "value": "left"
      },
      "description": "Applies inset to a specific direction to the divider.",
      "name": "insetType",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"middle\" | \"left\" | \"right\""
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Applies style to the divider.",
      "name": "style",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "subHeader": {
      "defaultValue": null,
      "description": "Adds subHeader text to the divider.",
      "name": "subHeader",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "subHeaderStyle": {
      "defaultValue": null,
      "description": "Adds style to the subHeader text of the divider",
      "name": "subHeaderStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "orientation": {
      "defaultValue": {
        "value": "horizontal"
      },
      "description": "Apply orientation to the divider.",
      "name": "orientation",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"vertical\" | \"horizontal\""
      },
      "tags": {}
    },
    "width": {
      "defaultValue": null,
      "description": "Apply width to the divider.",
      "name": "width",
      "parent": {
        "fileName": "rne/packages/base/src/Divider/Divider.tsx",
        "name": "DividerProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Divider/Divider.tsx",
          "name": "DividerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    }
  },
  "FAB": {
    "color": {
      "defaultValue": null,
      "description": "Change the color of the FAB.",
      "name": "color",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "size": {
      "defaultValue": {
        "value": "large"
      },
      "description": "Change Size of FAB.",
      "name": "size",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"small\" | \"large\""
      },
      "tags": {}
    },
    "placement": {
      "defaultValue": null,
      "description": "FAB placement at bottom, (optional) use [`style`](#style) in case of custom placement.",
      "name": "placement",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\""
      },
      "tags": {}
    },
    "visible": {
      "defaultValue": {
        "value": "true"
      },
      "description": "Decide the visibility of the FAB.",
      "name": "visible",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "upperCase": {
      "defaultValue": null,
      "description": "Transform Extended Label text to uppercase.",
      "name": "upperCase",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Style for FAB",
      "name": "style",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "type": {
      "defaultValue": null,
      "description": "Type of button.",
      "name": "type",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"solid\" | \"clear\" | \"outline\""
      },
      "tags": {}
    },
    "raised": {
      "defaultValue": null,
      "description": "Add raised button styling (optional). Has no effect if `type=\"clear\"`.",
      "name": "raised",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for Component container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disables user interaction.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style of the button when disabled.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when the touch is released,\nbut not if cancelled (e.g. by a scroll that steals the responder lock).",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n{nativeEvent: {layout: {x, y, width, height}}}",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Determines what the opacity of the wrapped view should be when touch is active.\nDefaults to 0.2",
      "name": "activeOpacity",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Delay in ms, from onPressIn, before onLongPress is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressIn": {
      "defaultValue": null,
      "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
      "name": "delayPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressOut": {
      "defaultValue": null,
      "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
      "name": "delayPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far your touch can start away from the button.\nThis is added to pressRetentionOffset when moving off of the button.\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch hits\ntwo overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"blur\" occurs, meaning the element lost focus.\nSome platforms may not have the concept of blur.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "onFocus": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"focus\" occurs. Some platforms may not have\nthe concept of focus.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "When the scroll view is disabled, this defines how far your\ntouch may move off of the button, before deactivating the button.\nOnce deactivated, try moving it back and you'll see that the button\nis once again reactivated! Move it back and forth several times\nwhile the scroll view is disabled. Ensure you pass in a constant\nto reduce memory allocations.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "touchSoundDisabled": {
      "defaultValue": null,
      "description": "If true, doesn't play a system sound on touch.",
      "name": "touchSoundDisabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "android"
      }
    },
    "background": {
      "defaultValue": null,
      "description": "Determines the type of background drawable that's going to be used to display feedback.\nIt takes an object with type property and extra data depending on the type.\nIt's recommended to use one of the following static methods to generate that dictionary:\n     1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n        default background for selectable elements (?android:attr/selectableItemBackground)\n     2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n        theme's default background for borderless selectable elements\n        (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n        with specified color (as a string). If property borderless evaluates to true the ripple will render\n        outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n        type is available on Android API level 21+",
      "name": "background",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "BackgroundPropType"
      },
      "tags": {}
    },
    "useForeground": {
      "defaultValue": null,
      "description": "",
      "name": "useForeground",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* TV preferred focus (see documentation for the View component).",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "nextFocusDown": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates down. See the Android documentation.",
      "name": "nextFocusDown",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusForward": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates forward. See the Android documentation.",
      "name": "nextFocusForward",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusLeft": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates left. See the Android documentation.",
      "name": "nextFocusLeft",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusRight": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates right. See the Android documentation.",
      "name": "nextFocusRight",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusUp": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates up. See the Android documentation.",
      "name": "nextFocusUp",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n\nenabled: If true, parallax effects are enabled.  Defaults to true.\nshiftDistanceX: Defaults to 2.0.\nshiftDistanceY: Defaults to 2.0.\ntiltAngle: Defaults to 0.05.\nmagnification: Defaults to 1.0.\npressMagnification: Defaults to 1.0.\npressDuration: Defaults to 0.3.\npressDelay: Defaults to 0.0.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "android"
      }
    },
    "title": {
      "defaultValue": null,
      "description": "Add button title.",
      "name": "title",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ReactElement<{}, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Add additional styling for title component.",
      "name": "titleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "icon": {
      "defaultValue": null,
      "description": "Displays a centered icon (when no title) or to the left (with text). (can be used along with iconRight as well). Can be an object or a custom component.",
      "name": "icon",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "titleProps": {
      "defaultValue": null,
      "description": "Add additional props for Text component.",
      "name": "titleProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      },
      "tags": {}
    },
    "buttonStyle": {
      "defaultValue": null,
      "description": "Add additional styling for button component.",
      "name": "buttonStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "loading": {
      "defaultValue": null,
      "description": "Prop to display a loading spinner.",
      "name": "loading",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "loadingStyle": {
      "defaultValue": null,
      "description": "Add additional styling for loading component.",
      "name": "loadingStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "loadingProps": {
      "defaultValue": null,
      "description": "Add additional props for ActivityIndicator component.",
      "name": "loadingProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ActivityIndicatorProps"
      },
      "tags": {}
    },
    "iconContainerStyle": {
      "defaultValue": null,
      "description": "Styling for Icon Component container.",
      "name": "iconContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "iconRight": {
      "defaultValue": null,
      "description": "Displays Icon to the right of title. Needs to be used along with `icon` prop.",
      "name": "iconRight",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Displays a linear gradient. See [usage](#lineargradient-usage).",
      "name": "linearGradientProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      },
      "tags": {}
    },
    "TouchableComponent": {
      "defaultValue": null,
      "description": "Component for user interaction.",
      "name": "TouchableComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "typeof Component"
      },
      "tags": {}
    },
    "ViewComponent": {
      "defaultValue": null,
      "description": "Component for container.",
      "name": "ViewComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "disabledTitleStyle": {
      "defaultValue": null,
      "description": "Style of the title when disabled.",
      "name": "disabledTitleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "iconPosition": {
      "defaultValue": null,
      "description": "Displays Icon to the position mentioned. Needs to be used along with `icon` prop.",
      "name": "iconPosition",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\" | \"top\" | \"bottom\""
      },
      "tags": {}
    },
    "uppercase": {
      "defaultValue": null,
      "description": "Uppercase button title",
      "name": "uppercase",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "radius": {
      "defaultValue": null,
      "description": "Radius of button",
      "name": "radius",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | sm | md | lg"
      },
      "tags": {
        "type": "number | sm | md | lg"
      }
    }
  },
  "Header": {
    "ViewComponent": {
      "defaultValue": {
        "value": "View"
      },
      "description": "Component for container.",
      "name": "ViewComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {
        "default": "View"
      }
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Displays a linear gradient. See [usage](#lineargradient-usage).",
      "name": "linearGradientProps",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Object"
      },
      "tags": {}
    },
    "statusBarProps": {
      "defaultValue": null,
      "description": "Accepts all props for StatusBar.",
      "name": "statusBarProps",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StatusBarProps"
      },
      "tags": {}
    },
    "barStyle": {
      "defaultValue": null,
      "description": "Sets the color of the status bar text.",
      "name": "barStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StatusBarStyle"
      },
      "tags": {}
    },
    "leftComponent": {
      "defaultValue": null,
      "description": "Define your left component here.",
      "name": "leftComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "HeaderSubComponent"
      },
      "tags": {}
    },
    "centerComponent": {
      "defaultValue": null,
      "description": "Define your center component here.",
      "name": "centerComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "HeaderSubComponent"
      },
      "tags": {}
    },
    "rightComponent": {
      "defaultValue": null,
      "description": "Define your right component here.",
      "name": "rightComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "HeaderSubComponent"
      },
      "tags": {}
    },
    "backgroundColor": {
      "defaultValue": null,
      "description": "Sets backgroundColor of the parent component.",
      "name": "backgroundColor",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "backgroundImage": {
      "defaultValue": null,
      "description": "Sets backgroundImage for parent component.",
      "name": "backgroundImage",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageSourcePropType"
      },
      "tags": {}
    },
    "backgroundImageStyle": {
      "defaultValue": null,
      "description": "Styling for backgroundImage in the main container.",
      "name": "backgroundImageStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageStyle"
      },
      "tags": {}
    },
    "placement": {
      "defaultValue": {
        "value": "center"
      },
      "description": "Alignment for title.",
      "name": "placement",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"center\" | \"left\" | \"right\""
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling around the main container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "centerContainerStyle": {
      "defaultValue": null,
      "description": "Styling for container around the centerComponent.",
      "name": "centerContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "leftContainerStyle": {
      "defaultValue": null,
      "description": "Styling for container around the leftComponent.",
      "name": "leftContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "rightContainerStyle": {
      "defaultValue": null,
      "description": "Styling for container around the rightComponent.",
      "name": "rightContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "children": {
      "defaultValue": {
        "value": "[]"
      },
      "description": "Add children component to the header.",
      "name": "children",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(Element | Element[]) & ReactNode"
      },
      "tags": {}
    },
    "elevated": {
      "defaultValue": null,
      "description": "Elevation for header",
      "name": "elevated",
      "parent": {
        "fileName": "rne/packages/base/src/Header/Header.tsx",
        "name": "HeaderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Header/Header.tsx",
          "name": "HeaderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    }
  },
  "Icon": {
    "type": {
      "defaultValue": {
        "value": "material"
      },
      "description": "Type of icon set. [Supported sets here](#available-icon-sets).",
      "name": "type",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "Component": {
      "defaultValue": {
        "value": "`Press handlers present then Pressable else View`"
      },
      "description": "Update React Native Component.",
      "name": "Component",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {
        "default": "`Press handlers present then Pressable else View`"
      }
    },
    "reverse": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Reverses color scheme.",
      "name": "reverse",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "raised": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Adds box shadow to button.",
      "name": "raised",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Add styling to container holding icon.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "iconProps": {
      "defaultValue": null,
      "description": "Provide all props from react-native Icon component.",
      "name": "iconProps",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconProps"
      },
      "tags": {}
    },
    "reverseColor": {
      "defaultValue": null,
      "description": "Specify reverse icon color.",
      "name": "reverseColor",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Disables onPress events. Only works when `onPress` has a handler.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style for the button when disabled. Only works when `onPress` has a handler.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "solid": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Uses the solid font.",
      "name": "solid",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "brand": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Uses the brands font (FontAwesome5 only).",
      "name": "brand",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      },
      "tags": {
        "default": "None",
        "type": "PressableProps except click handlers"
      }
    },
    "color": {
      "defaultValue": {
        "value": "'white'"
      },
      "description": "Text and icon color\nUse iconStyle or nest a Text component if you need different colors.",
      "name": "color",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | ColorValue"
      },
      "tags": {
        "default": "'white'"
      }
    },
    "borderRadius": {
      "defaultValue": {
        "value": "5"
      },
      "description": "Border radius of the button\nSet to 0 to disable.",
      "name": "borderRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "default": "5"
      }
    },
    "iconStyle": {
      "defaultValue": {
        "value": "{marginRight: 10}"
      },
      "description": "Styles applied to the icon only\nGood for setting margins or a different color.",
      "name": "iconStyle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextStyle"
      },
      "tags": {
        "default": "{marginRight: 10}"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "Style prop inherited from TextProps and TouchableWithoutFeedbackProperties\nOnly exist here so we can have ViewStyle or TextStyle",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ViewStyle | TextStyle"
      },
      "tags": {}
    },
    "backgroundColor": {
      "defaultValue": {
        "value": "'#007AFF'"
      },
      "description": "Background color of the button",
      "name": "backgroundColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | ColorValue"
      },
      "tags": {
        "default": "'#007AFF'"
      }
    },
    "size": {
      "defaultValue": {
        "value": "12"
      },
      "description": "Size of the icon, can also be passed as fontSize in the style object.",
      "name": "size",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "default": "12"
      }
    },
    "name": {
      "defaultValue": null,
      "description": "Name of the icon to show\n\nSee Icon Explorer app\n{@link https://github.com/oblador/react-native-vector-icons/tree/master/Examples/IconExplorer}",
      "name": "name",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconProps"
        }
      ],
      "required": true,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "allowFontScaling": {
      "defaultValue": null,
      "description": "Specifies whether fonts should scale to respect Text Size accessibility settings.\nThe default is `true`.",
      "name": "allowFontScaling",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ellipsizeMode": {
      "defaultValue": null,
      "description": "This can be one of the following values:\n\n- `head` - The line is displayed so that the end fits in the container and the missing text\nat the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n- `middle` - The line is displayed so that the beginning and end fit in the container and the\nmissing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n- `tail` - The line is displayed so that the beginning fits in the container and the\nmissing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n- `clip` - Lines are not drawn past the edge of the text container.\n\nThe default is `tail`.\n\n`numberOfLines` must be set in conjunction with this prop.\n\n> `clip` is working only for iOS",
      "name": "ellipsizeMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "lineBreakMode": {
      "defaultValue": null,
      "description": "Line Break mode. Works only with numberOfLines.\nclip is working only for iOS",
      "name": "lineBreakMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "numberOfLines": {
      "defaultValue": null,
      "description": "Used to truncate the text with an ellipsis after computing the text\nlayout, including line wrapping, such that the total number of lines\ndoes not exceed this number.\n\nThis prop is commonly used with `ellipsizeMode`.",
      "name": "numberOfLines",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "onTextLayout": {
      "defaultValue": null,
      "description": "Invoked on Text layout",
      "name": "onTextLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TextLayoutEventData>) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "maxFontSizeMultiplier": {
      "defaultValue": null,
      "description": "Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n- null/undefined (default): inherit from the parent node or the global default (0)\n- 0: no max, ignore parent/global default\n- >= 1: sets the maxFontSizeMultiplier of this node to this value",
      "name": "maxFontSizeMultiplier",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "adjustsFontSizeToFit": {
      "defaultValue": null,
      "description": "Specifies whether font should be scaled down automatically to fit given style constraints.",
      "name": "adjustsFontSizeToFit",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "minimumFontScale": {
      "defaultValue": null,
      "description": "Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).",
      "name": "minimumFontScale",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "suppressHighlighting": {
      "defaultValue": null,
      "description": "When `true`, no visual change is made when text is pressed down. By\ndefault, a gray oval highlights the text on press down.",
      "name": "suppressHighlighting",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectable": {
      "defaultValue": null,
      "description": "Lets the user select text, to use the native copy and paste functionality.",
      "name": "selectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectionColor": {
      "defaultValue": null,
      "description": "The highlight color of the text.",
      "name": "selectionColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "textBreakStrategy": {
      "defaultValue": null,
      "description": "Set text break strategy on Android API Level 23+\ndefault is `highQuality`.",
      "name": "textBreakStrategy",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"simple\" | \"highQuality\" | \"balanced\""
      },
      "tags": {}
    },
    "dataDetectorType": {
      "defaultValue": null,
      "description": "Determines the types of data converted to clickable URLs in the text element.\nBy default no data types are detected.",
      "name": "dataDetectorType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"link\" | \"phoneNumber\" | \"email\" | \"all\""
      },
      "tags": {}
    },
    "android_hyphenationFrequency": {
      "defaultValue": null,
      "description": "Hyphenation strategy",
      "name": "android_hyphenationFrequency",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"normal\" | \"full\""
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Determines what the opacity of the wrapped view should be when touch is active.",
      "name": "activeOpacity",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onHideUnderlay": {
      "defaultValue": null,
      "description": "\nCalled immediately after the underlay is hidden",
      "name": "onHideUnderlay",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onShowUnderlay": {
      "defaultValue": null,
      "description": "Called immediately after the underlay is shown",
      "name": "onShowUnderlay",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "underlayColor": {
      "defaultValue": {
        "value": "transparent"
      },
      "description": "The color of the underlay that will show through when the touch is active.",
      "name": "underlayColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Delay in ms, from onPressIn, before onLongPress is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressIn": {
      "defaultValue": null,
      "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
      "name": "delayPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressOut": {
      "defaultValue": null,
      "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
      "name": "delayPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far your touch can start away from the button.\nThis is added to pressRetentionOffset when moving off of the button.\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch hits\ntwo overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"blur\" occurs, meaning the element lost focus.\nSome platforms may not have the concept of blur.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "onFocus": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"focus\" occurs. Some platforms may not have\nthe concept of focus.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "When the scroll view is disabled, this defines how far your\ntouch may move off of the button, before deactivating the button.\nOnce deactivated, try moving it back and you'll see that the button\nis once again reactivated! Move it back and forth several times\nwhile the scroll view is disabled. Ensure you pass in a constant\nto reduce memory allocations.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "touchSoundDisabled": {
      "defaultValue": null,
      "description": "If true, doesn't play a system sound on touch.",
      "name": "touchSoundDisabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "android"
      }
    },
    "background": {
      "defaultValue": null,
      "description": "Determines the type of background drawable that's going to be used to display feedback.\nIt takes an object with type property and extra data depending on the type.\nIt's recommended to use one of the following static methods to generate that dictionary:\n     1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n        default background for selectable elements (?android:attr/selectableItemBackground)\n     2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n        theme's default background for borderless selectable elements\n        (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n        with specified color (as a string). If property borderless evaluates to true the ripple will render\n        outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n        type is available on Android API level 21+",
      "name": "background",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "BackgroundPropType"
      },
      "tags": {}
    },
    "useForeground": {
      "defaultValue": null,
      "description": "",
      "name": "useForeground",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* TV preferred focus (see documentation for the View component).",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "nextFocusDown": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates down. See the Android documentation.",
      "name": "nextFocusDown",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusForward": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates forward. See the Android documentation.",
      "name": "nextFocusForward",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusLeft": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates left. See the Android documentation.",
      "name": "nextFocusLeft",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusRight": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates right. See the Android documentation.",
      "name": "nextFocusRight",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusUp": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates up. See the Android documentation.",
      "name": "nextFocusUp",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    }
  },
  "Image": {
    "Component": {
      "defaultValue": {
        "value": "`Press handlers present then Pressable else View`"
      },
      "description": "Define the component passed to image.",
      "name": "Component",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {
        "default": "`Press handlers present then Pressable else View`"
      }
    },
    "ImageComponent": {
      "defaultValue": null,
      "description": "Specify a different component as the Image component.",
      "name": "ImageComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "typeof Component"
      },
      "tags": {}
    },
    "PlaceholderContent": {
      "defaultValue": null,
      "description": "Content to load when Image is rendering.",
      "name": "PlaceholderContent",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactElement<any, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Additional styling for the container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "childrenContainerStyle": {
      "defaultValue": {
        "value": "null"
      },
      "description": "Additional styling for the children container.",
      "name": "childrenContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "placeholderStyle": {
      "defaultValue": null,
      "description": "Additional styling for the placeholder container.",
      "name": "placeholderStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "transition": {
      "defaultValue": null,
      "description": "Perform fade transition on image load.",
      "name": "transition",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "transitionDuration": {
      "defaultValue": {
        "value": "360"
      },
      "description": "Perform fade transition on image load.",
      "name": "transitionDuration",
      "parent": {
        "fileName": "rne/packages/base/src/Image/Image.tsx",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Image/Image.tsx",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "\nStyle",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "onLayout function\n\nInvoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height} }}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "onError": {
      "defaultValue": null,
      "description": "Invoked on load error with {nativeEvent: {error}}",
      "name": "onError",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "(error: NativeSyntheticEvent<ImageErrorEventData>) => void"
      },
      "tags": {}
    },
    "onLoad": {
      "defaultValue": null,
      "description": "Invoked when load completes successfully\n{ source: { uri, height, width } }.",
      "name": "onLoad",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<ImageLoadEventData>) => void"
      },
      "tags": {}
    },
    "onLoadEnd": {
      "defaultValue": null,
      "description": "Invoked when load either succeeds or fails",
      "name": "onLoadEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onLoadStart": {
      "defaultValue": null,
      "description": "Invoked on load start",
      "name": "onLoadStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "progressiveRenderingEnabled": {
      "defaultValue": null,
      "description": "",
      "name": "progressiveRenderingEnabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "borderRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "borderTopLeftRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderTopLeftRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "borderTopRightRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderTopRightRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "borderBottomLeftRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderBottomLeftRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "borderBottomRightRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderBottomRightRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "resizeMode": {
      "defaultValue": null,
      "description": "Determines how to resize the image when the frame doesn't match the raw\nimage dimensions.\n\n'cover': Scale the image uniformly (maintain the image's aspect ratio)\nso that both dimensions (width and height) of the image will be equal\nto or larger than the corresponding dimension of the view (minus padding).\n\n'contain': Scale the image uniformly (maintain the image's aspect ratio)\nso that both dimensions (width and height) of the image will be equal to\nor less than the corresponding dimension of the view (minus padding).\n\n'stretch': Scale width and height independently, This may change the\naspect ratio of the src.\n\n'repeat': Repeat the image to cover the frame of the view.\nThe image will keep it's size and aspect ratio. (iOS only)\n\n'center': Scale the image down so that it is completely visible,\nif bigger than the area of the view.\nThe image will not be scaled up.",
      "name": "resizeMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageResizeMode"
      },
      "tags": {}
    },
    "resizeMethod": {
      "defaultValue": null,
      "description": "The mechanism that should be used to resize the image when the image's dimensions\ndiffer from the image view's dimensions. Defaults to `auto`.\n\n- `auto`: Use heuristics to pick between `resize` and `scale`.\n\n- `resize`: A software operation which changes the encoded image in memory before it\ngets decoded. This should be used instead of `scale` when the image is much larger\nthan the view.\n\n- `scale`: The image gets drawn downscaled or upscaled. Compared to `resize`, `scale` is\nfaster (usually hardware accelerated) and produces higher quality images. This\nshould be used if the image is smaller than the view. It should also be used if the\nimage is slightly bigger than the view.\n\nMore details about `resize` and `scale` can be found at http://frescolib.org/docs/resizing-rotating.html.",
      "name": "resizeMethod",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"resize\" | \"scale\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "source": {
      "defaultValue": null,
      "description": "The image source (either a remote URL or a local file resource).\n\nThis prop can also contain several remote URLs, specified together with their width and height and potentially with scale/other URI arguments.\nThe native side will then choose the best uri to display based on the measured size of the image container.\nA cache property can be added to control how networked request interacts with the local cache.\n\nThe currently supported formats are png, jpg, jpeg, bmp, gif, webp (Android only), psd (iOS only).",
      "name": "source",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": true,
      "type": {
        "name": "ImageSourcePropType"
      },
      "tags": {}
    },
    "loadingIndicatorSource": {
      "defaultValue": null,
      "description": "similarly to `source`, this property represents the resource used to render\nthe loading indicator for the image, displayed until image is ready to be\ndisplayed, typically after when it got downloaded from network.",
      "name": "loadingIndicatorSource",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageURISource"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "A unique identifier for this element to be used in UI Automation testing scripts.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed images from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "defaultSource": {
      "defaultValue": null,
      "description": "A static image to display while downloading the final image off the network.",
      "name": "defaultSource",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number | ImageURISource"
      },
      "tags": {}
    },
    "blurRadius": {
      "defaultValue": null,
      "description": "blurRadius: the blur radius of the blur filter added to the image",
      "name": "blurRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "capInsets": {
      "defaultValue": null,
      "description": "When the image is resized, the corners of the size specified by capInsets will stay a fixed size,\nbut the center content and borders of the image will be stretched.\nThis is useful for creating resizable rounded buttons, shadows, and other resizable assets.\nMore info on Apple documentation",
      "name": "capInsets",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onProgress": {
      "defaultValue": null,
      "description": "Invoked on download progress with {nativeEvent: {loaded, total}}",
      "name": "onProgress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<ImageProgressEventDataIOS>) => void"
      },
      "tags": {}
    },
    "onPartialLoad": {
      "defaultValue": null,
      "description": "Invoked when a partial load of the image is complete. The definition of\nwhat constitutes a \"partial load\" is loader specific though this is meant\nfor progressive JPEG loads.",
      "name": "onPartialLoad",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "fadeDuration": {
      "defaultValue": null,
      "description": "Duration of fade in animation in ms. Defaults to 300",
      "name": "fadeDuration",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "width": {
      "defaultValue": null,
      "description": "Required if loading images via 'uri' from drawable folder on Android.\nExplanation: https://medium.com/@adamjacobb/react-native-performance-images-adf5843e120",
      "name": "width",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "height": {
      "defaultValue": null,
      "description": "Required if loading images via 'uri' from drawable folder on Android\nExplanation: https://medium.com/@adamjacobb/react-native-performance-images-adf5843e120",
      "name": "height",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      },
      "tags": {
        "default": "None",
        "type": "PressableProps except click handlers"
      }
    }
  },
  "Input": {
    "shake": {
      "defaultValue": null,
      "description": "Shake method",
      "name": "shake",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Style for container",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "disables the input component",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabledInputStyle": {
      "defaultValue": null,
      "description": "disabled styles that will be passed to the style props of the React Native TextInput",
      "name": "disabledInputStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "inputContainerStyle": {
      "defaultValue": null,
      "description": "styling for Input Component Container",
      "name": "inputContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "leftIcon": {
      "defaultValue": null,
      "description": "displays an icon on the left",
      "name": "leftIcon",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "leftIconContainerStyle": {
      "defaultValue": null,
      "description": "styling for left Icon Component container",
      "name": "leftIconContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "rightIcon": {
      "defaultValue": null,
      "description": "displays an icon on the right",
      "name": "rightIcon",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "rightIconContainerStyle": {
      "defaultValue": null,
      "description": "styling for right Icon Component container",
      "name": "rightIconContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "inputStyle": {
      "defaultValue": null,
      "description": "Style for Input Component",
      "name": "inputStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "InputComponent": {
      "defaultValue": null,
      "description": "component that will be rendered in place of the React Native TextInput",
      "name": "InputComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {
        "type": "React Component"
      }
    },
    "errorProps": {
      "defaultValue": null,
      "description": "props to be passed to the React Native Text component used to display the error message",
      "name": "errorProps",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      },
      "tags": {}
    },
    "errorStyle": {
      "defaultValue": null,
      "description": "add styling to error message",
      "name": "errorStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "errorMessage": {
      "defaultValue": null,
      "description": "Error message to be displayed under the input field",
      "name": "errorMessage",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "label": {
      "defaultValue": null,
      "description": "add a label on top of the input",
      "name": "label",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode"
      },
      "tags": {}
    },
    "labelStyle": {
      "defaultValue": null,
      "description": "styling for the label; You can only use this if label is a string",
      "name": "labelStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "labelProps": {
      "defaultValue": null,
      "description": "props to be passed to the React Native Text component used to display the label or React Component used instead of simple string in label prop",
      "name": "labelProps",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      },
      "tags": {}
    },
    "renderErrorMessage": {
      "defaultValue": null,
      "description": "If the error message container should be rendered (take up vertical space). If false, when showing errorMessage, the layout will shift to add it at that time.",
      "name": "renderErrorMessage",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "allowFontScaling": {
      "defaultValue": null,
      "description": "Specifies whether fonts should scale to respect Text Size accessibility settings.\nThe default is `true`.",
      "name": "allowFontScaling",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "autoCapitalize": {
      "defaultValue": null,
      "description": "Can tell TextInput to automatically capitalize certain characters.\n     characters: all characters,\n     words: first letter of each word\n     sentences: first letter of each sentence (default)\n     none: don't auto capitalize anything\n\nhttps://reactnative.dev/docs/textinput#autocapitalize",
      "name": "autoCapitalize",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"sentences\" | \"words\" | \"characters\""
      },
      "tags": {}
    },
    "autoCorrect": {
      "defaultValue": null,
      "description": "If false, disables auto-correct.\nThe default value is true.",
      "name": "autoCorrect",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "autoFocus": {
      "defaultValue": null,
      "description": "If true, focuses the input on componentDidMount.\nThe default value is false.",
      "name": "autoFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "blurOnSubmit": {
      "defaultValue": null,
      "description": "If true, the text field will blur when submitted.\nThe default value is true.",
      "name": "blurOnSubmit",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "caretHidden": {
      "defaultValue": null,
      "description": "If true, caret is hidden. The default value is false.",
      "name": "caretHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "contextMenuHidden": {
      "defaultValue": null,
      "description": "If true, context menu is hidden. The default value is false.",
      "name": "contextMenuHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "defaultValue": {
      "defaultValue": null,
      "description": "Provides an initial value that will change when the user starts typing.\nUseful for simple use-cases where you don't want to deal with listening to events\nand updating the value prop to keep the controlled state in sync.",
      "name": "defaultValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "editable": {
      "defaultValue": null,
      "description": "If false, text is not editable. The default value is true.",
      "name": "editable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "keyboardType": {
      "defaultValue": null,
      "description": "enum(\"default\", 'numeric', 'email-address', \"ascii-capable\", 'numbers-and-punctuation', 'url', 'number-pad', 'phone-pad', 'name-phone-pad',\n'decimal-pad', 'twitter', 'web-search', 'visible-password')\nDetermines which keyboard to open, e.g.numeric.\nThe following values work across platforms: - default - numeric - email-address - phone-pad\nThe following values work on iOS: - ascii-capable - numbers-and-punctuation - url - number-pad - name-phone-pad - decimal-pad - twitter - web-search\nThe following values work on Android: - visible-password",
      "name": "keyboardType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "KeyboardTypeOptions"
      },
      "tags": {}
    },
    "maxLength": {
      "defaultValue": null,
      "description": "Limits the maximum number of characters that can be entered.\nUse this instead of implementing the logic in JS to avoid flicker.",
      "name": "maxLength",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "multiline": {
      "defaultValue": null,
      "description": "If true, the text input can be multiple lines. The default value is false.",
      "name": "multiline",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "Callback that is called when the text input is blurred",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputFocusEventData>) => void"
      },
      "tags": {}
    },
    "onChange": {
      "defaultValue": null,
      "description": "Callback that is called when the text input's text changes.",
      "name": "onChange",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputChangeEventData>) => void"
      },
      "tags": {}
    },
    "onChangeText": {
      "defaultValue": null,
      "description": "Callback that is called when the text input's text changes.\nChanged text is passed as an argument to the callback handler.",
      "name": "onChangeText",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(text: string) => void"
      },
      "tags": {}
    },
    "onContentSizeChange": {
      "defaultValue": null,
      "description": "Callback that is called when the text input's content size changes.\nThis will be called with\n`{ nativeEvent: { contentSize: { width, height } } }`.\n\nOnly called for multiline text inputs.",
      "name": "onContentSizeChange",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputContentSizeChangeEventData>) => void"
      },
      "tags": {}
    },
    "onEndEditing": {
      "defaultValue": null,
      "description": "Callback that is called when text input ends.",
      "name": "onEndEditing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputEndEditingEventData>) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Callback that is called when a touch is engaged.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<NativeTouchEvent>) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Callback that is called when a touch is released.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<NativeTouchEvent>) => void"
      },
      "tags": {}
    },
    "onFocus": {
      "defaultValue": null,
      "description": "Callback that is called when the text input is focused",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputFocusEventData>) => void"
      },
      "tags": {}
    },
    "onSelectionChange": {
      "defaultValue": null,
      "description": "Callback that is called when the text input selection is changed.",
      "name": "onSelectionChange",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputSelectionChangeEventData>) => void"
      },
      "tags": {}
    },
    "onSubmitEditing": {
      "defaultValue": null,
      "description": "Callback that is called when the text input's submit button is pressed.",
      "name": "onSubmitEditing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputSubmitEditingEventData>) => void"
      },
      "tags": {}
    },
    "onTextInput": {
      "defaultValue": null,
      "description": "Callback that is called on new text input with the argument\n `{ nativeEvent: { text, previousText, range: { start, end } } }`.\n\nThis prop requires multiline={true} to be set.",
      "name": "onTextInput",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputTextInputEventData>) => void"
      },
      "tags": {}
    },
    "onScroll": {
      "defaultValue": null,
      "description": "Invoked on content scroll with\n `{ nativeEvent: { contentOffset: { x, y } } }`.\n\nMay also contain other properties from ScrollEvent but on Android contentSize is not provided for performance reasons.",
      "name": "onScroll",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputScrollEventData>) => void"
      },
      "tags": {}
    },
    "onKeyPress": {
      "defaultValue": null,
      "description": "Callback that is called when a key is pressed.\nThis will be called with\n `{ nativeEvent: { key: keyValue } }`\nwhere keyValue is 'Enter' or 'Backspace' for respective keys and the typed-in character otherwise including ' ' for space.\n\nFires before onChange callbacks.\nNote: on Android only the inputs from soft keyboard are handled, not the hardware keyboard inputs.",
      "name": "onKeyPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputKeyPressEventData>) => void"
      },
      "tags": {}
    },
    "placeholder": {
      "defaultValue": null,
      "description": "The string that will be rendered before text input has been entered",
      "name": "placeholder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "placeholderTextColor": {
      "defaultValue": null,
      "description": "The text color of the placeholder string",
      "name": "placeholderTextColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "returnKeyType": {
      "defaultValue": null,
      "description": "enum('default', 'go', 'google', 'join', 'next', 'route', 'search', 'send', 'yahoo', 'done', 'emergency-call')\nDetermines how the return key should look.",
      "name": "returnKeyType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReturnKeyTypeOptions"
      },
      "tags": {}
    },
    "secureTextEntry": {
      "defaultValue": null,
      "description": "If true, the text input obscures the text entered so that sensitive text like passwords stay secure.\nThe default value is false.",
      "name": "secureTextEntry",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectTextOnFocus": {
      "defaultValue": null,
      "description": "If true, all text will automatically be selected on focus",
      "name": "selectTextOnFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selection": {
      "defaultValue": null,
      "description": "The start and end of the text input's selection. Set start and end to\nthe same value to position the cursor.",
      "name": "selection",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "{ start: number; end?: number; }"
      },
      "tags": {}
    },
    "selectionColor": {
      "defaultValue": null,
      "description": "The highlight (and cursor on ios) color of the text input",
      "name": "selectionColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Styles",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "textAlign": {
      "defaultValue": null,
      "description": "Align the input text to the left, center, or right sides of the input field.",
      "name": "textAlign",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"center\" | \"left\" | \"right\""
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "inputAccessoryViewID": {
      "defaultValue": null,
      "description": "Used to connect to an InputAccessoryView. Not part of react-natives documentation, but present in examples and\ncode.\nSee https://reactnative.dev/docs/inputaccessoryview for more information.",
      "name": "inputAccessoryViewID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "value": {
      "defaultValue": null,
      "description": "The value to show for the text input. TextInput is a controlled component,\nwhich means the native value will be forced to match this value prop if provided.\nFor most uses this works great, but in some cases this may cause flickering - one common cause is preventing edits by keeping value the same.\nIn addition to simply setting the same value, either set editable={false},\nor set/update maxLength to prevent unwanted edits without flicker.",
      "name": "value",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "maxFontSizeMultiplier": {
      "defaultValue": null,
      "description": "Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n- null/undefined (default): inherit from the parent node or the global default (0)\n- 0: no max, ignore parent/global default\n- >= 1: sets the maxFontSizeMultiplier of this node to this value",
      "name": "maxFontSizeMultiplier",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "clearButtonMode": {
      "defaultValue": null,
      "description": "enum('never', 'while-editing', 'unless-editing', 'always')\nWhen the clear button should appear on the right side of the text view",
      "name": "clearButtonMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"never\" | \"while-editing\" | \"unless-editing\" | \"always\""
      },
      "tags": {}
    },
    "clearTextOnFocus": {
      "defaultValue": null,
      "description": "If true, clears the text field automatically when editing begins",
      "name": "clearTextOnFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "dataDetectorTypes": {
      "defaultValue": null,
      "description": "Determines the types of data converted to clickable URLs in the text input.\nOnly valid if `multiline={true}` and `editable={false}`.\nBy default no data types are detected.\n\nYou can provide one type or an array of many types.\n\nPossible values for `dataDetectorTypes` are:\n\n- `'phoneNumber'`\n- `'link'`\n- `'address'`\n- `'calendarEvent'`\n- `'none'`\n- `'all'`",
      "name": "dataDetectorTypes",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "DataDetectorTypes | DataDetectorTypes[]"
      },
      "tags": {}
    },
    "enablesReturnKeyAutomatically": {
      "defaultValue": null,
      "description": "If true, the keyboard disables the return key when there is no text and automatically enables it when there is text.\nThe default value is false.",
      "name": "enablesReturnKeyAutomatically",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "keyboardAppearance": {
      "defaultValue": null,
      "description": "Determines the color of the keyboard.",
      "name": "keyboardAppearance",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"default\" | \"light\" | \"dark\""
      },
      "tags": {}
    },
    "passwordRules": {
      "defaultValue": null,
      "description": "Provide rules for your password.\nFor example, say you want to require a password with at least eight characters consisting of a mix of uppercase and lowercase letters, at least one number, and at most two consecutive characters.\n\"required: upper; required: lower; required: digit; max-consecutive: 2; minlength: 8;\"",
      "name": "passwordRules",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "rejectResponderTermination": {
      "defaultValue": null,
      "description": "If `true`, allows TextInput to pass touch events to the parent component.\nThis allows components to be swipeable from the TextInput on iOS,\nas is the case on Android by default.\nIf `false`, TextInput always asks to handle the input (except when disabled).",
      "name": "rejectResponderTermination",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectionState": {
      "defaultValue": null,
      "description": "See DocumentSelectionState.js, some state that is responsible for maintaining selection information for a document",
      "name": "selectionState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "DocumentSelectionState"
      },
      "tags": {}
    },
    "spellCheck": {
      "defaultValue": null,
      "description": "If false, disables spell-check style (i.e. red underlines). The default value is inherited from autoCorrect",
      "name": "spellCheck",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "textContentType": {
      "defaultValue": null,
      "description": "Give the keyboard and the system information about the expected\nsemantic meaning for the content that users enter.\n\nFor iOS 11+ you can set `textContentType` to `username` or `password` to\nenable autofill of login details from the device keychain.\n\nFor iOS 12+ `newPassword` can be used to indicate a new password input the\nuser may want to save in the keychain, and `oneTimeCode` can be used to indicate\nthat a field can be autofilled by a code arriving in an SMS.\n\nTo disable autofill, set textContentType to `none`.\n\nPossible values for `textContentType` are:\n\n - `'none'`\n - `'URL'`\n - `'addressCity'`\n - `'addressCityAndState'`\n - `'addressState'`\n - `'countryName'`\n - `'creditCardNumber'`\n - `'emailAddress'`\n - `'familyName'`\n - `'fullStreetAddress'`\n - `'givenName'`\n - `'jobTitle'`\n - `'location'`\n - `'middleName'`\n - `'name'`\n - `'namePrefix'`\n - `'nameSuffix'`\n - `'nickname'`\n - `'organizationName'`\n - `'postalCode'`\n - `'streetAddressLine1'`\n - `'streetAddressLine2'`\n - `'sublocality'`\n - `'telephoneNumber'`\n - `'username'`\n - `'password'`\n - `'newPassword'`\n - `'oneTimeCode'`",
      "name": "textContentType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"name\" | \"none\" | \"URL\" | \"addressCity\" | \"addressCityAndState\" | \"addressState\" | \"countryName\" | \"creditCardNumber\" | \"emailAddress\" | \"familyName\" | \"fullStreetAddress\" | ... 16 more ... | \"oneTimeCode\""
      },
      "tags": {}
    },
    "scrollEnabled": {
      "defaultValue": null,
      "description": "If false, scrolling of the text view will be disabled. The default value is true. Only works with multiline={true}",
      "name": "scrollEnabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "autoComplete": {
      "defaultValue": null,
      "description": "Specifies autocomplete hints for the system, so it can provide autofill. On Android, the system will always attempt to offer autofill by using heuristics to identify the type of content.\nTo disable autocomplete, set `autoComplete` to `off`.\n\n*Android Only*\n\nPossible values for `autoComplete` are:\n\n- `birthdate-day`\n- `birthdate-full`\n- `birthdate-month`\n- `birthdate-year`\n- `cc-csc`\n- `cc-exp`\n- `cc-exp-day`\n- `cc-exp-month`\n- `cc-exp-year`\n- `cc-number`\n- `email`\n- `gender`\n- `name`\n- `name-family`\n- `name-given`\n- `name-middle`\n- `name-middle-initial`\n- `name-prefix`\n- `name-suffix`\n- `password`\n- `password-new`\n- `postal-address`\n- `postal-address-country`\n- `postal-address-extended`\n- `postal-address-extended-postal-code`\n- `postal-address-locality`\n- `postal-address-region`\n- `postal-code`\n- `street-address`\n- `sms-otp`\n- `tel`\n- `tel-country-code`\n- `tel-national`\n- `tel-device`\n- `username`\n- `username-new`\n- `off`",
      "name": "autoComplete",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"name\" | \"email\" | \"username\" | \"password\" | \"birthdate-day\" | \"birthdate-full\" | \"birthdate-month\" | \"birthdate-year\" | \"cc-csc\" | \"cc-exp\" | \"cc-exp-day\" | \"cc-exp-month\" | ... 24 more ... | \"off\""
      },
      "tags": {}
    },
    "importantForAutofill": {
      "defaultValue": null,
      "description": "Determines whether the individual fields in your app should be included in a\nview structure for autofill purposes on Android API Level 26+. Defaults to auto.\nTo disable auto complete, use `off`.\n\n*Android Only*\n\nThe following values work on Android only:\n\n- `auto` - let Android decide\n- `no` - not important for autofill\n- `noExcludeDescendants` - this view and its children aren't important for autofill\n- `yes` - is important for autofill\n- `yesExcludeDescendants` - this view is important for autofill but its children aren't",
      "name": "importantForAutofill",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"noExcludeDescendants\" | \"yesExcludeDescendants\""
      },
      "tags": {}
    },
    "disableFullscreenUI": {
      "defaultValue": null,
      "description": "When false, if there is a small amount of space available around a text input (e.g. landscape orientation on a phone),\n  the OS may choose to have the user edit the text inside of a full screen text input mode.\nWhen true, this feature is disabled and users will always edit the text directly inside of the text input.\nDefaults to false.",
      "name": "disableFullscreenUI",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "inlineImageLeft": {
      "defaultValue": null,
      "description": "If defined, the provided image resource will be rendered on the left.",
      "name": "inlineImageLeft",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "inlineImagePadding": {
      "defaultValue": null,
      "description": "Padding between the inline image, if any, and the text input itself.",
      "name": "inlineImagePadding",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "numberOfLines": {
      "defaultValue": null,
      "description": "Sets the number of lines for a TextInput.\nUse it with multiline set to true to be able to fill the lines.",
      "name": "numberOfLines",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "returnKeyLabel": {
      "defaultValue": null,
      "description": "Sets the return key to the label. Use it instead of `returnKeyType`.",
      "name": "returnKeyLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {
        "platform": "android"
      }
    },
    "textBreakStrategy": {
      "defaultValue": null,
      "description": "Set text break strategy on Android API Level 23+, possible values are simple, highQuality, balanced\nThe default value is simple.",
      "name": "textBreakStrategy",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"simple\" | \"highQuality\" | \"balanced\""
      },
      "tags": {}
    },
    "underlineColorAndroid": {
      "defaultValue": null,
      "description": "The color of the textInput underline.",
      "name": "underlineColorAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "textAlignVertical": {
      "defaultValue": null,
      "description": "Vertically align text when `multiline` is set to true",
      "name": "textAlignVertical",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"center\" | \"top\" | \"bottom\""
      },
      "tags": {}
    },
    "showSoftInputOnFocus": {
      "defaultValue": null,
      "description": "When false, it will prevent the soft keyboard from showing when the field is focused. The default value is true",
      "name": "showSoftInputOnFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ref": {
      "defaultValue": null,
      "description": "",
      "name": "ref",
      "parent": {
        "fileName": "rne/node_modules/@types/react/index.d.ts",
        "name": "RefAttributes"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Ref<TextInput>"
      },
      "tags": {}
    },
    "key": {
      "defaultValue": null,
      "description": "",
      "name": "key",
      "parent": {
        "fileName": "rne/node_modules/@types/react/index.d.ts",
        "name": "Attributes"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Key"
      },
      "tags": {}
    }
  },
  "LinearProgress": {
    "value": {
      "defaultValue": null,
      "description": "The value of the progress indicator for the determinate variant. Value between 0 and 1.",
      "name": "value",
      "parent": {
        "fileName": "rne/packages/base/src/LinearProgress/LinearProgress.tsx",
        "name": "LinearProgressProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/LinearProgress/LinearProgress.tsx",
          "name": "LinearProgressProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "variant": {
      "defaultValue": {
        "value": "value === undefined ? 'indeterminate' : 'determinate'"
      },
      "description": "Type of button.",
      "name": "variant",
      "parent": {
        "fileName": "rne/packages/base/src/LinearProgress/LinearProgress.tsx",
        "name": "LinearProgressProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/LinearProgress/LinearProgress.tsx",
          "name": "LinearProgressProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"determinate\" | \"indeterminate\""
      },
      "tags": {}
    },
    "color": {
      "defaultValue": {
        "value": "secondary"
      },
      "description": "Color for linear progress.",
      "name": "color",
      "parent": {
        "fileName": "rne/packages/base/src/LinearProgress/LinearProgress.tsx",
        "name": "LinearProgressProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/LinearProgress/LinearProgress.tsx",
          "name": "LinearProgressProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "trackColor": {
      "defaultValue": null,
      "description": "Track color for linear progress.",
      "name": "trackColor",
      "parent": {
        "fileName": "rne/packages/base/src/LinearProgress/LinearProgress.tsx",
        "name": "LinearProgressProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/LinearProgress/LinearProgress.tsx",
          "name": "LinearProgressProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Add additional styling for linear progress component.",
      "name": "style",
      "parent": {
        "fileName": "rne/packages/base/src/LinearProgress/LinearProgress.tsx",
        "name": "LinearProgressProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/LinearProgress/LinearProgress.tsx",
          "name": "LinearProgressProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "animation": {
      "defaultValue": {
        "value": "{ duration: 2000 }"
      },
      "description": "Animation duration",
      "name": "animation",
      "parent": {
        "fileName": "rne/packages/base/src/LinearProgress/LinearProgress.tsx",
        "name": "LinearProgressProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/LinearProgress/LinearProgress.tsx",
          "name": "LinearProgressProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean | { duration?: number; }"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    }
  },
  "ListItem.Accordion": {
    "isExpanded": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Decide if Accordion is Expanded.",
      "name": "isExpanded",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
        "name": "ListItemAccordionProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
          "name": "ListItemAccordionProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "icon": {
      "defaultValue": {
        "value": "<Icon name={'chevron-down'} type=\"material-community\" />"
      },
      "description": "Icon for unexpanded Accordion.",
      "name": "icon",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
        "name": "ListItemAccordionProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
          "name": "ListItemAccordionProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "expandIcon": {
      "defaultValue": null,
      "description": "Icon when Accordion is expanded, if not provided `icon` will be rotated 180deg.",
      "name": "expandIcon",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
        "name": "ListItemAccordionProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
          "name": "ListItemAccordionProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "content": {
      "defaultValue": null,
      "description": "Similar to ListItem's child.",
      "name": "content",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
        "name": "ListItemAccordionProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
          "name": "ListItemAccordionProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode"
      },
      "tags": {}
    },
    "noRotation": {
      "defaultValue": null,
      "description": "Don't rotate when Accordion is expanded.",
      "name": "noRotation",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
        "name": "ListItemAccordionProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
          "name": "ListItemAccordionProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "leftRotate": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Rotate Icon left side",
      "name": "leftRotate",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
        "name": "ListItemAccordionProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
          "name": "ListItemAccordionProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "noIcon": {
      "defaultValue": null,
      "description": "Don't show accordion icon.",
      "name": "noIcon",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
        "name": "ListItemAccordionProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
          "name": "ListItemAccordionProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "animation": {
      "defaultValue": {
        "value": "Object with duration 350ms and type timing"
      },
      "description": "Decide whether to show animation.",
      "name": "animation",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
        "name": "ListItemAccordionProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Accordion.tsx",
          "name": "ListItemAccordionProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Animated.TimingAnimationConfig"
      },
      "tags": {
        "default": "Object with duration 350ms and type timing",
        "type": "Animated.TimingAnimationConfig"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Additional main container styling.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Specific styling to be used when list item is disabled.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "topDivider": {
      "defaultValue": null,
      "description": "Add divider at the top of the list item.",
      "name": "topDivider",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "bottomDivider": {
      "defaultValue": null,
      "description": "Add divider at the bottom of the list item.",
      "name": "bottomDivider",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "pad": {
      "defaultValue": null,
      "description": "Adds spacing between the leftComponent, the title component & right component.",
      "name": "pad",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "Component": {
      "defaultValue": null,
      "description": "Replace element with custom element.",
      "name": "Component",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "ViewComponent": {
      "defaultValue": null,
      "description": "Container for linear gradient.",
      "name": "ViewComponent",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Props for linear gradient component.",
      "name": "linearGradientProps",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      },
      "tags": {}
    },
    "children": {
      "defaultValue": null,
      "description": "Add enclosed children.",
      "name": "children",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "Called after the element loses focus.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {
        "platform": "windows"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "Called after the element is focused.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {
        "platform": "windows"
      }
    },
    "cancelable": {
      "defaultValue": null,
      "description": "Whether a press gesture can be interrupted by a parent gesture such as a\nscroll event. Defaults to true.",
      "name": "cancelable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "Whether the press behavior is disabled.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a press is detected.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a touch is considered a\npress before `onPressOut` is triggered.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      },
      "tags": {}
    },
    "android_disableSound": {
      "defaultValue": null,
      "description": "If true, doesn't play system sound on touch.",
      "name": "android_disableSound",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "android_ripple": {
      "defaultValue": null,
      "description": "Enables the Android ripple effect and configures its color.",
      "name": "android_ripple",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableAndroidRippleConfig"
      },
      "tags": {}
    },
    "testOnly_pressed": {
      "defaultValue": null,
      "description": "Used only for documentation or testing (e.g. snapshot testing).",
      "name": "testOnly_pressed",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Either view styles or a function that receives a boolean reflecting whether\nthe component is currently pressed and returns view styles.",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    }
  },
  "ListItem.ButtonGroup": {
    "button": {
      "defaultValue": null,
      "description": "Button for the component.",
      "name": "button",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      },
      "tags": {}
    },
    "Component": {
      "defaultValue": null,
      "description": "Choose other button component such as TouchableOpacity.",
      "name": "Component",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Method to update Button Group Index.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(...args: any[]) => void"
      },
      "tags": {}
    },
    "buttons": {
      "defaultValue": null,
      "description": "Array of buttons for component (required), if returning a component, must be an object with { element: componentName }.",
      "name": "buttons",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(string | ButtonComponent | ButtonObject)[]"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Specify styling for main button container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "textStyle": {
      "defaultValue": null,
      "description": "Specify specific styling for text.",
      "name": "textStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "selectedTextStyle": {
      "defaultValue": null,
      "description": "Specify specific styling for text in the selected state.",
      "name": "selectedTextStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "selectedButtonStyle": {
      "defaultValue": null,
      "description": "Specify styling for selected button.",
      "name": "selectedButtonStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "underlayColor": {
      "defaultValue": null,
      "description": "Specify underlayColor for TouchableHighlight.",
      "name": "underlayColor",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "selectedIndex": {
      "defaultValue": null,
      "description": "Current selected index of array of buttons.",
      "name": "selectedIndex",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "selectedIndexes": {
      "defaultValue": null,
      "description": "Current selected indexes from the array of buttons.",
      "name": "selectedIndexes",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number[]"
      },
      "tags": {}
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Add active opacity to the button in buttonGroup.",
      "name": "activeOpacity",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onHideUnderlay": {
      "defaultValue": null,
      "description": "Function called on hiding underlay.",
      "name": "onHideUnderlay",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onShowUnderlay": {
      "defaultValue": null,
      "description": "Function called on showing underlay.",
      "name": "onShowUnderlay",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "setOpacityTo": {
      "defaultValue": null,
      "description": "Function to set the opacity.",
      "name": "setOpacityTo",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(value: number) => void"
      },
      "tags": {}
    },
    "innerBorderStyle": {
      "defaultValue": null,
      "description": "Update the styling of the interior border of the list of buttons.",
      "name": "innerBorderStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "{ color?: string; width?: number; }"
      },
      "tags": {}
    },
    "buttonStyle": {
      "defaultValue": null,
      "description": "Specify styling for button.",
      "name": "buttonStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "buttonContainerStyle": {
      "defaultValue": null,
      "description": "Specify styling for button containers.",
      "name": "buttonContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "selectMultiple": {
      "defaultValue": null,
      "description": "Allows the user to select multiple buttons.",
      "name": "selectMultiple",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "Controls if buttons are disabled. Setting `true` makes all of them disabled, while using an array only makes those indices disabled.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean | number[]"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Styling for each button when disabled.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabledTextStyle": {
      "defaultValue": null,
      "description": "Styling for the text of each button when disabled.",
      "name": "disabledTextStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "disabledSelectedStyle": {
      "defaultValue": null,
      "description": "Styling for each selected button when disabled.",
      "name": "disabledSelectedStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabledSelectedTextStyle": {
      "defaultValue": null,
      "description": "Styling for the text of each selected button when disabled.",
      "name": "disabledSelectedTextStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "vertical": {
      "defaultValue": null,
      "description": "Display the ButtonGroup vertically.",
      "name": "vertical",
      "parent": {
        "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
        "name": "ButtonGroupProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      },
      "tags": {
        "default": "None",
        "type": "PressableProps except click handlers"
      }
    }
  },
  "ListItem.CheckBox": {
    "Component": {
      "defaultValue": null,
      "description": "Specify React Native component for main button.",
      "name": "Component",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "iconRight": {
      "defaultValue": null,
      "description": "Moves icon to right of text.",
      "name": "iconRight",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "title": {
      "defaultValue": null,
      "description": "Title of checkbox.",
      "name": "title",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ReactElement<{}, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "titleProps": {
      "defaultValue": null,
      "description": "Additional props for the title Text component.",
      "name": "titleProps",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      },
      "tags": {}
    },
    "center": {
      "defaultValue": null,
      "description": "Aligns checkbox to center.",
      "name": "center",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "right": {
      "defaultValue": null,
      "description": "Aligns checkbox to right.",
      "name": "right",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Style of main container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "wrapperStyle": {
      "defaultValue": null,
      "description": "Style for the wrapper of checkbox.",
      "name": "wrapperStyle",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "textStyle": {
      "defaultValue": null,
      "description": "Style of text.",
      "name": "textStyle",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disables user interaction.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style of the checkbox container when disabled.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabledTitleStyle": {
      "defaultValue": null,
      "description": "Style of the title when disabled.",
      "name": "disabledTitleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "checkedTitle": {
      "defaultValue": null,
      "description": "Specify a custom checked message.",
      "name": "checkedTitle",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "fontFamily": {
      "defaultValue": null,
      "description": "Specify different font family.",
      "name": "fontFamily",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
        "name": "CheckBoxProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/CheckBox.tsx",
          "name": "CheckBoxProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "Called after the element loses focus.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {
        "platform": "windows"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "Called after the element is focused.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {
        "platform": "windows"
      }
    },
    "children": {
      "defaultValue": null,
      "description": "Either children or a render prop that receives a boolean reflecting whether\nthe component is currently pressed.",
      "name": "children",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(ReactNode | ((state: PressableStateCallbackType) => ReactNode)) & ReactNode"
      },
      "tags": {}
    },
    "cancelable": {
      "defaultValue": null,
      "description": "Whether a press gesture can be interrupted by a parent gesture such as a\nscroll event. Defaults to true.",
      "name": "cancelable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a press is detected.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a touch is considered a\npress before `onPressOut` is triggered.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      },
      "tags": {}
    },
    "android_disableSound": {
      "defaultValue": null,
      "description": "If true, doesn't play system sound on touch.",
      "name": "android_disableSound",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "android_ripple": {
      "defaultValue": null,
      "description": "Enables the Android ripple effect and configures its color.",
      "name": "android_ripple",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableAndroidRippleConfig"
      },
      "tags": {}
    },
    "testOnly_pressed": {
      "defaultValue": null,
      "description": "Used only for documentation or testing (e.g. snapshot testing).",
      "name": "testOnly_pressed",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Either view styles or a function that receives a boolean reflecting whether\nthe component is currently pressed and returns view styles.",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "checked": {
      "defaultValue": null,
      "description": "Flag for checking the icon.",
      "name": "checked",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": true,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onIconPress": {
      "defaultValue": null,
      "description": "onPress function for checkbox.",
      "name": "onIconPress",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onLongIconPress": {
      "defaultValue": null,
      "description": "onLongPress function for checkbox.",
      "name": "onLongIconPress",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "size": {
      "defaultValue": null,
      "description": "Size of the checkbox.",
      "name": "size",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "checkedIcon": {
      "defaultValue": null,
      "description": "Default checked icon ([Font Awesome Icon](http://fontawesome.io/icons/)).",
      "name": "checkedIcon",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ReactElement<{}, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "uncheckedIcon": {
      "defaultValue": null,
      "description": "Default checked icon ([Font Awesome Icon](http://fontawesome.io/icons/))",
      "name": "uncheckedIcon",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ReactElement<{}, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "iconType": {
      "defaultValue": null,
      "description": "Type of icon set. [Supported sets here](icon#available-icon-sets).",
      "name": "iconType",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "checkedColor": {
      "defaultValue": null,
      "description": "Default checked color.",
      "name": "checkedColor",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "uncheckedColor": {
      "defaultValue": null,
      "description": "Default unchecked color.",
      "name": "uncheckedColor",
      "parent": {
        "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
        "name": "CheckBoxIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "CheckBoxIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    }
  },
  "ListItem.Chevron": {
    "type": {
      "defaultValue": null,
      "description": "Type of icon set. [Supported sets here](#available-icon-sets).",
      "name": "type",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "Component": {
      "defaultValue": {
        "value": "`Press handlers present then Pressable else View`"
      },
      "description": "Update React Native Component.",
      "name": "Component",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {
        "default": "`Press handlers present then Pressable else View`"
      }
    },
    "reverse": {
      "defaultValue": null,
      "description": "Reverses color scheme.",
      "name": "reverse",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "raised": {
      "defaultValue": null,
      "description": "Adds box shadow to button.",
      "name": "raised",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Add styling to container holding icon.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "iconProps": {
      "defaultValue": null,
      "description": "Provide all props from react-native Icon component.",
      "name": "iconProps",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconProps"
      },
      "tags": {}
    },
    "reverseColor": {
      "defaultValue": null,
      "description": "Specify reverse icon color.",
      "name": "reverseColor",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disables onPress events. Only works when `onPress` has a handler.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style for the button when disabled. Only works when `onPress` has a handler.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "solid": {
      "defaultValue": null,
      "description": "Uses the solid font.",
      "name": "solid",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "brand": {
      "defaultValue": null,
      "description": "Uses the brands font (FontAwesome5 only).",
      "name": "brand",
      "parent": {
        "fileName": "rne/packages/base/src/Icon/Icon.tsx",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Icon/Icon.tsx",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      },
      "tags": {
        "default": "None",
        "type": "PressableProps except click handlers"
      }
    },
    "color": {
      "defaultValue": {
        "value": "'white'"
      },
      "description": "Text and icon color\nUse iconStyle or nest a Text component if you need different colors.",
      "name": "color",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | ColorValue"
      },
      "tags": {
        "default": "'white'"
      }
    },
    "borderRadius": {
      "defaultValue": {
        "value": "5"
      },
      "description": "Border radius of the button\nSet to 0 to disable.",
      "name": "borderRadius",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "default": "5"
      }
    },
    "iconStyle": {
      "defaultValue": {
        "value": "{marginRight: 10}"
      },
      "description": "Styles applied to the icon only\nGood for setting margins or a different color.",
      "name": "iconStyle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextStyle"
      },
      "tags": {
        "default": "{marginRight: 10}"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "Style prop inherited from TextProps and TouchableWithoutFeedbackProperties\nOnly exist here so we can have ViewStyle or TextStyle",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ViewStyle | TextStyle"
      },
      "tags": {}
    },
    "backgroundColor": {
      "defaultValue": {
        "value": "'#007AFF'"
      },
      "description": "Background color of the button",
      "name": "backgroundColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | ColorValue"
      },
      "tags": {
        "default": "'#007AFF'"
      }
    },
    "size": {
      "defaultValue": {
        "value": "12"
      },
      "description": "Size of the icon, can also be passed as fontSize in the style object.",
      "name": "size",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "default": "12"
      }
    },
    "name": {
      "defaultValue": null,
      "description": "Name of the icon to show\n\nSee Icon Explorer app\n{@link https://github.com/oblador/react-native-vector-icons/tree/master/Examples/IconExplorer}",
      "name": "name",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "allowFontScaling": {
      "defaultValue": null,
      "description": "Specifies whether fonts should scale to respect Text Size accessibility settings.\nThe default is `true`.",
      "name": "allowFontScaling",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ellipsizeMode": {
      "defaultValue": null,
      "description": "This can be one of the following values:\n\n- `head` - The line is displayed so that the end fits in the container and the missing text\nat the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n- `middle` - The line is displayed so that the beginning and end fit in the container and the\nmissing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n- `tail` - The line is displayed so that the beginning fits in the container and the\nmissing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n- `clip` - Lines are not drawn past the edge of the text container.\n\nThe default is `tail`.\n\n`numberOfLines` must be set in conjunction with this prop.\n\n> `clip` is working only for iOS",
      "name": "ellipsizeMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "lineBreakMode": {
      "defaultValue": null,
      "description": "Line Break mode. Works only with numberOfLines.\nclip is working only for iOS",
      "name": "lineBreakMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "numberOfLines": {
      "defaultValue": null,
      "description": "Used to truncate the text with an ellipsis after computing the text\nlayout, including line wrapping, such that the total number of lines\ndoes not exceed this number.\n\nThis prop is commonly used with `ellipsizeMode`.",
      "name": "numberOfLines",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "onTextLayout": {
      "defaultValue": null,
      "description": "Invoked on Text layout",
      "name": "onTextLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TextLayoutEventData>) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "maxFontSizeMultiplier": {
      "defaultValue": null,
      "description": "Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n- null/undefined (default): inherit from the parent node or the global default (0)\n- 0: no max, ignore parent/global default\n- >= 1: sets the maxFontSizeMultiplier of this node to this value",
      "name": "maxFontSizeMultiplier",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "adjustsFontSizeToFit": {
      "defaultValue": null,
      "description": "Specifies whether font should be scaled down automatically to fit given style constraints.",
      "name": "adjustsFontSizeToFit",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "minimumFontScale": {
      "defaultValue": null,
      "description": "Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).",
      "name": "minimumFontScale",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "suppressHighlighting": {
      "defaultValue": null,
      "description": "When `true`, no visual change is made when text is pressed down. By\ndefault, a gray oval highlights the text on press down.",
      "name": "suppressHighlighting",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectable": {
      "defaultValue": null,
      "description": "Lets the user select text, to use the native copy and paste functionality.",
      "name": "selectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectionColor": {
      "defaultValue": null,
      "description": "The highlight color of the text.",
      "name": "selectionColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "textBreakStrategy": {
      "defaultValue": null,
      "description": "Set text break strategy on Android API Level 23+\ndefault is `highQuality`.",
      "name": "textBreakStrategy",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"simple\" | \"highQuality\" | \"balanced\""
      },
      "tags": {}
    },
    "dataDetectorType": {
      "defaultValue": null,
      "description": "Determines the types of data converted to clickable URLs in the text element.\nBy default no data types are detected.",
      "name": "dataDetectorType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"link\" | \"phoneNumber\" | \"email\" | \"all\""
      },
      "tags": {}
    },
    "android_hyphenationFrequency": {
      "defaultValue": null,
      "description": "Hyphenation strategy",
      "name": "android_hyphenationFrequency",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"normal\" | \"full\""
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Determines what the opacity of the wrapped view should be when touch is active.",
      "name": "activeOpacity",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onHideUnderlay": {
      "defaultValue": null,
      "description": "\nCalled immediately after the underlay is hidden",
      "name": "onHideUnderlay",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onShowUnderlay": {
      "defaultValue": null,
      "description": "Called immediately after the underlay is shown",
      "name": "onShowUnderlay",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "underlayColor": {
      "defaultValue": null,
      "description": "The color of the underlay that will show through when the touch is active.",
      "name": "underlayColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Delay in ms, from onPressIn, before onLongPress is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressIn": {
      "defaultValue": null,
      "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
      "name": "delayPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressOut": {
      "defaultValue": null,
      "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
      "name": "delayPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far your touch can start away from the button.\nThis is added to pressRetentionOffset when moving off of the button.\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch hits\ntwo overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"blur\" occurs, meaning the element lost focus.\nSome platforms may not have the concept of blur.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "onFocus": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"focus\" occurs. Some platforms may not have\nthe concept of focus.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "When the scroll view is disabled, this defines how far your\ntouch may move off of the button, before deactivating the button.\nOnce deactivated, try moving it back and you'll see that the button\nis once again reactivated! Move it back and forth several times\nwhile the scroll view is disabled. Ensure you pass in a constant\nto reduce memory allocations.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "touchSoundDisabled": {
      "defaultValue": null,
      "description": "If true, doesn't play a system sound on touch.",
      "name": "touchSoundDisabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "android"
      }
    },
    "background": {
      "defaultValue": null,
      "description": "Determines the type of background drawable that's going to be used to display feedback.\nIt takes an object with type property and extra data depending on the type.\nIt's recommended to use one of the following static methods to generate that dictionary:\n     1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n        default background for selectable elements (?android:attr/selectableItemBackground)\n     2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n        theme's default background for borderless selectable elements\n        (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n        with specified color (as a string). If property borderless evaluates to true the ripple will render\n        outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n        type is available on Android API level 21+",
      "name": "background",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "BackgroundPropType"
      },
      "tags": {}
    },
    "useForeground": {
      "defaultValue": null,
      "description": "",
      "name": "useForeground",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* TV preferred focus (see documentation for the View component).",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "nextFocusDown": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates down. See the Android documentation.",
      "name": "nextFocusDown",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusForward": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates forward. See the Android documentation.",
      "name": "nextFocusForward",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusLeft": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates left. See the Android documentation.",
      "name": "nextFocusLeft",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusRight": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates right. See the Android documentation.",
      "name": "nextFocusRight",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusUp": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates up. See the Android documentation.",
      "name": "nextFocusUp",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native-vector-icons/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    }
  },
  "ListItem.Content": {
    "right": {
      "defaultValue": null,
      "description": "",
      "name": "right",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Content.tsx",
        "name": "ListItemContentProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Content.tsx",
          "name": "ListItemContentProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Add additional styling for Text.",
      "name": "style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h1": {
      "defaultValue": null,
      "description": "Text with Font size 40.",
      "name": "h1",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h2": {
      "defaultValue": null,
      "description": "Text with Font size 34.",
      "name": "h2",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h3": {
      "defaultValue": null,
      "description": "Text with Font size 28.",
      "name": "h3",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h4": {
      "defaultValue": null,
      "description": "Text with Font size 22.",
      "name": "h4",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h1Style": {
      "defaultValue": null,
      "description": "Styling when h1 is set.",
      "name": "h1Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h2Style": {
      "defaultValue": null,
      "description": "Styling when h2 is set.",
      "name": "h2Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h3Style": {
      "defaultValue": null,
      "description": "Styling when h3 is set.",
      "name": "h3Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h4Style": {
      "defaultValue": null,
      "description": "Styling when h4 is set.",
      "name": "h4Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "allowFontScaling": {
      "defaultValue": null,
      "description": "Specifies whether fonts should scale to respect Text Size accessibility settings.\nThe default is `true`.",
      "name": "allowFontScaling",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ellipsizeMode": {
      "defaultValue": null,
      "description": "This can be one of the following values:\n\n- `head` - The line is displayed so that the end fits in the container and the missing text\nat the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n- `middle` - The line is displayed so that the beginning and end fit in the container and the\nmissing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n- `tail` - The line is displayed so that the beginning fits in the container and the\nmissing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n- `clip` - Lines are not drawn past the edge of the text container.\n\nThe default is `tail`.\n\n`numberOfLines` must be set in conjunction with this prop.\n\n> `clip` is working only for iOS",
      "name": "ellipsizeMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "lineBreakMode": {
      "defaultValue": null,
      "description": "Line Break mode. Works only with numberOfLines.\nclip is working only for iOS",
      "name": "lineBreakMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "numberOfLines": {
      "defaultValue": null,
      "description": "Used to truncate the text with an ellipsis after computing the text\nlayout, including line wrapping, such that the total number of lines\ndoes not exceed this number.\n\nThis prop is commonly used with `ellipsizeMode`.",
      "name": "numberOfLines",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "onTextLayout": {
      "defaultValue": null,
      "description": "Invoked on Text layout",
      "name": "onTextLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TextLayoutEventData>) => void"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "This function is called on press.\nText intrinsically supports press handling with a default highlight state (which can be disabled with suppressHighlighting).",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "This function is called on long press.\ne.g., `onLongPress={this.increaseSize}>``",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "maxFontSizeMultiplier": {
      "defaultValue": null,
      "description": "Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n- null/undefined (default): inherit from the parent node or the global default (0)\n- 0: no max, ignore parent/global default\n- >= 1: sets the maxFontSizeMultiplier of this node to this value",
      "name": "maxFontSizeMultiplier",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "adjustsFontSizeToFit": {
      "defaultValue": null,
      "description": "Specifies whether font should be scaled down automatically to fit given style constraints.",
      "name": "adjustsFontSizeToFit",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "minimumFontScale": {
      "defaultValue": null,
      "description": "Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).",
      "name": "minimumFontScale",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "suppressHighlighting": {
      "defaultValue": null,
      "description": "When `true`, no visual change is made when text is pressed down. By\ndefault, a gray oval highlights the text on press down.",
      "name": "suppressHighlighting",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectable": {
      "defaultValue": null,
      "description": "Lets the user select text, to use the native copy and paste functionality.",
      "name": "selectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectionColor": {
      "defaultValue": null,
      "description": "The highlight color of the text.",
      "name": "selectionColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "textBreakStrategy": {
      "defaultValue": null,
      "description": "Set text break strategy on Android API Level 23+\ndefault is `highQuality`.",
      "name": "textBreakStrategy",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"simple\" | \"highQuality\" | \"balanced\""
      },
      "tags": {}
    },
    "dataDetectorType": {
      "defaultValue": null,
      "description": "Determines the types of data converted to clickable URLs in the text element.\nBy default no data types are detected.",
      "name": "dataDetectorType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"link\" | \"phoneNumber\" | \"email\" | \"all\""
      },
      "tags": {}
    },
    "android_hyphenationFrequency": {
      "defaultValue": null,
      "description": "Hyphenation strategy",
      "name": "android_hyphenationFrequency",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"balanced\" | \"normal\" | \"full\" | \"high\""
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    }
  },
  "ListItem.Input": {
    "containerStyle": {
      "defaultValue": null,
      "description": "Style for container",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "disables the input component",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Callback that is called when a touch is engaged.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<NativeTouchEvent>) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Callback that is called when a touch is released.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<NativeTouchEvent>) => void"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Styles",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "allowFontScaling": {
      "defaultValue": null,
      "description": "Specifies whether fonts should scale to respect Text Size accessibility settings.\nThe default is `true`.",
      "name": "allowFontScaling",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "numberOfLines": {
      "defaultValue": null,
      "description": "Sets the number of lines for a TextInput.\nUse it with multiline set to true to be able to fill the lines.",
      "name": "numberOfLines",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "maxFontSizeMultiplier": {
      "defaultValue": null,
      "description": "Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n- null/undefined (default): inherit from the parent node or the global default (0)\n- 0: no max, ignore parent/global default\n- >= 1: sets the maxFontSizeMultiplier of this node to this value",
      "name": "maxFontSizeMultiplier",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "selectionColor": {
      "defaultValue": null,
      "description": "The highlight (and cursor on ios) color of the text input",
      "name": "selectionColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "textBreakStrategy": {
      "defaultValue": null,
      "description": "Set text break strategy on Android API Level 23+, possible values are simple, highQuality, balanced\nThe default value is simple.",
      "name": "textBreakStrategy",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"simple\" | \"highQuality\" | \"balanced\""
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "Callback that is called when the text input is blurred",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputFocusEventData>) => void"
      },
      "tags": {}
    },
    "onFocus": {
      "defaultValue": null,
      "description": "Callback that is called when the text input is focused",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputFocusEventData>) => void"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "value": {
      "defaultValue": null,
      "description": "The value to show for the text input. TextInput is a controlled component,\nwhich means the native value will be forced to match this value prop if provided.\nFor most uses this works great, but in some cases this may cause flickering - one common cause is preventing edits by keeping value the same.\nIn addition to simply setting the same value, either set editable={false},\nor set/update maxLength to prevent unwanted edits without flicker.",
      "name": "value",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "autoCapitalize": {
      "defaultValue": null,
      "description": "Can tell TextInput to automatically capitalize certain characters.\n     characters: all characters,\n     words: first letter of each word\n     sentences: first letter of each sentence (default)\n     none: don't auto capitalize anything\n\nhttps://reactnative.dev/docs/textinput#autocapitalize",
      "name": "autoCapitalize",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"sentences\" | \"words\" | \"characters\""
      },
      "tags": {}
    },
    "autoCorrect": {
      "defaultValue": null,
      "description": "If false, disables auto-correct.\nThe default value is true.",
      "name": "autoCorrect",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "autoFocus": {
      "defaultValue": null,
      "description": "If true, focuses the input on componentDidMount.\nThe default value is false.",
      "name": "autoFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "blurOnSubmit": {
      "defaultValue": null,
      "description": "If true, the text field will blur when submitted.\nThe default value is true.",
      "name": "blurOnSubmit",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "caretHidden": {
      "defaultValue": null,
      "description": "If true, caret is hidden. The default value is false.",
      "name": "caretHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "contextMenuHidden": {
      "defaultValue": null,
      "description": "If true, context menu is hidden. The default value is false.",
      "name": "contextMenuHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "defaultValue": {
      "defaultValue": null,
      "description": "Provides an initial value that will change when the user starts typing.\nUseful for simple use-cases where you don't want to deal with listening to events\nand updating the value prop to keep the controlled state in sync.",
      "name": "defaultValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "editable": {
      "defaultValue": null,
      "description": "If false, text is not editable. The default value is true.",
      "name": "editable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "keyboardType": {
      "defaultValue": null,
      "description": "enum(\"default\", 'numeric', 'email-address', \"ascii-capable\", 'numbers-and-punctuation', 'url', 'number-pad', 'phone-pad', 'name-phone-pad',\n'decimal-pad', 'twitter', 'web-search', 'visible-password')\nDetermines which keyboard to open, e.g.numeric.\nThe following values work across platforms: - default - numeric - email-address - phone-pad\nThe following values work on iOS: - ascii-capable - numbers-and-punctuation - url - number-pad - name-phone-pad - decimal-pad - twitter - web-search\nThe following values work on Android: - visible-password",
      "name": "keyboardType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "KeyboardTypeOptions"
      },
      "tags": {}
    },
    "maxLength": {
      "defaultValue": null,
      "description": "Limits the maximum number of characters that can be entered.\nUse this instead of implementing the logic in JS to avoid flicker.",
      "name": "maxLength",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "multiline": {
      "defaultValue": null,
      "description": "If true, the text input can be multiple lines. The default value is false.",
      "name": "multiline",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onChange": {
      "defaultValue": null,
      "description": "Callback that is called when the text input's text changes.",
      "name": "onChange",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputChangeEventData>) => void"
      },
      "tags": {}
    },
    "onChangeText": {
      "defaultValue": null,
      "description": "Callback that is called when the text input's text changes.\nChanged text is passed as an argument to the callback handler.",
      "name": "onChangeText",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(text: string) => void"
      },
      "tags": {}
    },
    "onContentSizeChange": {
      "defaultValue": null,
      "description": "Callback that is called when the text input's content size changes.\nThis will be called with\n`{ nativeEvent: { contentSize: { width, height } } }`.\n\nOnly called for multiline text inputs.",
      "name": "onContentSizeChange",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputContentSizeChangeEventData>) => void"
      },
      "tags": {}
    },
    "onEndEditing": {
      "defaultValue": null,
      "description": "Callback that is called when text input ends.",
      "name": "onEndEditing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputEndEditingEventData>) => void"
      },
      "tags": {}
    },
    "onSelectionChange": {
      "defaultValue": null,
      "description": "Callback that is called when the text input selection is changed.",
      "name": "onSelectionChange",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputSelectionChangeEventData>) => void"
      },
      "tags": {}
    },
    "onSubmitEditing": {
      "defaultValue": null,
      "description": "Callback that is called when the text input's submit button is pressed.",
      "name": "onSubmitEditing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputSubmitEditingEventData>) => void"
      },
      "tags": {}
    },
    "onTextInput": {
      "defaultValue": null,
      "description": "Callback that is called on new text input with the argument\n `{ nativeEvent: { text, previousText, range: { start, end } } }`.\n\nThis prop requires multiline={true} to be set.",
      "name": "onTextInput",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputTextInputEventData>) => void"
      },
      "tags": {}
    },
    "onScroll": {
      "defaultValue": null,
      "description": "Invoked on content scroll with\n `{ nativeEvent: { contentOffset: { x, y } } }`.\n\nMay also contain other properties from ScrollEvent but on Android contentSize is not provided for performance reasons.",
      "name": "onScroll",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputScrollEventData>) => void"
      },
      "tags": {}
    },
    "onKeyPress": {
      "defaultValue": null,
      "description": "Callback that is called when a key is pressed.\nThis will be called with\n `{ nativeEvent: { key: keyValue } }`\nwhere keyValue is 'Enter' or 'Backspace' for respective keys and the typed-in character otherwise including ' ' for space.\n\nFires before onChange callbacks.\nNote: on Android only the inputs from soft keyboard are handled, not the hardware keyboard inputs.",
      "name": "onKeyPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputKeyPressEventData>) => void"
      },
      "tags": {}
    },
    "placeholder": {
      "defaultValue": null,
      "description": "The string that will be rendered before text input has been entered",
      "name": "placeholder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "placeholderTextColor": {
      "defaultValue": null,
      "description": "The text color of the placeholder string",
      "name": "placeholderTextColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "returnKeyType": {
      "defaultValue": null,
      "description": "enum('default', 'go', 'google', 'join', 'next', 'route', 'search', 'send', 'yahoo', 'done', 'emergency-call')\nDetermines how the return key should look.",
      "name": "returnKeyType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReturnKeyTypeOptions"
      },
      "tags": {}
    },
    "secureTextEntry": {
      "defaultValue": null,
      "description": "If true, the text input obscures the text entered so that sensitive text like passwords stay secure.\nThe default value is false.",
      "name": "secureTextEntry",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectTextOnFocus": {
      "defaultValue": null,
      "description": "If true, all text will automatically be selected on focus",
      "name": "selectTextOnFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selection": {
      "defaultValue": null,
      "description": "The start and end of the text input's selection. Set start and end to\nthe same value to position the cursor.",
      "name": "selection",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "{ start: number; end?: number; }"
      },
      "tags": {}
    },
    "textAlign": {
      "defaultValue": null,
      "description": "Align the input text to the left, center, or right sides of the input field.",
      "name": "textAlign",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"center\" | \"left\" | \"right\""
      },
      "tags": {}
    },
    "inputAccessoryViewID": {
      "defaultValue": null,
      "description": "Used to connect to an InputAccessoryView. Not part of react-natives documentation, but present in examples and\ncode.\nSee https://reactnative.dev/docs/inputaccessoryview for more information.",
      "name": "inputAccessoryViewID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "clearButtonMode": {
      "defaultValue": null,
      "description": "enum('never', 'while-editing', 'unless-editing', 'always')\nWhen the clear button should appear on the right side of the text view",
      "name": "clearButtonMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"never\" | \"while-editing\" | \"unless-editing\" | \"always\""
      },
      "tags": {}
    },
    "clearTextOnFocus": {
      "defaultValue": null,
      "description": "If true, clears the text field automatically when editing begins",
      "name": "clearTextOnFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "dataDetectorTypes": {
      "defaultValue": null,
      "description": "Determines the types of data converted to clickable URLs in the text input.\nOnly valid if `multiline={true}` and `editable={false}`.\nBy default no data types are detected.\n\nYou can provide one type or an array of many types.\n\nPossible values for `dataDetectorTypes` are:\n\n- `'phoneNumber'`\n- `'link'`\n- `'address'`\n- `'calendarEvent'`\n- `'none'`\n- `'all'`",
      "name": "dataDetectorTypes",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "DataDetectorTypes | DataDetectorTypes[]"
      },
      "tags": {}
    },
    "enablesReturnKeyAutomatically": {
      "defaultValue": null,
      "description": "If true, the keyboard disables the return key when there is no text and automatically enables it when there is text.\nThe default value is false.",
      "name": "enablesReturnKeyAutomatically",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "keyboardAppearance": {
      "defaultValue": null,
      "description": "Determines the color of the keyboard.",
      "name": "keyboardAppearance",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"default\" | \"light\" | \"dark\""
      },
      "tags": {}
    },
    "passwordRules": {
      "defaultValue": null,
      "description": "Provide rules for your password.\nFor example, say you want to require a password with at least eight characters consisting of a mix of uppercase and lowercase letters, at least one number, and at most two consecutive characters.\n\"required: upper; required: lower; required: digit; max-consecutive: 2; minlength: 8;\"",
      "name": "passwordRules",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "rejectResponderTermination": {
      "defaultValue": null,
      "description": "If `true`, allows TextInput to pass touch events to the parent component.\nThis allows components to be swipeable from the TextInput on iOS,\nas is the case on Android by default.\nIf `false`, TextInput always asks to handle the input (except when disabled).",
      "name": "rejectResponderTermination",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectionState": {
      "defaultValue": null,
      "description": "See DocumentSelectionState.js, some state that is responsible for maintaining selection information for a document",
      "name": "selectionState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "DocumentSelectionState"
      },
      "tags": {}
    },
    "spellCheck": {
      "defaultValue": null,
      "description": "If false, disables spell-check style (i.e. red underlines). The default value is inherited from autoCorrect",
      "name": "spellCheck",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "textContentType": {
      "defaultValue": null,
      "description": "Give the keyboard and the system information about the expected\nsemantic meaning for the content that users enter.\n\nFor iOS 11+ you can set `textContentType` to `username` or `password` to\nenable autofill of login details from the device keychain.\n\nFor iOS 12+ `newPassword` can be used to indicate a new password input the\nuser may want to save in the keychain, and `oneTimeCode` can be used to indicate\nthat a field can be autofilled by a code arriving in an SMS.\n\nTo disable autofill, set textContentType to `none`.\n\nPossible values for `textContentType` are:\n\n - `'none'`\n - `'URL'`\n - `'addressCity'`\n - `'addressCityAndState'`\n - `'addressState'`\n - `'countryName'`\n - `'creditCardNumber'`\n - `'emailAddress'`\n - `'familyName'`\n - `'fullStreetAddress'`\n - `'givenName'`\n - `'jobTitle'`\n - `'location'`\n - `'middleName'`\n - `'name'`\n - `'namePrefix'`\n - `'nameSuffix'`\n - `'nickname'`\n - `'organizationName'`\n - `'postalCode'`\n - `'streetAddressLine1'`\n - `'streetAddressLine2'`\n - `'sublocality'`\n - `'telephoneNumber'`\n - `'username'`\n - `'password'`\n - `'newPassword'`\n - `'oneTimeCode'`",
      "name": "textContentType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"name\" | \"none\" | \"URL\" | \"addressCity\" | \"addressCityAndState\" | \"addressState\" | \"countryName\" | \"creditCardNumber\" | \"emailAddress\" | \"familyName\" | \"fullStreetAddress\" | ... 16 more ... | \"oneTimeCode\""
      },
      "tags": {}
    },
    "scrollEnabled": {
      "defaultValue": null,
      "description": "If false, scrolling of the text view will be disabled. The default value is true. Only works with multiline={true}",
      "name": "scrollEnabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "autoComplete": {
      "defaultValue": null,
      "description": "Specifies autocomplete hints for the system, so it can provide autofill. On Android, the system will always attempt to offer autofill by using heuristics to identify the type of content.\nTo disable autocomplete, set `autoComplete` to `off`.\n\n*Android Only*\n\nPossible values for `autoComplete` are:\n\n- `birthdate-day`\n- `birthdate-full`\n- `birthdate-month`\n- `birthdate-year`\n- `cc-csc`\n- `cc-exp`\n- `cc-exp-day`\n- `cc-exp-month`\n- `cc-exp-year`\n- `cc-number`\n- `email`\n- `gender`\n- `name`\n- `name-family`\n- `name-given`\n- `name-middle`\n- `name-middle-initial`\n- `name-prefix`\n- `name-suffix`\n- `password`\n- `password-new`\n- `postal-address`\n- `postal-address-country`\n- `postal-address-extended`\n- `postal-address-extended-postal-code`\n- `postal-address-locality`\n- `postal-address-region`\n- `postal-code`\n- `street-address`\n- `sms-otp`\n- `tel`\n- `tel-country-code`\n- `tel-national`\n- `tel-device`\n- `username`\n- `username-new`\n- `off`",
      "name": "autoComplete",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"name\" | \"email\" | \"username\" | \"password\" | \"birthdate-day\" | \"birthdate-full\" | \"birthdate-month\" | \"birthdate-year\" | \"cc-csc\" | \"cc-exp\" | \"cc-exp-day\" | \"cc-exp-month\" | ... 24 more ... | \"off\""
      },
      "tags": {}
    },
    "importantForAutofill": {
      "defaultValue": null,
      "description": "Determines whether the individual fields in your app should be included in a\nview structure for autofill purposes on Android API Level 26+. Defaults to auto.\nTo disable auto complete, use `off`.\n\n*Android Only*\n\nThe following values work on Android only:\n\n- `auto` - let Android decide\n- `no` - not important for autofill\n- `noExcludeDescendants` - this view and its children aren't important for autofill\n- `yes` - is important for autofill\n- `yesExcludeDescendants` - this view is important for autofill but its children aren't",
      "name": "importantForAutofill",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"noExcludeDescendants\" | \"yesExcludeDescendants\""
      },
      "tags": {}
    },
    "disableFullscreenUI": {
      "defaultValue": null,
      "description": "When false, if there is a small amount of space available around a text input (e.g. landscape orientation on a phone),\n  the OS may choose to have the user edit the text inside of a full screen text input mode.\nWhen true, this feature is disabled and users will always edit the text directly inside of the text input.\nDefaults to false.",
      "name": "disableFullscreenUI",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "inlineImageLeft": {
      "defaultValue": null,
      "description": "If defined, the provided image resource will be rendered on the left.",
      "name": "inlineImageLeft",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "inlineImagePadding": {
      "defaultValue": null,
      "description": "Padding between the inline image, if any, and the text input itself.",
      "name": "inlineImagePadding",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "returnKeyLabel": {
      "defaultValue": null,
      "description": "Sets the return key to the label. Use it instead of `returnKeyType`.",
      "name": "returnKeyLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {
        "platform": "android"
      }
    },
    "underlineColorAndroid": {
      "defaultValue": null,
      "description": "The color of the textInput underline.",
      "name": "underlineColorAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "textAlignVertical": {
      "defaultValue": null,
      "description": "Vertically align text when `multiline` is set to true",
      "name": "textAlignVertical",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"center\" | \"top\" | \"bottom\""
      },
      "tags": {}
    },
    "showSoftInputOnFocus": {
      "defaultValue": null,
      "description": "When false, it will prevent the soft keyboard from showing when the field is focused. The default value is true",
      "name": "showSoftInputOnFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shake": {
      "defaultValue": null,
      "description": "Shake method",
      "name": "shake",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "disabledInputStyle": {
      "defaultValue": null,
      "description": "disabled styles that will be passed to the style props of the React Native TextInput",
      "name": "disabledInputStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "inputContainerStyle": {
      "defaultValue": null,
      "description": "styling for Input Component Container",
      "name": "inputContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "leftIcon": {
      "defaultValue": null,
      "description": "displays an icon on the left",
      "name": "leftIcon",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "leftIconContainerStyle": {
      "defaultValue": null,
      "description": "styling for left Icon Component container",
      "name": "leftIconContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "rightIcon": {
      "defaultValue": null,
      "description": "displays an icon on the right",
      "name": "rightIcon",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "rightIconContainerStyle": {
      "defaultValue": null,
      "description": "styling for right Icon Component container",
      "name": "rightIconContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "inputStyle": {
      "defaultValue": null,
      "description": "Style for Input Component",
      "name": "inputStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "InputComponent": {
      "defaultValue": null,
      "description": "component that will be rendered in place of the React Native TextInput",
      "name": "InputComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {
        "type": "React Component"
      }
    },
    "errorProps": {
      "defaultValue": null,
      "description": "props to be passed to the React Native Text component used to display the error message",
      "name": "errorProps",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      },
      "tags": {}
    },
    "errorStyle": {
      "defaultValue": null,
      "description": "add styling to error message",
      "name": "errorStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "errorMessage": {
      "defaultValue": null,
      "description": "Error message to be displayed under the input field",
      "name": "errorMessage",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "label": {
      "defaultValue": null,
      "description": "add a label on top of the input",
      "name": "label",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode"
      },
      "tags": {}
    },
    "labelStyle": {
      "defaultValue": null,
      "description": "styling for the label; You can only use this if label is a string",
      "name": "labelStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "labelProps": {
      "defaultValue": null,
      "description": "props to be passed to the React Native Text component used to display the label or React Component used instead of simple string in label prop",
      "name": "labelProps",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      },
      "tags": {}
    },
    "renderErrorMessage": {
      "defaultValue": null,
      "description": "If the error message container should be rendered (take up vertical space). If false, when showing errorMessage, the layout will shift to add it at that time.",
      "name": "renderErrorMessage",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "key": {
      "defaultValue": null,
      "description": "",
      "name": "key",
      "parent": {
        "fileName": "rne/node_modules/@types/react/index.d.ts",
        "name": "Attributes"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Key"
      },
      "tags": {}
    },
    "ref": {
      "defaultValue": null,
      "description": "",
      "name": "ref",
      "parent": {
        "fileName": "rne/node_modules/@types/react/index.d.ts",
        "name": "RefAttributes"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Ref<TextInput>"
      },
      "tags": {}
    }
  },
  "ListItem.Subtitle": {
    "right": {
      "defaultValue": null,
      "description": "",
      "name": "right",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Subtitle.tsx",
        "name": "ListItemSubtitleProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Subtitle.tsx",
          "name": "ListItemSubtitleProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "allowFontScaling": {
      "defaultValue": null,
      "description": "Specifies whether fonts should scale to respect Text Size accessibility settings.\nThe default is `true`.",
      "name": "allowFontScaling",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ellipsizeMode": {
      "defaultValue": null,
      "description": "This can be one of the following values:\n\n- `head` - The line is displayed so that the end fits in the container and the missing text\nat the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n- `middle` - The line is displayed so that the beginning and end fit in the container and the\nmissing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n- `tail` - The line is displayed so that the beginning fits in the container and the\nmissing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n- `clip` - Lines are not drawn past the edge of the text container.\n\nThe default is `tail`.\n\n`numberOfLines` must be set in conjunction with this prop.\n\n> `clip` is working only for iOS",
      "name": "ellipsizeMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "lineBreakMode": {
      "defaultValue": null,
      "description": "Line Break mode. Works only with numberOfLines.\nclip is working only for iOS",
      "name": "lineBreakMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "numberOfLines": {
      "defaultValue": null,
      "description": "Used to truncate the text with an ellipsis after computing the text\nlayout, including line wrapping, such that the total number of lines\ndoes not exceed this number.\n\nThis prop is commonly used with `ellipsizeMode`.",
      "name": "numberOfLines",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "onTextLayout": {
      "defaultValue": null,
      "description": "Invoked on Text layout",
      "name": "onTextLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TextLayoutEventData>) => void"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "This function is called on press.\nText intrinsically supports press handling with a default highlight state (which can be disabled with suppressHighlighting).",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "This function is called on long press.\ne.g., `onLongPress={this.increaseSize}>``",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {
        "see": "https://reactnative.dev/docs/text#style"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "maxFontSizeMultiplier": {
      "defaultValue": null,
      "description": "Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n- null/undefined (default): inherit from the parent node or the global default (0)\n- 0: no max, ignore parent/global default\n- >= 1: sets the maxFontSizeMultiplier of this node to this value",
      "name": "maxFontSizeMultiplier",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "adjustsFontSizeToFit": {
      "defaultValue": null,
      "description": "Specifies whether font should be scaled down automatically to fit given style constraints.",
      "name": "adjustsFontSizeToFit",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "minimumFontScale": {
      "defaultValue": null,
      "description": "Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).",
      "name": "minimumFontScale",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "suppressHighlighting": {
      "defaultValue": null,
      "description": "When `true`, no visual change is made when text is pressed down. By\ndefault, a gray oval highlights the text on press down.",
      "name": "suppressHighlighting",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectable": {
      "defaultValue": null,
      "description": "Lets the user select text, to use the native copy and paste functionality.",
      "name": "selectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectionColor": {
      "defaultValue": null,
      "description": "The highlight color of the text.",
      "name": "selectionColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "textBreakStrategy": {
      "defaultValue": null,
      "description": "Set text break strategy on Android API Level 23+\ndefault is `highQuality`.",
      "name": "textBreakStrategy",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"simple\" | \"highQuality\" | \"balanced\""
      },
      "tags": {}
    },
    "dataDetectorType": {
      "defaultValue": null,
      "description": "Determines the types of data converted to clickable URLs in the text element.\nBy default no data types are detected.",
      "name": "dataDetectorType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"link\" | \"phoneNumber\" | \"email\" | \"all\""
      },
      "tags": {}
    },
    "android_hyphenationFrequency": {
      "defaultValue": null,
      "description": "Hyphenation strategy",
      "name": "android_hyphenationFrequency",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"balanced\" | \"normal\" | \"full\" | \"high\""
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    }
  },
  "ListItem.Swipeable": {
    "leftContent": {
      "defaultValue": null,
      "description": "Left Content.",
      "name": "leftContent",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
        "name": "ListItemSwipeableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
          "name": "ListItemSwipeableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode or resetCallback => ReactNode"
      },
      "tags": {
        "type": "ReactNode or resetCallback => ReactNode"
      }
    },
    "rightContent": {
      "defaultValue": null,
      "description": "Right Content.",
      "name": "rightContent",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
        "name": "ListItemSwipeableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
          "name": "ListItemSwipeableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode or resetCallback => ReactNode"
      },
      "tags": {
        "type": "ReactNode or resetCallback => ReactNode"
      }
    },
    "leftStyle": {
      "defaultValue": null,
      "description": "Style of left container.",
      "name": "leftStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
        "name": "ListItemSwipeableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
          "name": "ListItemSwipeableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "rightStyle": {
      "defaultValue": null,
      "description": "Style of right container.",
      "name": "rightStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
        "name": "ListItemSwipeableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
          "name": "ListItemSwipeableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "leftWidth": {
      "defaultValue": {
        "value": "ScreenWidth / 3"
      },
      "description": "Width to swipe left.",
      "name": "leftWidth",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
        "name": "ListItemSwipeableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
          "name": "ListItemSwipeableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "rightWidth": {
      "defaultValue": {
        "value": "ScreenWidth / 3"
      },
      "description": "Width to swipe right.",
      "name": "rightWidth",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
        "name": "ListItemSwipeableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
          "name": "ListItemSwipeableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onSwipeBegin": {
      "defaultValue": null,
      "description": "Handler for swipe in either direction",
      "name": "onSwipeBegin",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
        "name": "ListItemSwipeableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
          "name": "ListItemSwipeableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(direction: \"left\" | \"right\") => unknown"
      },
      "tags": {}
    },
    "onSwipeEnd": {
      "defaultValue": null,
      "description": "Handler for swipe end.",
      "name": "onSwipeEnd",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
        "name": "ListItemSwipeableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
          "name": "ListItemSwipeableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "() => unknown"
      },
      "tags": {}
    },
    "animation": {
      "defaultValue": {
        "value": "Object with duration 350ms and type timing"
      },
      "description": "Decide whether to show animation.",
      "name": "animation",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
        "name": "ListItemSwipeableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Swipeable.tsx",
          "name": "ListItemSwipeableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Animated.TimingAnimationConfig"
      },
      "tags": {
        "default": "Object with duration 350ms and type timing",
        "type": "Animated.TimingAnimationConfig"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Additional main container styling.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Specific styling to be used when list item is disabled.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "topDivider": {
      "defaultValue": null,
      "description": "Add divider at the top of the list item.",
      "name": "topDivider",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "bottomDivider": {
      "defaultValue": null,
      "description": "Add divider at the bottom of the list item.",
      "name": "bottomDivider",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "pad": {
      "defaultValue": null,
      "description": "Adds spacing between the leftComponent, the title component & right component.",
      "name": "pad",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "Component": {
      "defaultValue": null,
      "description": "Replace element with custom element.",
      "name": "Component",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "ViewComponent": {
      "defaultValue": null,
      "description": "Container for linear gradient.",
      "name": "ViewComponent",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Props for linear gradient component.",
      "name": "linearGradientProps",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      },
      "tags": {}
    },
    "children": {
      "defaultValue": null,
      "description": "Add enclosed children.",
      "name": "children",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "Called after the element loses focus.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {
        "platform": "windows"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "Called after the element is focused.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {
        "platform": "windows"
      }
    },
    "cancelable": {
      "defaultValue": null,
      "description": "Whether a press gesture can be interrupted by a parent gesture such as a\nscroll event. Defaults to true.",
      "name": "cancelable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "Whether the press behavior is disabled.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a press is detected.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a touch is considered a\npress before `onPressOut` is triggered.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      },
      "tags": {}
    },
    "android_disableSound": {
      "defaultValue": null,
      "description": "If true, doesn't play system sound on touch.",
      "name": "android_disableSound",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "android_ripple": {
      "defaultValue": null,
      "description": "Enables the Android ripple effect and configures its color.",
      "name": "android_ripple",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableAndroidRippleConfig"
      },
      "tags": {}
    },
    "testOnly_pressed": {
      "defaultValue": null,
      "description": "Used only for documentation or testing (e.g. snapshot testing).",
      "name": "testOnly_pressed",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Either view styles or a function that receives a boolean reflecting whether\nthe component is currently pressed and returns view styles.",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    }
  },
  "ListItem.Title": {
    "right": {
      "defaultValue": null,
      "description": "Add right title.",
      "name": "right",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.Title.tsx",
        "name": "ListItemTitleProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.Title.tsx",
          "name": "ListItemTitleProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "allowFontScaling": {
      "defaultValue": null,
      "description": "Specifies whether fonts should scale to respect Text Size accessibility settings.\nThe default is `true`.",
      "name": "allowFontScaling",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ellipsizeMode": {
      "defaultValue": null,
      "description": "This can be one of the following values:\n\n- `head` - The line is displayed so that the end fits in the container and the missing text\nat the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n- `middle` - The line is displayed so that the beginning and end fit in the container and the\nmissing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n- `tail` - The line is displayed so that the beginning fits in the container and the\nmissing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n- `clip` - Lines are not drawn past the edge of the text container.\n\nThe default is `tail`.\n\n`numberOfLines` must be set in conjunction with this prop.\n\n> `clip` is working only for iOS",
      "name": "ellipsizeMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "lineBreakMode": {
      "defaultValue": null,
      "description": "Line Break mode. Works only with numberOfLines.\nclip is working only for iOS",
      "name": "lineBreakMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "numberOfLines": {
      "defaultValue": null,
      "description": "Used to truncate the text with an ellipsis after computing the text\nlayout, including line wrapping, such that the total number of lines\ndoes not exceed this number.\n\nThis prop is commonly used with `ellipsizeMode`.",
      "name": "numberOfLines",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "onTextLayout": {
      "defaultValue": null,
      "description": "Invoked on Text layout",
      "name": "onTextLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TextLayoutEventData>) => void"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "This function is called on press.\nText intrinsically supports press handling with a default highlight state (which can be disabled with suppressHighlighting).",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "This function is called on long press.\ne.g., `onLongPress={this.increaseSize}>``",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {
        "see": "https://reactnative.dev/docs/text#style"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "maxFontSizeMultiplier": {
      "defaultValue": null,
      "description": "Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n- null/undefined (default): inherit from the parent node or the global default (0)\n- 0: no max, ignore parent/global default\n- >= 1: sets the maxFontSizeMultiplier of this node to this value",
      "name": "maxFontSizeMultiplier",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "adjustsFontSizeToFit": {
      "defaultValue": null,
      "description": "Specifies whether font should be scaled down automatically to fit given style constraints.",
      "name": "adjustsFontSizeToFit",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "minimumFontScale": {
      "defaultValue": null,
      "description": "Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).",
      "name": "minimumFontScale",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "suppressHighlighting": {
      "defaultValue": null,
      "description": "When `true`, no visual change is made when text is pressed down. By\ndefault, a gray oval highlights the text on press down.",
      "name": "suppressHighlighting",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectable": {
      "defaultValue": null,
      "description": "Lets the user select text, to use the native copy and paste functionality.",
      "name": "selectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectionColor": {
      "defaultValue": null,
      "description": "The highlight color of the text.",
      "name": "selectionColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "textBreakStrategy": {
      "defaultValue": null,
      "description": "Set text break strategy on Android API Level 23+\ndefault is `highQuality`.",
      "name": "textBreakStrategy",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"simple\" | \"highQuality\" | \"balanced\""
      },
      "tags": {}
    },
    "dataDetectorType": {
      "defaultValue": null,
      "description": "Determines the types of data converted to clickable URLs in the text element.\nBy default no data types are detected.",
      "name": "dataDetectorType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"link\" | \"phoneNumber\" | \"email\" | \"all\""
      },
      "tags": {}
    },
    "android_hyphenationFrequency": {
      "defaultValue": null,
      "description": "Hyphenation strategy",
      "name": "android_hyphenationFrequency",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"balanced\" | \"normal\" | \"full\" | \"high\""
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    }
  },
  "ListItem": {
    "containerStyle": {
      "defaultValue": null,
      "description": "Additional main container styling.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Specific styling to be used when list item is disabled.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "topDivider": {
      "defaultValue": null,
      "description": "Add divider at the top of the list item.",
      "name": "topDivider",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "bottomDivider": {
      "defaultValue": null,
      "description": "Add divider at the bottom of the list item.",
      "name": "bottomDivider",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "pad": {
      "defaultValue": null,
      "description": "Adds spacing between the leftComponent, the title component & right component.",
      "name": "pad",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "Component": {
      "defaultValue": null,
      "description": "Replace element with custom element.",
      "name": "Component",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "ViewComponent": {
      "defaultValue": null,
      "description": "Container for linear gradient.",
      "name": "ViewComponent",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Props for linear gradient component.",
      "name": "linearGradientProps",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      },
      "tags": {}
    },
    "children": {
      "defaultValue": null,
      "description": "Add enclosed children.",
      "name": "children",
      "parent": {
        "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
        "name": "ListItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "Called after the element loses focus.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {
        "platform": "windows"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "Called after the element is focused.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {
        "platform": "windows"
      }
    },
    "cancelable": {
      "defaultValue": null,
      "description": "Whether a press gesture can be interrupted by a parent gesture such as a\nscroll event. Defaults to true.",
      "name": "cancelable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "Whether the press behavior is disabled.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a press is detected.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a touch is considered a\npress before `onPressOut` is triggered.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      },
      "tags": {}
    },
    "android_disableSound": {
      "defaultValue": null,
      "description": "If true, doesn't play system sound on touch.",
      "name": "android_disableSound",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "android_ripple": {
      "defaultValue": null,
      "description": "Enables the Android ripple effect and configures its color.",
      "name": "android_ripple",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableAndroidRippleConfig"
      },
      "tags": {}
    },
    "testOnly_pressed": {
      "defaultValue": null,
      "description": "Used only for documentation or testing (e.g. snapshot testing).",
      "name": "testOnly_pressed",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Either view styles or a function that receives a boolean reflecting whether\nthe component is currently pressed and returns view styles.",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    }
  },
  "Overlay": {
    "isVisible": {
      "defaultValue": null,
      "description": "If true, the overlay is visible.",
      "name": "isVisible",
      "parent": {
        "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
        "name": "OverlayProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
          "name": "OverlayProps"
        }
      ],
      "required": true,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "backdropStyle": {
      "defaultValue": null,
      "description": "Style of the backdrop container.",
      "name": "backdropStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
        "name": "OverlayProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
          "name": "OverlayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "overlayStyle": {
      "defaultValue": null,
      "description": "Style of the actual overlay.",
      "name": "overlayStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
        "name": "OverlayProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
          "name": "OverlayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onBackdropPress": {
      "defaultValue": {
        "value": "Function"
      },
      "description": "Handler for backdrop press (only works when `fullscreen` is false).",
      "name": "onBackdropPress",
      "parent": {
        "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
        "name": "OverlayProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
          "name": "OverlayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "fullScreen": {
      "defaultValue": {
        "value": "false"
      },
      "description": "If set to true, the modal will take up the entire screen width and height.",
      "name": "fullScreen",
      "parent": {
        "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
        "name": "OverlayProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
          "name": "OverlayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ModalComponent": {
      "defaultValue": null,
      "description": "Override React Native `Modal` component (usable for web-platform).",
      "name": "ModalComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
        "name": "OverlayProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Overlay/Overlay.tsx",
          "name": "OverlayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "typeof Component"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "animated": {
      "defaultValue": null,
      "description": "",
      "name": "animated",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "deprecated": "Use animationType instead"
      }
    },
    "animationType": {
      "defaultValue": null,
      "description": "The `animationType` prop controls how the modal animates.\n\n- `slide` slides in from the bottom\n- `fade` fades into view\n- `none` appears without an animation",
      "name": "animationType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"slide\" | \"fade\""
      },
      "tags": {}
    },
    "transparent": {
      "defaultValue": null,
      "description": "The `transparent` prop determines whether your modal will fill the entire view.\nSetting this to `true` will render the modal over a transparent background.",
      "name": "transparent",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onRequestClose": {
      "defaultValue": null,
      "description": "The `onRequestClose` prop allows passing a function that will be called once the modal has been dismissed.\n_On the Android platform, this is a required function._",
      "name": "onRequestClose",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onShow": {
      "defaultValue": null,
      "description": "The `onShow` prop allows passing a function that will be called once the modal has been shown.",
      "name": "onShow",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<any>) => void"
      },
      "tags": {}
    },
    "presentationStyle": {
      "defaultValue": null,
      "description": "The `presentationStyle` determines the style of modal to show",
      "name": "presentationStyle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "\"fullScreen\" | \"pageSheet\" | \"formSheet\" | \"overFullScreen\""
      },
      "tags": {}
    },
    "supportedOrientations": {
      "defaultValue": null,
      "description": "The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.\nOn iOS, the modal is still restricted by what's specified in your app's Info.plist's UISupportedInterfaceOrientations field.",
      "name": "supportedOrientations",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "(\"portrait\" | \"portrait-upside-down\" | \"landscape\" | \"landscape-left\" | \"landscape-right\")[]"
      },
      "tags": {}
    },
    "onDismiss": {
      "defaultValue": null,
      "description": "The `onDismiss` prop allows passing a function that will be called once the modal has been dismissed.",
      "name": "onDismiss",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onOrientationChange": {
      "defaultValue": null,
      "description": "The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed.\nThe orientation provided is only 'portrait' or 'landscape'. This callback is also called on initial render, regardless of the current orientation.",
      "name": "onOrientationChange",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<any>) => void"
      },
      "tags": {}
    },
    "hardwareAccelerated": {
      "defaultValue": null,
      "description": "Controls whether to force hardware acceleration for the underlying window.",
      "name": "hardwareAccelerated",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "statusBarTranslucent": {
      "defaultValue": null,
      "description": "Determines whether your modal should go under the system statusbar.",
      "name": "statusBarTranslucent",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      },
      "tags": {
        "default": "None",
        "type": "PressableProps except click handlers"
      }
    }
  },
  "PricingCard": {
    "containerStyle": {
      "defaultValue": null,
      "description": "Outer component styling.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
        "name": "PricingCardProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
          "name": "PricingCardProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "wrapperStyle": {
      "defaultValue": null,
      "description": "Inner wrapper component styling.",
      "name": "wrapperStyle",
      "parent": {
        "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
        "name": "PricingCardProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
          "name": "PricingCardProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "title": {
      "defaultValue": null,
      "description": "Add title in the pricing card.",
      "name": "title",
      "parent": {
        "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
        "name": "PricingCardProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
          "name": "PricingCardProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "price": {
      "defaultValue": null,
      "description": "Price mentioned in the pricing card.",
      "name": "price",
      "parent": {
        "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
        "name": "PricingCardProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
          "name": "PricingCardProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | number"
      },
      "tags": {}
    },
    "info": {
      "defaultValue": {
        "value": "[]"
      },
      "description": "Pricing information.",
      "name": "info",
      "parent": {
        "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
        "name": "PricingCardProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
          "name": "PricingCardProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string[]"
      },
      "tags": {}
    },
    "button": {
      "defaultValue": null,
      "description": "Button information.",
      "name": "button",
      "parent": {
        "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
        "name": "PricingCardProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
          "name": "PricingCardProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ButtonProps | ButtonInformation"
      },
      "tags": {}
    },
    "color": {
      "defaultValue": {
        "value": "Color [Primary]"
      },
      "description": "Color scheme for button & title.",
      "name": "color",
      "parent": {
        "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
        "name": "PricingCardProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
          "name": "PricingCardProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "onButtonPress": {
      "defaultValue": null,
      "description": "Function to be run when button is pressed.",
      "name": "onButtonPress",
      "parent": {
        "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
        "name": "PricingCardProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
          "name": "PricingCardProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Specify title text style.",
      "name": "titleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
        "name": "PricingCardProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
          "name": "PricingCardProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "pricingStyle": {
      "defaultValue": null,
      "description": "Specify pricing text style.",
      "name": "pricingStyle",
      "parent": {
        "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
        "name": "PricingCardProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
          "name": "PricingCardProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "infoStyle": {
      "defaultValue": null,
      "description": "Specify pricing information style.",
      "name": "infoStyle",
      "parent": {
        "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
        "name": "PricingCardProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/PricingCard/PricingCard.tsx",
          "name": "PricingCardProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    }
  },
  "Rating": {
    "type": {
      "defaultValue": null,
      "description": "Graphic used for represent a rating\n\nDefault is 'star'",
      "name": "type",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "ratingImage": {
      "defaultValue": null,
      "description": "Pass in a custom image source; use this along with type='custom' prop above",
      "name": "ratingImage",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode"
      },
      "tags": {}
    },
    "ratingColor": {
      "defaultValue": null,
      "description": "Pass in a custom fill-color for the rating icon; use this along with type='custom' prop above\n\nDefault is '#f1c40f'",
      "name": "ratingColor",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "ratingBackgroundColor": {
      "defaultValue": null,
      "description": "Pass in a custom background-fill-color for the rating icon; use this along with type='custom' prop above\n\nDefault is 'white'",
      "name": "ratingBackgroundColor",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "ratingCount": {
      "defaultValue": null,
      "description": "Number of rating images to display\n\nDefault is 5",
      "name": "ratingCount",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "ratingTextColor": {
      "defaultValue": null,
      "description": "Color used for the text labels",
      "name": "ratingTextColor",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "imageSize": {
      "defaultValue": null,
      "description": "The size of each rating image\n\nDefault is 50",
      "name": "imageSize",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onStartRating": {
      "defaultValue": null,
      "description": "Callback method when the user starts rating.",
      "name": "onStartRating",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onFinishRating": {
      "defaultValue": null,
      "description": "Callback method when the user finishes rating. Gives you the final rating value as a whole number",
      "name": "onFinishRating",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "showRating": {
      "defaultValue": null,
      "description": "Displays the Built-in Rating UI to show the rating value in real-time\n\nDefault is false",
      "name": "showRating",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Exposes style prop to add additonal styling to the container view",
      "name": "style",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "readonly": {
      "defaultValue": null,
      "description": "Whether the rating can be modiefied by the user\n\nDefault is false",
      "name": "readonly",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "showReadOnlyText": {
      "defaultValue": null,
      "description": "Whether the text is read only\n\nDefault is false",
      "name": "showReadOnlyText",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "startingValue": {
      "defaultValue": null,
      "description": "The initial rating to render\n\nDefault is ratingCount/2",
      "name": "startingValue",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "fractions": {
      "defaultValue": null,
      "description": "The number of decimal places for the rating value; must be between 0 and 20",
      "name": "fractions",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      },
      "tags": {}
    },
    "minValue": {
      "defaultValue": null,
      "description": "The minimum value the user can select\n\nDefault is 0",
      "name": "minValue",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onSwipeRating": {
      "defaultValue": null,
      "description": "Callback method when the user is swiping.",
      "name": "onSwipeRating",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(number: any) => void"
      },
      "tags": {}
    },
    "tintColor": {
      "defaultValue": null,
      "description": "Color used for the background",
      "name": "tintColor",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "jumpValue": {
      "defaultValue": null,
      "description": "The number to jump per swipe\nDefault is 0 (not to jump)",
      "name": "jumpValue",
      "declarations": [
        {
          "fileName": "rne/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    }
  },
  "SearchBar": {
    "containerStyle": {
      "defaultValue": null,
      "description": "Style for container",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/SearchBar/types.tsx",
        "name": "SearchBarBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "inputContainerStyle": {
      "defaultValue": null,
      "description": "Style for input container",
      "name": "inputContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/SearchBar/types.tsx",
        "name": "SearchBarBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "clearIcon": {
      "defaultValue": null,
      "description": "Clear Icon",
      "name": "clearIcon",
      "parent": {
        "fileName": "rne/packages/base/src/SearchBar/types.tsx",
        "name": "SearchBarBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "searchIcon": {
      "defaultValue": null,
      "description": "Icon for search",
      "name": "searchIcon",
      "parent": {
        "fileName": "rne/packages/base/src/SearchBar/types.tsx",
        "name": "SearchBarBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "inputStyle": {
      "defaultValue": null,
      "description": "Input Style",
      "name": "inputStyle",
      "parent": {
        "fileName": "rne/packages/base/src/SearchBar/types.tsx",
        "name": "SearchBarBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "loadingProps": {
      "defaultValue": null,
      "description": "ActivityIndicatorProps",
      "name": "loadingProps",
      "parent": {
        "fileName": "rne/packages/base/src/SearchBar/types.tsx",
        "name": "SearchBarBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ActivityIndicatorProps"
      },
      "tags": {}
    },
    "showLoading": {
      "defaultValue": null,
      "description": "Show loading",
      "name": "showLoading",
      "parent": {
        "fileName": "rne/packages/base/src/SearchBar/types.tsx",
        "name": "SearchBarBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "leftIconContainerStyle": {
      "defaultValue": null,
      "description": "Left Icon Container Style",
      "name": "leftIconContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/SearchBar/types.tsx",
        "name": "SearchBarBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "rightIconContainerStyle": {
      "defaultValue": null,
      "description": "Right Icon Container Style",
      "name": "rightIconContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/SearchBar/types.tsx",
        "name": "SearchBarBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onClear": {
      "defaultValue": null,
      "description": "",
      "name": "onClear",
      "parent": {
        "fileName": "rne/packages/base/src/SearchBar/types.tsx",
        "name": "SearchBarBaseProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "SearchBarBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "shake": {
      "defaultValue": null,
      "description": "Shake method",
      "name": "shake",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "disables the input component",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabledInputStyle": {
      "defaultValue": null,
      "description": "disabled styles that will be passed to the style props of the React Native TextInput",
      "name": "disabledInputStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "leftIcon": {
      "defaultValue": null,
      "description": "displays an icon on the left",
      "name": "leftIcon",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "rightIcon": {
      "defaultValue": null,
      "description": "displays an icon on the right",
      "name": "rightIcon",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "InputComponent": {
      "defaultValue": null,
      "description": "component that will be rendered in place of the React Native TextInput",
      "name": "InputComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {
        "type": "React Component"
      }
    },
    "errorProps": {
      "defaultValue": null,
      "description": "props to be passed to the React Native Text component used to display the error message",
      "name": "errorProps",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      },
      "tags": {}
    },
    "errorStyle": {
      "defaultValue": null,
      "description": "add styling to error message",
      "name": "errorStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "errorMessage": {
      "defaultValue": null,
      "description": "Error message to be displayed under the input field",
      "name": "errorMessage",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "label": {
      "defaultValue": null,
      "description": "add a label on top of the input",
      "name": "label",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode"
      },
      "tags": {}
    },
    "labelStyle": {
      "defaultValue": null,
      "description": "styling for the label; You can only use this if label is a string",
      "name": "labelStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "labelProps": {
      "defaultValue": null,
      "description": "props to be passed to the React Native Text component used to display the label or React Component used instead of simple string in label prop",
      "name": "labelProps",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      },
      "tags": {}
    },
    "renderErrorMessage": {
      "defaultValue": null,
      "description": "If the error message container should be rendered (take up vertical space). If false, when showing errorMessage, the layout will shift to add it at that time.",
      "name": "renderErrorMessage",
      "parent": {
        "fileName": "rne/packages/base/src/Input/Input.tsx",
        "name": "InputProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        },
        {
          "fileName": "rne/packages/base/src/Input/Input.tsx",
          "name": "InputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "allowFontScaling": {
      "defaultValue": null,
      "description": "Specifies whether fonts should scale to respect Text Size accessibility settings.\nThe default is `true`.",
      "name": "allowFontScaling",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "autoCapitalize": {
      "defaultValue": null,
      "description": "Can tell TextInput to automatically capitalize certain characters.\n     characters: all characters,\n     words: first letter of each word\n     sentences: first letter of each sentence (default)\n     none: don't auto capitalize anything\n\nhttps://reactnative.dev/docs/textinput#autocapitalize",
      "name": "autoCapitalize",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"sentences\" | \"words\" | \"characters\""
      },
      "tags": {}
    },
    "autoCorrect": {
      "defaultValue": null,
      "description": "If false, disables auto-correct.\nThe default value is true.",
      "name": "autoCorrect",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "autoFocus": {
      "defaultValue": null,
      "description": "If true, focuses the input on componentDidMount.\nThe default value is false.",
      "name": "autoFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "blurOnSubmit": {
      "defaultValue": null,
      "description": "If true, the text field will blur when submitted.\nThe default value is true.",
      "name": "blurOnSubmit",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "caretHidden": {
      "defaultValue": null,
      "description": "If true, caret is hidden. The default value is false.",
      "name": "caretHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "contextMenuHidden": {
      "defaultValue": null,
      "description": "If true, context menu is hidden. The default value is false.",
      "name": "contextMenuHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "defaultValue": {
      "defaultValue": null,
      "description": "Provides an initial value that will change when the user starts typing.\nUseful for simple use-cases where you don't want to deal with listening to events\nand updating the value prop to keep the controlled state in sync.",
      "name": "defaultValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "editable": {
      "defaultValue": null,
      "description": "If false, text is not editable. The default value is true.",
      "name": "editable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "keyboardType": {
      "defaultValue": null,
      "description": "enum(\"default\", 'numeric', 'email-address', \"ascii-capable\", 'numbers-and-punctuation', 'url', 'number-pad', 'phone-pad', 'name-phone-pad',\n'decimal-pad', 'twitter', 'web-search', 'visible-password')\nDetermines which keyboard to open, e.g.numeric.\nThe following values work across platforms: - default - numeric - email-address - phone-pad\nThe following values work on iOS: - ascii-capable - numbers-and-punctuation - url - number-pad - name-phone-pad - decimal-pad - twitter - web-search\nThe following values work on Android: - visible-password",
      "name": "keyboardType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "KeyboardTypeOptions"
      },
      "tags": {}
    },
    "maxLength": {
      "defaultValue": null,
      "description": "Limits the maximum number of characters that can be entered.\nUse this instead of implementing the logic in JS to avoid flicker.",
      "name": "maxLength",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "multiline": {
      "defaultValue": null,
      "description": "If true, the text input can be multiple lines. The default value is false.",
      "name": "multiline",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "Callback that is called when the text input is blurred",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputFocusEventData>) => void"
      },
      "tags": {}
    },
    "onChange": {
      "defaultValue": null,
      "description": "Callback that is called when the text input's text changes.",
      "name": "onChange",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputChangeEventData>) => void"
      },
      "tags": {}
    },
    "onChangeText": {
      "defaultValue": null,
      "description": "Callback that is called when the text input's text changes.\nChanged text is passed as an argument to the callback handler.",
      "name": "onChangeText",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(text: string) => void"
      },
      "tags": {}
    },
    "onContentSizeChange": {
      "defaultValue": null,
      "description": "Callback that is called when the text input's content size changes.\nThis will be called with\n`{ nativeEvent: { contentSize: { width, height } } }`.\n\nOnly called for multiline text inputs.",
      "name": "onContentSizeChange",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputContentSizeChangeEventData>) => void"
      },
      "tags": {}
    },
    "onEndEditing": {
      "defaultValue": null,
      "description": "Callback that is called when text input ends.",
      "name": "onEndEditing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputEndEditingEventData>) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Callback that is called when a touch is engaged.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<NativeTouchEvent>) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Callback that is called when a touch is released.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<NativeTouchEvent>) => void"
      },
      "tags": {}
    },
    "onFocus": {
      "defaultValue": null,
      "description": "Callback that is called when the text input is focused",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputFocusEventData>) => void"
      },
      "tags": {}
    },
    "onSelectionChange": {
      "defaultValue": null,
      "description": "Callback that is called when the text input selection is changed.",
      "name": "onSelectionChange",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputSelectionChangeEventData>) => void"
      },
      "tags": {}
    },
    "onSubmitEditing": {
      "defaultValue": null,
      "description": "Callback that is called when the text input's submit button is pressed.",
      "name": "onSubmitEditing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputSubmitEditingEventData>) => void"
      },
      "tags": {}
    },
    "onTextInput": {
      "defaultValue": null,
      "description": "Callback that is called on new text input with the argument\n `{ nativeEvent: { text, previousText, range: { start, end } } }`.\n\nThis prop requires multiline={true} to be set.",
      "name": "onTextInput",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputTextInputEventData>) => void"
      },
      "tags": {}
    },
    "onScroll": {
      "defaultValue": null,
      "description": "Invoked on content scroll with\n `{ nativeEvent: { contentOffset: { x, y } } }`.\n\nMay also contain other properties from ScrollEvent but on Android contentSize is not provided for performance reasons.",
      "name": "onScroll",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputScrollEventData>) => void"
      },
      "tags": {}
    },
    "onKeyPress": {
      "defaultValue": null,
      "description": "Callback that is called when a key is pressed.\nThis will be called with\n `{ nativeEvent: { key: keyValue } }`\nwhere keyValue is 'Enter' or 'Backspace' for respective keys and the typed-in character otherwise including ' ' for space.\n\nFires before onChange callbacks.\nNote: on Android only the inputs from soft keyboard are handled, not the hardware keyboard inputs.",
      "name": "onKeyPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TextInputKeyPressEventData>) => void"
      },
      "tags": {}
    },
    "placeholder": {
      "defaultValue": null,
      "description": "The string that will be rendered before text input has been entered",
      "name": "placeholder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "placeholderTextColor": {
      "defaultValue": null,
      "description": "The text color of the placeholder string",
      "name": "placeholderTextColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "returnKeyType": {
      "defaultValue": null,
      "description": "enum('default', 'go', 'google', 'join', 'next', 'route', 'search', 'send', 'yahoo', 'done', 'emergency-call')\nDetermines how the return key should look.",
      "name": "returnKeyType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReturnKeyTypeOptions"
      },
      "tags": {}
    },
    "secureTextEntry": {
      "defaultValue": null,
      "description": "If true, the text input obscures the text entered so that sensitive text like passwords stay secure.\nThe default value is false.",
      "name": "secureTextEntry",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectTextOnFocus": {
      "defaultValue": null,
      "description": "If true, all text will automatically be selected on focus",
      "name": "selectTextOnFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selection": {
      "defaultValue": null,
      "description": "The start and end of the text input's selection. Set start and end to\nthe same value to position the cursor.",
      "name": "selection",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "{ start: number; end?: number; }"
      },
      "tags": {}
    },
    "selectionColor": {
      "defaultValue": null,
      "description": "The highlight (and cursor on ios) color of the text input",
      "name": "selectionColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Styles",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "textAlign": {
      "defaultValue": null,
      "description": "Align the input text to the left, center, or right sides of the input field.",
      "name": "textAlign",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"center\" | \"left\" | \"right\""
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "inputAccessoryViewID": {
      "defaultValue": null,
      "description": "Used to connect to an InputAccessoryView. Not part of react-natives documentation, but present in examples and\ncode.\nSee https://reactnative.dev/docs/inputaccessoryview for more information.",
      "name": "inputAccessoryViewID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "value": {
      "defaultValue": null,
      "description": "The value to show for the text input. TextInput is a controlled component,\nwhich means the native value will be forced to match this value prop if provided.\nFor most uses this works great, but in some cases this may cause flickering - one common cause is preventing edits by keeping value the same.\nIn addition to simply setting the same value, either set editable={false},\nor set/update maxLength to prevent unwanted edits without flicker.",
      "name": "value",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "maxFontSizeMultiplier": {
      "defaultValue": null,
      "description": "Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n- null/undefined (default): inherit from the parent node or the global default (0)\n- 0: no max, ignore parent/global default\n- >= 1: sets the maxFontSizeMultiplier of this node to this value",
      "name": "maxFontSizeMultiplier",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "clearButtonMode": {
      "defaultValue": null,
      "description": "enum('never', 'while-editing', 'unless-editing', 'always')\nWhen the clear button should appear on the right side of the text view",
      "name": "clearButtonMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"never\" | \"while-editing\" | \"unless-editing\" | \"always\""
      },
      "tags": {}
    },
    "clearTextOnFocus": {
      "defaultValue": null,
      "description": "If true, clears the text field automatically when editing begins",
      "name": "clearTextOnFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "dataDetectorTypes": {
      "defaultValue": null,
      "description": "Determines the types of data converted to clickable URLs in the text input.\nOnly valid if `multiline={true}` and `editable={false}`.\nBy default no data types are detected.\n\nYou can provide one type or an array of many types.\n\nPossible values for `dataDetectorTypes` are:\n\n- `'phoneNumber'`\n- `'link'`\n- `'address'`\n- `'calendarEvent'`\n- `'none'`\n- `'all'`",
      "name": "dataDetectorTypes",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "DataDetectorTypes | DataDetectorTypes[]"
      },
      "tags": {}
    },
    "enablesReturnKeyAutomatically": {
      "defaultValue": null,
      "description": "If true, the keyboard disables the return key when there is no text and automatically enables it when there is text.\nThe default value is false.",
      "name": "enablesReturnKeyAutomatically",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "keyboardAppearance": {
      "defaultValue": null,
      "description": "Determines the color of the keyboard.",
      "name": "keyboardAppearance",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"default\" | \"light\" | \"dark\""
      },
      "tags": {}
    },
    "passwordRules": {
      "defaultValue": null,
      "description": "Provide rules for your password.\nFor example, say you want to require a password with at least eight characters consisting of a mix of uppercase and lowercase letters, at least one number, and at most two consecutive characters.\n\"required: upper; required: lower; required: digit; max-consecutive: 2; minlength: 8;\"",
      "name": "passwordRules",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "rejectResponderTermination": {
      "defaultValue": null,
      "description": "If `true`, allows TextInput to pass touch events to the parent component.\nThis allows components to be swipeable from the TextInput on iOS,\nas is the case on Android by default.\nIf `false`, TextInput always asks to handle the input (except when disabled).",
      "name": "rejectResponderTermination",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectionState": {
      "defaultValue": null,
      "description": "See DocumentSelectionState.js, some state that is responsible for maintaining selection information for a document",
      "name": "selectionState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "DocumentSelectionState"
      },
      "tags": {}
    },
    "spellCheck": {
      "defaultValue": null,
      "description": "If false, disables spell-check style (i.e. red underlines). The default value is inherited from autoCorrect",
      "name": "spellCheck",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "textContentType": {
      "defaultValue": null,
      "description": "Give the keyboard and the system information about the expected\nsemantic meaning for the content that users enter.\n\nFor iOS 11+ you can set `textContentType` to `username` or `password` to\nenable autofill of login details from the device keychain.\n\nFor iOS 12+ `newPassword` can be used to indicate a new password input the\nuser may want to save in the keychain, and `oneTimeCode` can be used to indicate\nthat a field can be autofilled by a code arriving in an SMS.\n\nTo disable autofill, set textContentType to `none`.\n\nPossible values for `textContentType` are:\n\n - `'none'`\n - `'URL'`\n - `'addressCity'`\n - `'addressCityAndState'`\n - `'addressState'`\n - `'countryName'`\n - `'creditCardNumber'`\n - `'emailAddress'`\n - `'familyName'`\n - `'fullStreetAddress'`\n - `'givenName'`\n - `'jobTitle'`\n - `'location'`\n - `'middleName'`\n - `'name'`\n - `'namePrefix'`\n - `'nameSuffix'`\n - `'nickname'`\n - `'organizationName'`\n - `'postalCode'`\n - `'streetAddressLine1'`\n - `'streetAddressLine2'`\n - `'sublocality'`\n - `'telephoneNumber'`\n - `'username'`\n - `'password'`\n - `'newPassword'`\n - `'oneTimeCode'`",
      "name": "textContentType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"name\" | \"none\" | \"URL\" | \"addressCity\" | \"addressCityAndState\" | \"addressState\" | \"countryName\" | \"creditCardNumber\" | \"emailAddress\" | \"familyName\" | \"fullStreetAddress\" | ... 16 more ... | \"oneTimeCode\""
      },
      "tags": {}
    },
    "scrollEnabled": {
      "defaultValue": null,
      "description": "If false, scrolling of the text view will be disabled. The default value is true. Only works with multiline={true}",
      "name": "scrollEnabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputIOSProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputIOSProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "autoComplete": {
      "defaultValue": null,
      "description": "Specifies autocomplete hints for the system, so it can provide autofill. On Android, the system will always attempt to offer autofill by using heuristics to identify the type of content.\nTo disable autocomplete, set `autoComplete` to `off`.\n\n*Android Only*\n\nPossible values for `autoComplete` are:\n\n- `birthdate-day`\n- `birthdate-full`\n- `birthdate-month`\n- `birthdate-year`\n- `cc-csc`\n- `cc-exp`\n- `cc-exp-day`\n- `cc-exp-month`\n- `cc-exp-year`\n- `cc-number`\n- `email`\n- `gender`\n- `name`\n- `name-family`\n- `name-given`\n- `name-middle`\n- `name-middle-initial`\n- `name-prefix`\n- `name-suffix`\n- `password`\n- `password-new`\n- `postal-address`\n- `postal-address-country`\n- `postal-address-extended`\n- `postal-address-extended-postal-code`\n- `postal-address-locality`\n- `postal-address-region`\n- `postal-code`\n- `street-address`\n- `sms-otp`\n- `tel`\n- `tel-country-code`\n- `tel-national`\n- `tel-device`\n- `username`\n- `username-new`\n- `off`",
      "name": "autoComplete",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"name\" | \"email\" | \"username\" | \"password\" | \"birthdate-day\" | \"birthdate-full\" | \"birthdate-month\" | \"birthdate-year\" | \"cc-csc\" | \"cc-exp\" | \"cc-exp-day\" | \"cc-exp-month\" | ... 24 more ... | \"off\""
      },
      "tags": {}
    },
    "importantForAutofill": {
      "defaultValue": null,
      "description": "Determines whether the individual fields in your app should be included in a\nview structure for autofill purposes on Android API Level 26+. Defaults to auto.\nTo disable auto complete, use `off`.\n\n*Android Only*\n\nThe following values work on Android only:\n\n- `auto` - let Android decide\n- `no` - not important for autofill\n- `noExcludeDescendants` - this view and its children aren't important for autofill\n- `yes` - is important for autofill\n- `yesExcludeDescendants` - this view is important for autofill but its children aren't",
      "name": "importantForAutofill",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"noExcludeDescendants\" | \"yesExcludeDescendants\""
      },
      "tags": {}
    },
    "disableFullscreenUI": {
      "defaultValue": null,
      "description": "When false, if there is a small amount of space available around a text input (e.g. landscape orientation on a phone),\n  the OS may choose to have the user edit the text inside of a full screen text input mode.\nWhen true, this feature is disabled and users will always edit the text directly inside of the text input.\nDefaults to false.",
      "name": "disableFullscreenUI",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "inlineImageLeft": {
      "defaultValue": null,
      "description": "If defined, the provided image resource will be rendered on the left.",
      "name": "inlineImageLeft",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "inlineImagePadding": {
      "defaultValue": null,
      "description": "Padding between the inline image, if any, and the text input itself.",
      "name": "inlineImagePadding",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "numberOfLines": {
      "defaultValue": null,
      "description": "Sets the number of lines for a TextInput.\nUse it with multiline set to true to be able to fill the lines.",
      "name": "numberOfLines",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "returnKeyLabel": {
      "defaultValue": null,
      "description": "Sets the return key to the label. Use it instead of `returnKeyType`.",
      "name": "returnKeyLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {
        "platform": "android"
      }
    },
    "textBreakStrategy": {
      "defaultValue": null,
      "description": "Set text break strategy on Android API Level 23+, possible values are simple, highQuality, balanced\nThe default value is simple.",
      "name": "textBreakStrategy",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"simple\" | \"highQuality\" | \"balanced\""
      },
      "tags": {}
    },
    "underlineColorAndroid": {
      "defaultValue": null,
      "description": "The color of the textInput underline.",
      "name": "underlineColorAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "textAlignVertical": {
      "defaultValue": null,
      "description": "Vertically align text when `multiline` is set to true",
      "name": "textAlignVertical",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"center\" | \"top\" | \"bottom\""
      },
      "tags": {}
    },
    "showSoftInputOnFocus": {
      "defaultValue": null,
      "description": "When false, it will prevent the soft keyboard from showing when the field is focused. The default value is true",
      "name": "showSoftInputOnFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextInputAndroidProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        },
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextInputAndroidProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ref": {
      "defaultValue": null,
      "description": "",
      "name": "ref",
      "parent": {
        "fileName": "rne/node_modules/@types/react/index.d.ts",
        "name": "RefAttributes"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Ref<TextInput>"
      },
      "tags": {}
    },
    "key": {
      "defaultValue": null,
      "description": "",
      "name": "key",
      "parent": {
        "fileName": "rne/node_modules/@types/react/index.d.ts",
        "name": "Attributes"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        },
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "Attributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Key"
      },
      "tags": {}
    },
    "platform": {
      "defaultValue": {
        "value": "default"
      },
      "description": "",
      "name": "platform",
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"default\" | \"android\" | \"ios\""
      },
      "tags": {
        "default": "default"
      }
    },
    "lightTheme": {
      "defaultValue": null,
      "description": "",
      "name": "lightTheme",
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "round": {
      "defaultValue": null,
      "description": "",
      "name": "round",
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "cancelIcon": {
      "defaultValue": null,
      "description": "",
      "name": "cancelIcon",
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "onCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onCancel",
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(() => any) | (() => any)"
      },
      "tags": {}
    },
    "cancelButtonProps": {
      "defaultValue": null,
      "description": "",
      "name": "cancelButtonProps",
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "cancelButtonTitle": {
      "defaultValue": null,
      "description": "",
      "name": "cancelButtonTitle",
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "showCancel": {
      "defaultValue": null,
      "description": "Show cancel",
      "name": "showCancel",
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SearchBar/types.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    }
  },
  "Skeleton": {
    "circle": {
      "defaultValue": null,
      "description": "show circular variant",
      "name": "circle",
      "parent": {
        "fileName": "rne/packages/base/src/Skeleton/Skeleton.tsx",
        "name": "SkeletonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Skeleton/Skeleton.tsx",
          "name": "SkeletonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "width": {
      "defaultValue": {
        "value": "100%"
      },
      "description": "Width of Skeleton View",
      "name": "width",
      "parent": {
        "fileName": "rne/packages/base/src/Skeleton/Skeleton.tsx",
        "name": "SkeletonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Skeleton/Skeleton.tsx",
          "name": "SkeletonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "height": {
      "defaultValue": {
        "value": "12"
      },
      "description": "Height of Skeleton View",
      "name": "height",
      "parent": {
        "fileName": "rne/packages/base/src/Skeleton/Skeleton.tsx",
        "name": "SkeletonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Skeleton/Skeleton.tsx",
          "name": "SkeletonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "default": "12"
      }
    },
    "animation": {
      "defaultValue": {
        "value": "pulse"
      },
      "description": "Type of animation",
      "name": "animation",
      "parent": {
        "fileName": "rne/packages/base/src/Skeleton/Skeleton.tsx",
        "name": "SkeletonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Skeleton/Skeleton.tsx",
          "name": "SkeletonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"pulse\" | \"wave\""
      },
      "tags": {}
    },
    "skeletonStyle": {
      "defaultValue": null,
      "description": "Custom style for skeleton gradient",
      "name": "skeletonStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Skeleton/Skeleton.tsx",
        "name": "SkeletonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Skeleton/Skeleton.tsx",
          "name": "SkeletonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "LinearGradientComponent": {
      "defaultValue": null,
      "description": "Custom Linear Gradient Component",
      "name": "LinearGradientComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Skeleton/Skeleton.tsx",
        "name": "SkeletonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Skeleton/Skeleton.tsx",
          "name": "SkeletonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {
        "type": "React Component"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    }
  },
  "Slider": {
    "value": {
      "defaultValue": {
        "value": "0"
      },
      "description": "Initial value of the slider.",
      "name": "value",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "If true the user won't be able to move the slider.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "minimumValue": {
      "defaultValue": {
        "value": "0"
      },
      "description": "Initial minimum value of the slider.",
      "name": "minimumValue",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "maximumValue": {
      "defaultValue": {
        "value": "1"
      },
      "description": "Initial maximum value of the slider.",
      "name": "maximumValue",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "step": {
      "defaultValue": {
        "value": "0"
      },
      "description": "Step value of the slider. The value should be between 0 and maximumValue - minimumValue).",
      "name": "step",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "minimumTrackTintColor": {
      "defaultValue": {
        "value": "#3f3f3f"
      },
      "description": "The color used for the track to the left of the button.",
      "name": "minimumTrackTintColor",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "maximumTrackTintColor": {
      "defaultValue": {
        "value": "#b3b3b3"
      },
      "description": "The color used for the track to the right of the button.",
      "name": "maximumTrackTintColor",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "allowTouchTrack": {
      "defaultValue": {
        "value": "false"
      },
      "description": "If true, thumb will respond and jump to any touch along the track.",
      "name": "allowTouchTrack",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "thumbTintColor": {
      "defaultValue": {
        "value": "red"
      },
      "description": "The color used for the thumb.",
      "name": "thumbTintColor",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "thumbTouchSize": {
      "defaultValue": {
        "value": "{ width: THUMB_SIZE, height: THUMB_SIZE }"
      },
      "description": "The size of the touch area that allows moving the thumb. The touch area has the same center as the visible thumb. This allows to have a visually small thumb while still allowing the user to move it easily.",
      "name": "thumbTouchSize",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Sizable"
      },
      "tags": {}
    },
    "onValueChange": {
      "defaultValue": null,
      "description": "Callback continuously called while the user is dragging the slider.",
      "name": "onValueChange",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(value: number) => void"
      },
      "tags": {}
    },
    "onSlidingStart": {
      "defaultValue": null,
      "description": "Callback called when the user starts changing the value (e.g. when the slider is pressed).",
      "name": "onSlidingStart",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(value: number) => void"
      },
      "tags": {}
    },
    "onSlidingComplete": {
      "defaultValue": null,
      "description": "Callback called when the user finishes changing the value (e.g. when the slider is released).",
      "name": "onSlidingComplete",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(value: number) => void"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "The style applied to the slider container.",
      "name": "style",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "trackStyle": {
      "defaultValue": null,
      "description": "The style applied to the track.",
      "name": "trackStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "thumbStyle": {
      "defaultValue": null,
      "description": "The style applied to the thumb.",
      "name": "thumbStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "thumbProps": {
      "defaultValue": null,
      "description": "The props applied to the thumb. Uses `Component` prop which can accept `Animated` components.",
      "name": "thumbProps",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      },
      "tags": {}
    },
    "debugTouchArea": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Set this to true to visually see the thumb touch rect in green.",
      "name": "debugTouchArea",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "animateTransitions": {
      "defaultValue": null,
      "description": "Set to true if you want to use the default 'spring' animation.",
      "name": "animateTransitions",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "animationType": {
      "defaultValue": {
        "value": "timing"
      },
      "description": "Set to 'spring' or 'timing' to use one of those two types of animations with the default [animation properties](https://reactnative.dev/docs/animations.html).",
      "name": "animationType",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"spring\" | \"timing\""
      },
      "tags": {}
    },
    "orientation": {
      "defaultValue": {
        "value": "horizontal"
      },
      "description": "Set the orientation of the slider.",
      "name": "orientation",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"vertical\" | \"horizontal\""
      },
      "tags": {}
    },
    "animationConfig": {
      "defaultValue": null,
      "description": "Used to configure the animation parameters. These are the same parameters in the [Animated library](https://reactnative.dev/docs/animations.html).",
      "name": "animationConfig",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TimingAnimationConfig | SpringAnimationConfig"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Apply style to the container of the slider.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Slider/Slider.tsx",
        "name": "SliderProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Slider/Slider.tsx",
          "name": "SliderProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Style"
      },
      "tags": {
        "type": "Style"
      }
    }
  },
  "SocialIcon": {
    "Component": {
      "defaultValue": {
        "value": "`Press handlers present then Pressable else View`"
      },
      "description": "Type of button.",
      "name": "Component",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {
        "default": "`Press handlers present then Pressable else View`"
      }
    },
    "type": {
      "defaultValue": null,
      "description": "Social media type.",
      "name": "type",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "SocialMediaType"
      },
      "tags": {}
    },
    "button": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Creates button with a social icon.",
      "name": "button",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "iconType": {
      "defaultValue": {
        "value": "font-awesome"
      },
      "description": "Type of icon set. [Supported sets here](icon#available-icon-sets).",
      "name": "iconType",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "iconStyle": {
      "defaultValue": null,
      "description": "Extra styling for icon component.",
      "name": "iconStyle",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Adds styling to the button.",
      "name": "style",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "iconColor": {
      "defaultValue": {
        "value": "white"
      },
      "description": "Specify the color of the icon.",
      "name": "iconColor",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "underlayColor": {
      "defaultValue": null,
      "description": "Add Underlay color.",
      "name": "underlayColor",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "title": {
      "defaultValue": null,
      "description": "Title if made into a button.",
      "name": "title",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "raised": {
      "defaultValue": {
        "value": "true"
      },
      "description": "Raised adds a drop shadow, set to false to remove.",
      "name": "raised",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disables the button, if true.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "loading": {
      "defaultValue": null,
      "description": "Shows loading indicator.",
      "name": "loading",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "activityIndicatorStyle": {
      "defaultValue": null,
      "description": "Style to render when in loading state.",
      "name": "activityIndicatorStyle",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "small": {
      "defaultValue": null,
      "description": "Decides the size of the activity indicator.",
      "name": "small",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "iconSize": {
      "defaultValue": {
        "value": "24"
      },
      "description": "Specify the size of the icon.",
      "name": "iconSize",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "light": {
      "defaultValue": null,
      "description": "Reverses icon color scheme, setting background to white and icon to primary color.",
      "name": "light",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "fontWeight": {
      "defaultValue": null,
      "description": "Specify font weight of title if set as a button with a title.",
      "name": "fontWeight",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "fontStyle": {
      "defaultValue": null,
      "description": "Specify text styling.",
      "name": "fontStyle",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "fontFamily": {
      "defaultValue": null,
      "description": "Specify different font family.",
      "name": "fontFamily",
      "parent": {
        "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
        "name": "SocialIconProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SocialIcon/SocialIcon.tsx",
          "name": "SocialIconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "GestureResponderEventHandler"
      },
      "tags": {
        "type": "GestureResponderEventHandler"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "parent": {
        "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
        "name": "InlinePressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/helpers/InlinePressableProps.tsx",
          "name": "InlinePressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      },
      "tags": {
        "default": "None",
        "type": "PressableProps except click handlers"
      }
    }
  },
  "SpeedDial.Action": {
    "labelPressable": {
      "defaultValue": null,
      "description": "onPress on Label Press",
      "name": "labelPressable",
      "parent": {
        "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.Action.tsx",
        "name": "SpeedDialActionProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.Action.tsx",
          "name": "SpeedDialActionProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "type": {
      "defaultValue": null,
      "description": "Type of button.",
      "name": "type",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"solid\" | \"clear\" | \"outline\""
      },
      "tags": {}
    },
    "raised": {
      "defaultValue": null,
      "description": "Add raised button styling (optional). Has no effect if `type=\"clear\"`.",
      "name": "raised",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for Component container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disables user interaction.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style of the button when disabled.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when the touch is released,\nbut not if cancelled (e.g. by a scroll that steals the responder lock).",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "color": {
      "defaultValue": null,
      "description": "Change the color of the FAB.",
      "name": "color",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Style for FAB",
      "name": "style",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n{nativeEvent: {layout: {x, y, width, height}}}",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Determines what the opacity of the wrapped view should be when touch is active.\nDefaults to 0.2",
      "name": "activeOpacity",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Delay in ms, from onPressIn, before onLongPress is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressIn": {
      "defaultValue": null,
      "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
      "name": "delayPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressOut": {
      "defaultValue": null,
      "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
      "name": "delayPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far your touch can start away from the button.\nThis is added to pressRetentionOffset when moving off of the button.\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch hits\ntwo overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"blur\" occurs, meaning the element lost focus.\nSome platforms may not have the concept of blur.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "onFocus": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"focus\" occurs. Some platforms may not have\nthe concept of focus.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "When the scroll view is disabled, this defines how far your\ntouch may move off of the button, before deactivating the button.\nOnce deactivated, try moving it back and you'll see that the button\nis once again reactivated! Move it back and forth several times\nwhile the scroll view is disabled. Ensure you pass in a constant\nto reduce memory allocations.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "touchSoundDisabled": {
      "defaultValue": null,
      "description": "If true, doesn't play a system sound on touch.",
      "name": "touchSoundDisabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "android"
      }
    },
    "background": {
      "defaultValue": null,
      "description": "Determines the type of background drawable that's going to be used to display feedback.\nIt takes an object with type property and extra data depending on the type.\nIt's recommended to use one of the following static methods to generate that dictionary:\n     1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n        default background for selectable elements (?android:attr/selectableItemBackground)\n     2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n        theme's default background for borderless selectable elements\n        (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n        with specified color (as a string). If property borderless evaluates to true the ripple will render\n        outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n        type is available on Android API level 21+",
      "name": "background",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "BackgroundPropType"
      },
      "tags": {}
    },
    "useForeground": {
      "defaultValue": null,
      "description": "",
      "name": "useForeground",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* TV preferred focus (see documentation for the View component).",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "nextFocusDown": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates down. See the Android documentation.",
      "name": "nextFocusDown",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusForward": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates forward. See the Android documentation.",
      "name": "nextFocusForward",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusLeft": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates left. See the Android documentation.",
      "name": "nextFocusLeft",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusRight": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates right. See the Android documentation.",
      "name": "nextFocusRight",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusUp": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates up. See the Android documentation.",
      "name": "nextFocusUp",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n\nenabled: If true, parallax effects are enabled.  Defaults to true.\nshiftDistanceX: Defaults to 2.0.\nshiftDistanceY: Defaults to 2.0.\ntiltAngle: Defaults to 0.05.\nmagnification: Defaults to 1.0.\npressMagnification: Defaults to 1.0.\npressDuration: Defaults to 0.3.\npressDelay: Defaults to 0.0.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "android"
      }
    },
    "visible": {
      "defaultValue": null,
      "description": "Decide the visibility of the FAB.",
      "name": "visible",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "title": {
      "defaultValue": null,
      "description": "Add button title.",
      "name": "title",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ReactElement<{}, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Add additional styling for title component.",
      "name": "titleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "icon": {
      "defaultValue": null,
      "description": "Displays a centered icon (when no title) or to the left (with text). (can be used along with iconRight as well). Can be an object or a custom component.",
      "name": "icon",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "titleProps": {
      "defaultValue": null,
      "description": "Add additional props for Text component.",
      "name": "titleProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      },
      "tags": {}
    },
    "buttonStyle": {
      "defaultValue": null,
      "description": "Add additional styling for button component.",
      "name": "buttonStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "loading": {
      "defaultValue": null,
      "description": "Prop to display a loading spinner.",
      "name": "loading",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "loadingStyle": {
      "defaultValue": null,
      "description": "Add additional styling for loading component.",
      "name": "loadingStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "loadingProps": {
      "defaultValue": null,
      "description": "Add additional props for ActivityIndicator component.",
      "name": "loadingProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ActivityIndicatorProps"
      },
      "tags": {}
    },
    "iconContainerStyle": {
      "defaultValue": null,
      "description": "Styling for Icon Component container.",
      "name": "iconContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "iconRight": {
      "defaultValue": null,
      "description": "Displays Icon to the right of title. Needs to be used along with `icon` prop.",
      "name": "iconRight",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Displays a linear gradient. See [usage](#lineargradient-usage).",
      "name": "linearGradientProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      },
      "tags": {}
    },
    "TouchableComponent": {
      "defaultValue": null,
      "description": "Component for user interaction.",
      "name": "TouchableComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "typeof Component"
      },
      "tags": {}
    },
    "ViewComponent": {
      "defaultValue": null,
      "description": "Component for container.",
      "name": "ViewComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "disabledTitleStyle": {
      "defaultValue": null,
      "description": "Style of the title when disabled.",
      "name": "disabledTitleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "iconPosition": {
      "defaultValue": null,
      "description": "Displays Icon to the position mentioned. Needs to be used along with `icon` prop.",
      "name": "iconPosition",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\" | \"top\" | \"bottom\""
      },
      "tags": {}
    },
    "uppercase": {
      "defaultValue": null,
      "description": "Uppercase button title",
      "name": "uppercase",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "radius": {
      "defaultValue": null,
      "description": "Radius of button",
      "name": "radius",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | sm | md | lg"
      },
      "tags": {
        "type": "number | sm | md | lg"
      }
    },
    "placement": {
      "defaultValue": null,
      "description": "FAB placement at bottom, (optional) use [`style`](#style) in case of custom placement.",
      "name": "placement",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\""
      },
      "tags": {}
    },
    "upperCase": {
      "defaultValue": null,
      "description": "Transform Extended Label text to uppercase.",
      "name": "upperCase",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    }
  },
  "SpeedDial": {
    "isOpen": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Opens the action stack.",
      "name": "isOpen",
      "parent": {
        "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
        "name": "SpeedDialProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
          "name": "SpeedDialProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onOpen": {
      "defaultValue": {
        "value": "Function"
      },
      "description": "Callback fired when the component requests to be open.",
      "name": "onOpen",
      "parent": {
        "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
        "name": "SpeedDialProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
          "name": "SpeedDialProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onClose": {
      "defaultValue": {
        "value": "Function"
      },
      "description": "Callback fired when the component requests to be closed.",
      "name": "onClose",
      "parent": {
        "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
        "name": "SpeedDialProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
          "name": "SpeedDialProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "openIcon": {
      "defaultValue": null,
      "description": "Icon shown on FAB when action stack is open.",
      "name": "openIcon",
      "parent": {
        "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
        "name": "SpeedDialProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
          "name": "SpeedDialProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "overlayColor": {
      "defaultValue": null,
      "description": "Add overlay color to the speed dial.",
      "name": "overlayColor",
      "parent": {
        "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
        "name": "SpeedDialProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
          "name": "SpeedDialProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "children": {
      "defaultValue": null,
      "description": "SpeedDial Action as children.",
      "name": "children",
      "parent": {
        "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
        "name": "SpeedDialProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
          "name": "SpeedDialProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "SpeedDial.Action"
      },
      "tags": {
        "type": "SpeedDial.Action"
      }
    },
    "transitionDuration": {
      "defaultValue": {
        "value": "150"
      },
      "description": "The duration for the transition, in milliseconds.",
      "name": "transitionDuration",
      "parent": {
        "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
        "name": "SpeedDialProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
          "name": "SpeedDialProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "backdropPressableProps": {
      "defaultValue": null,
      "description": "Props for Backdrop Pressable",
      "name": "backdropPressableProps",
      "parent": {
        "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
        "name": "SpeedDialProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
          "name": "SpeedDialProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps"
      },
      "tags": {}
    },
    "labelPressable": {
      "defaultValue": null,
      "description": "onPress on Label Press for all Actions",
      "name": "labelPressable",
      "parent": {
        "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
        "name": "SpeedDialProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/SpeedDial/SpeedDial.tsx",
          "name": "SpeedDialProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "color": {
      "defaultValue": null,
      "description": "Change the color of the FAB.",
      "name": "color",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "size": {
      "defaultValue": null,
      "description": "Change Size of FAB.",
      "name": "size",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"small\" | \"large\""
      },
      "tags": {}
    },
    "placement": {
      "defaultValue": null,
      "description": "FAB placement at bottom, (optional) use [`style`](#style) in case of custom placement.",
      "name": "placement",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\""
      },
      "tags": {}
    },
    "visible": {
      "defaultValue": null,
      "description": "Decide the visibility of the FAB.",
      "name": "visible",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "upperCase": {
      "defaultValue": null,
      "description": "Transform Extended Label text to uppercase.",
      "name": "upperCase",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Style for FAB",
      "name": "style",
      "parent": {
        "fileName": "rne/packages/base/src/FAB/FAB.tsx",
        "name": "FABProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/FAB/FAB.tsx",
          "name": "FABProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "type": {
      "defaultValue": null,
      "description": "Type of button.",
      "name": "type",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"solid\" | \"clear\" | \"outline\""
      },
      "tags": {}
    },
    "raised": {
      "defaultValue": null,
      "description": "Add raised button styling (optional). Has no effect if `type=\"clear\"`.",
      "name": "raised",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for Component container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disables user interaction.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style of the button when disabled.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when the touch is released,\nbut not if cancelled (e.g. by a scroll that steals the responder lock).",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n{nativeEvent: {layout: {x, y, width, height}}}",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Determines what the opacity of the wrapped view should be when touch is active.\nDefaults to 0.2",
      "name": "activeOpacity",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Delay in ms, from onPressIn, before onLongPress is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressIn": {
      "defaultValue": null,
      "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
      "name": "delayPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressOut": {
      "defaultValue": null,
      "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
      "name": "delayPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far your touch can start away from the button.\nThis is added to pressRetentionOffset when moving off of the button.\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch hits\ntwo overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"blur\" occurs, meaning the element lost focus.\nSome platforms may not have the concept of blur.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "onFocus": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"focus\" occurs. Some platforms may not have\nthe concept of focus.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "When the scroll view is disabled, this defines how far your\ntouch may move off of the button, before deactivating the button.\nOnce deactivated, try moving it back and you'll see that the button\nis once again reactivated! Move it back and forth several times\nwhile the scroll view is disabled. Ensure you pass in a constant\nto reduce memory allocations.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "touchSoundDisabled": {
      "defaultValue": null,
      "description": "If true, doesn't play a system sound on touch.",
      "name": "touchSoundDisabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "android"
      }
    },
    "background": {
      "defaultValue": null,
      "description": "Determines the type of background drawable that's going to be used to display feedback.\nIt takes an object with type property and extra data depending on the type.\nIt's recommended to use one of the following static methods to generate that dictionary:\n     1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n        default background for selectable elements (?android:attr/selectableItemBackground)\n     2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n        theme's default background for borderless selectable elements\n        (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n        with specified color (as a string). If property borderless evaluates to true the ripple will render\n        outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n        type is available on Android API level 21+",
      "name": "background",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "BackgroundPropType"
      },
      "tags": {}
    },
    "useForeground": {
      "defaultValue": null,
      "description": "",
      "name": "useForeground",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* TV preferred focus (see documentation for the View component).",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "nextFocusDown": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates down. See the Android documentation.",
      "name": "nextFocusDown",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusForward": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates forward. See the Android documentation.",
      "name": "nextFocusForward",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusLeft": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates left. See the Android documentation.",
      "name": "nextFocusLeft",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusRight": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates right. See the Android documentation.",
      "name": "nextFocusRight",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusUp": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates up. See the Android documentation.",
      "name": "nextFocusUp",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n\nenabled: If true, parallax effects are enabled.  Defaults to true.\nshiftDistanceX: Defaults to 2.0.\nshiftDistanceY: Defaults to 2.0.\ntiltAngle: Defaults to 0.05.\nmagnification: Defaults to 1.0.\npressMagnification: Defaults to 1.0.\npressDuration: Defaults to 0.3.\npressDelay: Defaults to 0.0.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "android"
      }
    },
    "title": {
      "defaultValue": null,
      "description": "Add button title.",
      "name": "title",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ReactElement<{}, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Add additional styling for title component.",
      "name": "titleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "icon": {
      "defaultValue": null,
      "description": "Displays a centered icon (when no title) or to the left (with text). (can be used along with iconRight as well). Can be an object or a custom component.",
      "name": "icon",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "titleProps": {
      "defaultValue": null,
      "description": "Add additional props for Text component.",
      "name": "titleProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      },
      "tags": {}
    },
    "buttonStyle": {
      "defaultValue": null,
      "description": "Add additional styling for button component.",
      "name": "buttonStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "loading": {
      "defaultValue": null,
      "description": "Prop to display a loading spinner.",
      "name": "loading",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "loadingStyle": {
      "defaultValue": null,
      "description": "Add additional styling for loading component.",
      "name": "loadingStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "loadingProps": {
      "defaultValue": null,
      "description": "Add additional props for ActivityIndicator component.",
      "name": "loadingProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ActivityIndicatorProps"
      },
      "tags": {}
    },
    "iconContainerStyle": {
      "defaultValue": null,
      "description": "Styling for Icon Component container.",
      "name": "iconContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "iconRight": {
      "defaultValue": null,
      "description": "Displays Icon to the right of title. Needs to be used along with `icon` prop.",
      "name": "iconRight",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Displays a linear gradient. See [usage](#lineargradient-usage).",
      "name": "linearGradientProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      },
      "tags": {}
    },
    "TouchableComponent": {
      "defaultValue": null,
      "description": "Component for user interaction.",
      "name": "TouchableComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "typeof Component"
      },
      "tags": {}
    },
    "ViewComponent": {
      "defaultValue": null,
      "description": "Component for container.",
      "name": "ViewComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "disabledTitleStyle": {
      "defaultValue": null,
      "description": "Style of the title when disabled.",
      "name": "disabledTitleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "iconPosition": {
      "defaultValue": null,
      "description": "Displays Icon to the position mentioned. Needs to be used along with `icon` prop.",
      "name": "iconPosition",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\" | \"top\" | \"bottom\""
      },
      "tags": {}
    },
    "uppercase": {
      "defaultValue": null,
      "description": "Uppercase button title",
      "name": "uppercase",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "radius": {
      "defaultValue": null,
      "description": "Radius of button",
      "name": "radius",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | sm | md | lg"
      },
      "tags": {
        "type": "number | sm | md | lg"
      }
    }
  },
  "Switch": {
    "color": {
      "defaultValue": {
        "value": "primary"
      },
      "description": "The color of the Switch component.",
      "name": "color",
      "parent": {
        "fileName": "rne/packages/base/src/Switch/Switch.tsx",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Switch/Switch.tsx",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "thumbColor": {
      "defaultValue": null,
      "description": "Color of the foreground switch grip.",
      "name": "thumbColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "trackColor": {
      "defaultValue": null,
      "description": "Custom colors for the switch track\n\nColor when false and color when true",
      "name": "trackColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "{ false?: ColorValue; true?: ColorValue; }"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": {
        "value": "false"
      },
      "description": "If true the user won't be able to toggle the switch.\nDefault value is false.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onChange": {
      "defaultValue": null,
      "description": "Invoked with the the change event as an argument when the value changes.",
      "name": "onChange",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: SwitchChangeEvent) => void | Promise<void>"
      },
      "tags": {}
    },
    "onValueChange": {
      "defaultValue": null,
      "description": "Invoked with the new value when the value changes.",
      "name": "onValueChange",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(value: boolean) => void | Promise<void>"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "value": {
      "defaultValue": {
        "value": "false"
      },
      "description": "The value of the switch. If true the switch will be turned on.\nDefault value is false.",
      "name": "value",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ios_backgroundColor": {
      "defaultValue": null,
      "description": "On iOS, custom color for the background.\nCan be seen when the switch value is false or when the switch is disabled.",
      "name": "ios_backgroundColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onTintColor": {
      "defaultValue": null,
      "description": "Background color when the switch is turned on.",
      "name": "onTintColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {
        "deprecated": "use trackColor instead"
      }
    },
    "thumbTintColor": {
      "defaultValue": null,
      "description": "Color of the foreground switch grip.",
      "name": "thumbTintColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {
        "deprecated": "use thumbColor instead"
      }
    },
    "tintColor": {
      "defaultValue": null,
      "description": "Background color when the switch is turned off.",
      "name": "tintColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {
        "deprecated": "use trackColor instead"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    }
  },
  "Tab.Item": {
    "active": {
      "defaultValue": null,
      "description": "Allows to define if TabItem is active.",
      "name": "active",
      "parent": {
        "fileName": "rne/packages/base/src/Tab/Tab.Item.tsx",
        "name": "TabItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tab/Tab.Item.tsx",
          "name": "TabItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "variant": {
      "defaultValue": null,
      "description": "Define the background Variant.",
      "name": "variant",
      "parent": {
        "fileName": "rne/packages/base/src/Tab/Tab.Item.tsx",
        "name": "TabItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tab/Tab.Item.tsx",
          "name": "TabItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"primary\" | \"default\""
      },
      "tags": {}
    },
    "buttonStyle": {
      "defaultValue": null,
      "description": "Additional button style",
      "name": "buttonStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Tab/Tab.Item.tsx",
        "name": "TabItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tab/Tab.Item.tsx",
          "name": "TabItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "`ViewStyle or (active: boolean) => ViewStyle`"
      },
      "tags": {
        "type": "`ViewStyle or (active: boolean) => ViewStyle`"
      }
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Additional button title style",
      "name": "titleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Tab/Tab.Item.tsx",
        "name": "TabItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tab/Tab.Item.tsx",
          "name": "TabItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextStyle or (active: boolean) => TextStyle"
      },
      "tags": {
        "type": "TextStyle or (active: boolean) => TextStyle"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Additional Styling for button container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Tab/Tab.Item.tsx",
        "name": "TabItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tab/Tab.Item.tsx",
          "name": "TabItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ViewStyle or (active: boolean) => ViewStyle"
      },
      "tags": {
        "type": "ViewStyle or (active: boolean) => ViewStyle"
      }
    },
    "iconContainerStyle": {
      "defaultValue": null,
      "description": "Additional Styling for Icon Component container.",
      "name": "iconContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Tab/Tab.Item.tsx",
        "name": "TabItemProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tab/Tab.Item.tsx",
          "name": "TabItemProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ViewStyle or (active: boolean) => ViewStyle"
      },
      "tags": {
        "type": "ViewStyle or (active: boolean) => ViewStyle"
      }
    },
    "size": {
      "defaultValue": null,
      "description": "Button size",
      "name": "size",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"sm\" | \"md\" | \"lg\""
      },
      "tags": {}
    },
    "type": {
      "defaultValue": null,
      "description": "Type of button.",
      "name": "type",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"solid\" | \"clear\" | \"outline\""
      },
      "tags": {}
    },
    "raised": {
      "defaultValue": null,
      "description": "Add raised button styling (optional). Has no effect if `type=\"clear\"`.",
      "name": "raised",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disables user interaction.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style of the button when disabled.",
      "name": "disabledStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when the touch is released,\nbut not if cancelled (e.g. by a scroll that steals the responder lock).",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "color": {
      "defaultValue": null,
      "description": "Color of Button",
      "name": "color",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | primary | secondary | success | warning | error"
      },
      "tags": {
        "type": "string | primary | secondary | success | warning | error"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "//FIXME: not in doc but available in examples",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n{nativeEvent: {layout: {x, y, width, height}}}",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Determines what the opacity of the wrapped view should be when touch is active.\nDefaults to 0.2",
      "name": "activeOpacity",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Delay in ms, from onPressIn, before onLongPress is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressIn": {
      "defaultValue": null,
      "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
      "name": "delayPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "delayPressOut": {
      "defaultValue": null,
      "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
      "name": "delayPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far your touch can start away from the button.\nThis is added to pressRetentionOffset when moving off of the button.\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch hits\ntwo overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"blur\" occurs, meaning the element lost focus.\nSome platforms may not have the concept of blur.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "onFocus": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"focus\" occurs. Some platforms may not have\nthe concept of focus.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "When the scroll view is disabled, this defines how far your\ntouch may move off of the button, before deactivating the button.\nOnce deactivated, try moving it back and you'll see that the button\nis once again reactivated! Move it back and forth several times\nwhile the scroll view is disabled. Ensure you pass in a constant\nto reduce memory allocations.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "touchSoundDisabled": {
      "defaultValue": null,
      "description": "If true, doesn't play a system sound on touch.",
      "name": "touchSoundDisabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "android"
      }
    },
    "background": {
      "defaultValue": null,
      "description": "Determines the type of background drawable that's going to be used to display feedback.\nIt takes an object with type property and extra data depending on the type.\nIt's recommended to use one of the following static methods to generate that dictionary:\n     1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n        default background for selectable elements (?android:attr/selectableItemBackground)\n     2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n        theme's default background for borderless selectable elements\n        (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n        with specified color (as a string). If property borderless evaluates to true the ripple will render\n        outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n        type is available on Android API level 21+",
      "name": "background",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "BackgroundPropType"
      },
      "tags": {}
    },
    "useForeground": {
      "defaultValue": null,
      "description": "",
      "name": "useForeground",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* TV preferred focus (see documentation for the View component).",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "nextFocusDown": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates down. See the Android documentation.",
      "name": "nextFocusDown",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusForward": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates forward. See the Android documentation.",
      "name": "nextFocusForward",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusLeft": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates left. See the Android documentation.",
      "name": "nextFocusLeft",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusRight": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates right. See the Android documentation.",
      "name": "nextFocusRight",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "nextFocusUp": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates up. See the Android documentation.",
      "name": "nextFocusUp",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "android"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n\nenabled: If true, parallax effects are enabled.  Defaults to true.\nshiftDistanceX: Defaults to 2.0.\nshiftDistanceY: Defaults to 2.0.\ntiltAngle: Defaults to 0.05.\nmagnification: Defaults to 1.0.\npressMagnification: Defaults to 1.0.\npressDuration: Defaults to 0.3.\npressDelay: Defaults to 0.0.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "android"
      }
    },
    "title": {
      "defaultValue": null,
      "description": "Add button title.",
      "name": "title",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ReactElement<{}, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "icon": {
      "defaultValue": null,
      "description": "Displays a centered icon (when no title) or to the left (with text). (can be used along with iconRight as well). Can be an object or a custom component.",
      "name": "icon",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconNode"
      },
      "tags": {}
    },
    "titleProps": {
      "defaultValue": null,
      "description": "Add additional props for Text component.",
      "name": "titleProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      },
      "tags": {}
    },
    "loading": {
      "defaultValue": null,
      "description": "Prop to display a loading spinner.",
      "name": "loading",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "loadingStyle": {
      "defaultValue": null,
      "description": "Add additional styling for loading component.",
      "name": "loadingStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "loadingProps": {
      "defaultValue": null,
      "description": "Add additional props for ActivityIndicator component.",
      "name": "loadingProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ActivityIndicatorProps"
      },
      "tags": {}
    },
    "iconRight": {
      "defaultValue": null,
      "description": "Displays Icon to the right of title. Needs to be used along with `icon` prop.",
      "name": "iconRight",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Displays a linear gradient. See [usage](#lineargradient-usage).",
      "name": "linearGradientProps",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      },
      "tags": {}
    },
    "TouchableComponent": {
      "defaultValue": null,
      "description": "Component for user interaction.",
      "name": "TouchableComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "typeof Component"
      },
      "tags": {}
    },
    "ViewComponent": {
      "defaultValue": null,
      "description": "Component for container.",
      "name": "ViewComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "React Component"
      },
      "tags": {}
    },
    "disabledTitleStyle": {
      "defaultValue": null,
      "description": "Style of the title when disabled.",
      "name": "disabledTitleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "iconPosition": {
      "defaultValue": {
        "value": "top"
      },
      "description": "Displays Icon to the position mentioned. Needs to be used along with `icon` prop.",
      "name": "iconPosition",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\" | \"top\" | \"bottom\""
      },
      "tags": {}
    },
    "uppercase": {
      "defaultValue": null,
      "description": "Uppercase button title",
      "name": "uppercase",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "radius": {
      "defaultValue": null,
      "description": "Radius of button",
      "name": "radius",
      "parent": {
        "fileName": "rne/packages/base/src/Button/Button.tsx",
        "name": "ButtonProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Button/Button.tsx",
          "name": "ButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | sm | md | lg"
      },
      "tags": {
        "type": "number | sm | md | lg"
      }
    }
  },
  "Tab": {
    "value": {
      "defaultValue": null,
      "description": "Child position index value.",
      "name": "value",
      "parent": {
        "fileName": "rne/packages/base/src/Tab/Tab.tsx",
        "name": "TabProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tab/Tab.tsx",
          "name": "TabProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "scrollable": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Makes Tab Scrolling",
      "name": "scrollable",
      "parent": {
        "fileName": "rne/packages/base/src/Tab/Tab.tsx",
        "name": "TabProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tab/Tab.tsx",
          "name": "TabProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "onChange": {
      "defaultValue": {
        "value": "Function"
      },
      "description": "On Index Change Callback.",
      "name": "onChange",
      "parent": {
        "fileName": "rne/packages/base/src/Tab/Tab.tsx",
        "name": "TabProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tab/Tab.tsx",
          "name": "TabProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(value: number) => void"
      },
      "tags": {}
    },
    "disableIndicator": {
      "defaultValue": null,
      "description": "Disable the indicator below.",
      "name": "disableIndicator",
      "parent": {
        "fileName": "rne/packages/base/src/Tab/Tab.tsx",
        "name": "TabProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tab/Tab.tsx",
          "name": "TabProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "indicatorStyle": {
      "defaultValue": null,
      "description": "Additional styling for tab indicator.",
      "name": "indicatorStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Tab/Tab.tsx",
        "name": "TabProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tab/Tab.tsx",
          "name": "TabProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Style for Tab container",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Tab/Tab.tsx",
        "name": "TabProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tab/Tab.tsx",
          "name": "TabProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "variant": {
      "defaultValue": null,
      "description": "Define the background Variant.",
      "name": "variant",
      "parent": {
        "fileName": "rne/packages/base/src/Tab/Tab.tsx",
        "name": "TabProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tab/Tab.tsx",
          "name": "TabProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"primary\" | \"default\""
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    }
  },
  "TabView.Item": {
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    }
  },
  "TabView": {
    "value": {
      "defaultValue": {
        "value": "0"
      },
      "description": "Child position index value.",
      "name": "value",
      "parent": {
        "fileName": "rne/packages/base/src/TabView/TabView.tsx",
        "name": "TabViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/TabView/TabView.tsx",
          "name": "TabViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onChange": {
      "defaultValue": {
        "value": "Function"
      },
      "description": "On Index Change Callback.",
      "name": "onChange",
      "parent": {
        "fileName": "rne/packages/base/src/TabView/TabView.tsx",
        "name": "TabViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/TabView/TabView.tsx",
          "name": "TabViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(value: number) => any"
      },
      "tags": {}
    },
    "animationType": {
      "defaultValue": {
        "value": "spring"
      },
      "description": "Choose the animation type among `spring` and `timing`. This is visible when there is tab change.",
      "name": "animationType",
      "parent": {
        "fileName": "rne/packages/base/src/TabView/TabView.tsx",
        "name": "TabViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/TabView/TabView.tsx",
          "name": "TabViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"spring\" | \"timing\""
      },
      "tags": {}
    },
    "animationConfig": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Define the animation configurations.",
      "name": "animationConfig",
      "parent": {
        "fileName": "rne/packages/base/src/TabView/TabView.tsx",
        "name": "TabViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/TabView/TabView.tsx",
          "name": "TabViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AnimationConfig"
      },
      "tags": {
        "type": "AnimationConfig"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for Component container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/TabView/TabView.tsx",
        "name": "TabViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/TabView/TabView.tsx",
          "name": "TabViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "tabItemContainerStyle": {
      "defaultValue": null,
      "description": "Styling for TabView.Item Component container.",
      "name": "tabItemContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/TabView/TabView.tsx",
        "name": "TabViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/TabView/TabView.tsx",
          "name": "TabViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "disableSwipe": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Swipe disabled or not",
      "name": "disableSwipe",
      "parent": {
        "fileName": "rne/packages/base/src/TabView/TabView.tsx",
        "name": "TabViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/TabView/TabView.tsx",
          "name": "TabViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Boolean"
      },
      "tags": {}
    },
    "disableTransition": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Disables transition",
      "name": "disableTransition",
      "parent": {
        "fileName": "rne/packages/base/src/TabView/TabView.tsx",
        "name": "TabViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/TabView/TabView.tsx",
          "name": "TabViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Boolean"
      },
      "tags": {}
    },
    "onSwipeStart": {
      "defaultValue": {
        "value": "Function"
      },
      "description": "Handler when the user swipes the view.",
      "name": "onSwipeStart",
      "parent": {
        "fileName": "rne/packages/base/src/TabView/TabView.tsx",
        "name": "TabViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/TabView/TabView.tsx",
          "name": "TabViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(direction) => void"
      },
      "tags": {
        "type": "(direction) => void"
      }
    },
    "minSwipeRatio": {
      "defaultValue": {
        "value": "0.4"
      },
      "description": "Minimum distance to swipe before the view changes.",
      "name": "minSwipeRatio",
      "parent": {
        "fileName": "rne/packages/base/src/TabView/TabView.tsx",
        "name": "TabViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/TabView/TabView.tsx",
          "name": "TabViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "minSwipeSpeed": {
      "defaultValue": {
        "value": "1"
      },
      "description": "Minimum speed to swipe before the view changes.",
      "name": "minSwipeSpeed",
      "parent": {
        "fileName": "rne/packages/base/src/TabView/TabView.tsx",
        "name": "TabViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/TabView/TabView.tsx",
          "name": "TabViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    }
  },
  "Text": {
    "style": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Add additional styling for Text.",
      "name": "style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h1": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Text with Font size 40.",
      "name": "h1",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h2": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Text with Font size 34.",
      "name": "h2",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h3": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Text with Font size 28.",
      "name": "h3",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h4": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Text with Font size 22.",
      "name": "h4",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "h1Style": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Styling when h1 is set.",
      "name": "h1Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h2Style": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Styling when h2 is set.",
      "name": "h2Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h3Style": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Styling when h3 is set.",
      "name": "h3Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "h4Style": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Styling when h4 is set.",
      "name": "h4Style",
      "parent": {
        "fileName": "rne/packages/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "allowFontScaling": {
      "defaultValue": null,
      "description": "Specifies whether fonts should scale to respect Text Size accessibility settings.\nThe default is `true`.",
      "name": "allowFontScaling",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ellipsizeMode": {
      "defaultValue": null,
      "description": "This can be one of the following values:\n\n- `head` - The line is displayed so that the end fits in the container and the missing text\nat the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n- `middle` - The line is displayed so that the beginning and end fit in the container and the\nmissing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n- `tail` - The line is displayed so that the beginning fits in the container and the\nmissing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n- `clip` - Lines are not drawn past the edge of the text container.\n\nThe default is `tail`.\n\n`numberOfLines` must be set in conjunction with this prop.\n\n> `clip` is working only for iOS",
      "name": "ellipsizeMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "lineBreakMode": {
      "defaultValue": null,
      "description": "Line Break mode. Works only with numberOfLines.\nclip is working only for iOS",
      "name": "lineBreakMode",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"head\" | \"middle\" | \"tail\" | \"clip\""
      },
      "tags": {}
    },
    "numberOfLines": {
      "defaultValue": null,
      "description": "Used to truncate the text with an ellipsis after computing the text\nlayout, including line wrapping, such that the total number of lines\ndoes not exceed this number.\n\nThis prop is commonly used with `ellipsizeMode`.",
      "name": "numberOfLines",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "onTextLayout": {
      "defaultValue": null,
      "description": "Invoked on Text layout",
      "name": "onTextLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TextLayoutEventData>) => void"
      },
      "tags": {}
    },
    "onPress": {
      "defaultValue": null,
      "description": "This function is called on press.\nText intrinsically supports press handling with a default highlight state (which can be disabled with suppressHighlighting).",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "This function is called on long press.\ne.g., `onLongPress={this.increaseSize}>``",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "maxFontSizeMultiplier": {
      "defaultValue": null,
      "description": "Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n- null/undefined (default): inherit from the parent node or the global default (0)\n- 0: no max, ignore parent/global default\n- >= 1: sets the maxFontSizeMultiplier of this node to this value",
      "name": "maxFontSizeMultiplier",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "adjustsFontSizeToFit": {
      "defaultValue": null,
      "description": "Specifies whether font should be scaled down automatically to fit given style constraints.",
      "name": "adjustsFontSizeToFit",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "minimumFontScale": {
      "defaultValue": null,
      "description": "Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).",
      "name": "minimumFontScale",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "suppressHighlighting": {
      "defaultValue": null,
      "description": "When `true`, no visual change is made when text is pressed down. By\ndefault, a gray oval highlights the text on press down.",
      "name": "suppressHighlighting",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectable": {
      "defaultValue": null,
      "description": "Lets the user select text, to use the native copy and paste functionality.",
      "name": "selectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "selectionColor": {
      "defaultValue": null,
      "description": "The highlight color of the text.",
      "name": "selectionColor",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "textBreakStrategy": {
      "defaultValue": null,
      "description": "Set text break strategy on Android API Level 23+\ndefault is `highQuality`.",
      "name": "textBreakStrategy",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"simple\" | \"highQuality\" | \"balanced\""
      },
      "tags": {}
    },
    "dataDetectorType": {
      "defaultValue": null,
      "description": "Determines the types of data converted to clickable URLs in the text element.\nBy default no data types are detected.",
      "name": "dataDetectorType",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"link\" | \"phoneNumber\" | \"email\" | \"all\""
      },
      "tags": {}
    },
    "android_hyphenationFrequency": {
      "defaultValue": null,
      "description": "Hyphenation strategy",
      "name": "android_hyphenationFrequency",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"balanced\" | \"normal\" | \"full\" | \"high\""
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    }
  },
  "Tile": {
    "title": {
      "defaultValue": null,
      "description": "Text inside the tile.",
      "name": "title",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "icon": {
      "defaultValue": null,
      "description": "Icon Component Props.",
      "name": "icon",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "IconObject"
      },
      "tags": {
        "type": "IconObject"
      }
    },
    "caption": {
      "defaultValue": null,
      "description": "Text inside the tilt when tile is featured.",
      "name": "caption",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode"
      },
      "tags": {}
    },
    "imageSrc": {
      "defaultValue": null,
      "description": "Source for the image.",
      "name": "imageSrc",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ImageSourcePropType"
      },
      "tags": {}
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Number passed to control opacity on press.",
      "name": "activeOpacity",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for the outer tile container.",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "imageContainerStyle": {
      "defaultValue": null,
      "description": "Styling for the image.",
      "name": "imageContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "iconContainerStyle": {
      "defaultValue": null,
      "description": "Styling for the outer icon container.",
      "name": "iconContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "overlayContainerStyle": {
      "defaultValue": null,
      "description": "Styling for the overlay container when using featured tile.",
      "name": "overlayContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Styling for the title.",
      "name": "titleStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "captionStyle": {
      "defaultValue": null,
      "description": "Styling for the caption (optional); You only use this if `caption` is a string.",
      "name": "captionStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Text Style"
      },
      "tags": {}
    },
    "width": {
      "defaultValue": {
        "value": "'screen width'"
      },
      "description": "Width for the tile.",
      "name": "width",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "default": "'screen width'"
      }
    },
    "height": {
      "defaultValue": {
        "value": "'width/2'"
      },
      "description": "Height for the tile.",
      "name": "height",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "default": "'width/2'"
      }
    },
    "featured": {
      "defaultValue": null,
      "description": "Changes the look of the tile.",
      "name": "featured",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "contentContainerStyle": {
      "defaultValue": null,
      "description": "Styling for bottom container when not featured tile.",
      "name": "contentContainerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "titleNumberOfLines": {
      "defaultValue": null,
      "description": "Number of lines for Title.",
      "name": "titleNumberOfLines",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "imageProps": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Optional properties to pass to the image if provided e.g \"resizeMode\".",
      "name": "imageProps",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageProps(Object)"
      },
      "tags": {}
    },
    "ImageComponent": {
      "defaultValue": {
        "value": "RNE Image"
      },
      "description": "Custom ImageComponent for Tile.",
      "name": "ImageComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Tile/Tile.tsx",
        "name": "TileProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tile/Tile.tsx",
          "name": "TileProps"
        }
      ],
      "required": false,
      "type": {
        "name": "typeof Component"
      },
      "tags": {
        "default": "RNE Image"
      }
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onBlur": {
      "defaultValue": null,
      "description": "Called after the element loses focus.",
      "name": "onBlur",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {
        "platform": "windows"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "Called after the element is focused.",
      "name": "onFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      },
      "tags": {
        "platform": "windows"
      }
    },
    "children": {
      "defaultValue": null,
      "description": "Either children or a render prop that receives a boolean reflecting whether\nthe component is currently pressed.",
      "name": "children",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        },
        {
          "fileName": "rne/packages/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "rne/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(ReactNode | ((state: PressableStateCallbackType) => ReactNode)) & ReactNode"
      },
      "tags": {}
    },
    "cancelable": {
      "defaultValue": null,
      "description": "Whether a press gesture can be interrupted by a parent gesture such as a\nscroll event. Defaults to true.",
      "name": "cancelable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "disabled": {
      "defaultValue": null,
      "description": "Whether the press behavior is disabled.",
      "name": "disabled",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a press is detected.",
      "name": "hitSlop",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      },
      "tags": {}
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a touch is considered a\npress before `onPressOut` is triggered.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      },
      "tags": {}
    },
    "android_disableSound": {
      "defaultValue": null,
      "description": "If true, doesn't play system sound on touch.",
      "name": "android_disableSound",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "android_ripple": {
      "defaultValue": null,
      "description": "Enables the Android ripple effect and configures its color.",
      "name": "android_ripple",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableAndroidRippleConfig"
      },
      "tags": {}
    },
    "testOnly_pressed": {
      "defaultValue": null,
      "description": "Used only for documentation or testing (e.g. snapshot testing).",
      "name": "testOnly_pressed",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "style": {
      "defaultValue": null,
      "description": "Either view styles or a function that receives a boolean reflecting whether\nthe component is currently pressed and returns view styles.",
      "name": "style",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      },
      "tags": {}
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      },
      "tags": {}
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      },
      "tags": {}
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      },
      "tags": {}
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      },
      "tags": {}
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      },
      "tags": {
        "platform": "android"
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      },
      "tags": {}
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
      "name": "onMagicTap",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      },
      "tags": {}
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "\nIn the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      },
      "tags": {}
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "\nThis is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {
        "platform": "ios"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      },
      "tags": {}
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "rne/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "rne/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      },
      "tags": {}
    }
  },
  "Tooltip": {
    "visible": {
      "defaultValue": {
        "value": "false"
      },
      "description": "To show the tooltip.",
      "name": "visible",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "withPointer": {
      "defaultValue": {
        "value": "true"
      },
      "description": "Flag to determine whether or not to display the pointer.",
      "name": "withPointer",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "popover": {
      "defaultValue": null,
      "description": "Component to be rendered as the display container.",
      "name": "popover",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactElement<{}, string | JSXElementConstructor<any>>"
      },
      "tags": {}
    },
    "toggleOnPress": {
      "defaultValue": {
        "value": "true"
      },
      "description": "Flag to determine to toggle or not the tooltip on press.",
      "name": "toggleOnPress",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "toggleAction": {
      "defaultValue": {
        "value": "onPress"
      },
      "description": "Define type of action that should trigger tooltip. Available options _onPress_, _onLongPress_",
      "name": "toggleAction",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      },
      "tags": {}
    },
    "height": {
      "defaultValue": {
        "value": "40"
      },
      "description": "Tooltip container height. Necessary in order to render the container in the correct place. Pass height according to the size of the content rendered inside the container.",
      "name": "height",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "width": {
      "defaultValue": {
        "value": "150"
      },
      "description": "Tooltip container width. Necessary in order to render the container in the correct place. Pass height according to the size of the content rendered inside the container.",
      "name": "width",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      },
      "tags": {}
    },
    "containerStyle": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Passes style object to tooltip container",
      "name": "containerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "pointerColor": {
      "defaultValue": {
        "value": "#617080"
      },
      "description": "Color of tooltip pointer, it defaults to the [`backgroundColor`](#backgroundcolor) if none is passed.",
      "name": "pointerColor",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "onClose": {
      "defaultValue": {
        "value": "Function"
      },
      "description": "Function which gets called on closing the tooltip.",
      "name": "onClose",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "onOpen": {
      "defaultValue": {
        "value": "Function"
      },
      "description": "Function which gets called on opening the tooltip.",
      "name": "onOpen",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      },
      "tags": {}
    },
    "overlayColor": {
      "defaultValue": {
        "value": "#fafafa14"
      },
      "description": "Color of overlay shadow when tooltip is open.",
      "name": "overlayColor",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "withOverlay": {
      "defaultValue": {
        "value": "true"
      },
      "description": "Flag to determine whether or not display overlay shadow when tooltip is open.",
      "name": "withOverlay",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "backgroundColor": {
      "defaultValue": {
        "value": "#617080"
      },
      "description": "Sets backgroundColor of the tooltip and pointer.",
      "name": "backgroundColor",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "highlightColor": {
      "defaultValue": {
        "value": "transparent"
      },
      "description": "Color to highlight the item the tooltip is surrounding.",
      "name": "highlightColor",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      },
      "tags": {}
    },
    "skipAndroidStatusBar": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Force skip StatusBar height when calculating element position. Pass `true` if Tooltip used inside react-native Modal component.",
      "name": "skipAndroidStatusBar",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "closeOnlyOnBackdropPress": {
      "defaultValue": {
        "value": "false"
      },
      "description": "Flag to determine whether to disable auto hiding of tooltip when touching/scrolling anywhere inside the active tooltip popover container. When `true`, Tooltip closes only when overlay backdrop is pressed (or) highlighted tooltip button is pressed.",
      "name": "closeOnlyOnBackdropPress",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      },
      "tags": {}
    },
    "ModalComponent": {
      "defaultValue": null,
      "description": "Override React Native `Modal` component (usable for web-platform).",
      "name": "ModalComponent",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "typeof Component"
      },
      "tags": {}
    },
    "pointerStyle": {
      "defaultValue": null,
      "description": "Style to be applied on the pointer.",
      "name": "pointerStyle",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "View Style"
      },
      "tags": {}
    },
    "animationType": {
      "defaultValue": {
        "value": "fade"
      },
      "description": "",
      "name": "animationType",
      "parent": {
        "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
        "name": "TooltipProps"
      },
      "declarations": [
        {
          "fileName": "rne/packages/base/src/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"fade\""
      },
      "tags": {}
    }
  }
}
