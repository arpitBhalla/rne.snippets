{
  "AirbnbRating": {
    "count": {
      "defaultValue": null,
      "description": "Total number of ratings to display\n\nDefault is 5",
      "name": "count",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "reviews": {
      "defaultValue": null,
      "description": "Labels to show when each value is tapped\n\ne.g. If the first star is tapped, then value in index 0 will be used as the label\n\nDefault is ['Terrible', 'Bad', 'Okay', 'Good', 'Great']",
      "name": "reviews",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string[]"
      }
    },
    "showRating": {
      "defaultValue": null,
      "description": "Determines if to show the reviews above the rating\n\nDefault is true",
      "name": "showRating",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "reviewColor": {
      "defaultValue": null,
      "description": "Color value for review.\n\nDefault is #f1c40f",
      "name": "reviewColor",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "reviewSize": {
      "defaultValue": null,
      "description": "Size value for review.\n\nDefault is 40",
      "name": "reviewSize",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "defaultRating": {
      "defaultValue": null,
      "description": "Initial value for the rating\n\nDefault is 3",
      "name": "defaultRating",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "starContainerStyle": {
      "defaultValue": null,
      "description": "Style for star container\n\nDefault is none",
      "name": "starContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "ratingContainerStyle": {
      "defaultValue": null,
      "description": "Style for rating container\n\nDefault is none",
      "name": "ratingContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "onFinishRating": {
      "defaultValue": null,
      "description": "Callback method when the user finishes rating. Gives you the final rating value as a whole number",
      "name": "onFinishRating",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(number: any) => void"
      }
    },
    "isDisabled": {
      "defaultValue": null,
      "description": "Whether the rating can be modiefied by the user\n\nDefault is false",
      "name": "isDisabled",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "selectedColor": {
      "defaultValue": null,
      "description": "Color value for filled stars.\n\nDefault is #004666",
      "name": "selectedColor",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "size": {
      "defaultValue": null,
      "description": "Size of rating image\n\nDefault is 40",
      "name": "size",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "starImage": {
      "defaultValue": null,
      "description": "Pass in a custom base image source",
      "name": "starImage",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/TapRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Avatar": {
    "Component": {
      "defaultValue": {
        "value": "`Press handlers present then Pressable else View`"
      },
      "description": "Component for enclosing element (eg: TouchableHighlight, View, etc).",
      "name": "Component",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "onPress": {
      "defaultValue": null,
      "description": "Callback function when pressing component.\nCalled when a single tap gesture is detected.",
      "name": "onPress",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(() => void) & ((event: GestureResponderEvent) => void)"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Callback function when long pressing component.\nCalled when a long-tap gesture is detected.",
      "name": "onLongPress",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(() => void) & ((event: GestureResponderEvent) => void)"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for outer container.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "source": {
      "defaultValue": null,
      "description": "Image source to be displayed on avatar.",
      "name": "source",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageSourcePropType"
      }
    },
    "avatarStyle": {
      "defaultValue": null,
      "description": "Style for avatar image.",
      "name": "avatarStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageStyle"
      }
    },
    "rounded": {
      "defaultValue": null,
      "description": "Makes the avatar circular.",
      "name": "rounded",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "title": {
      "defaultValue": null,
      "description": "Renders title in the placeholder.",
      "name": "title",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Style for the title.",
      "name": "titleStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "overlayContainerStyle": {
      "defaultValue": null,
      "description": "Style for the view outside image or icon.",
      "name": "overlayContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Opacity when pressed.",
      "name": "activeOpacity",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "icon": {
      "defaultValue": null,
      "description": "Displays an icon as the main content of the Avatar. **Cannot be used alongside title**. When used with the `source` prop it will be used as the placeholder.",
      "name": "icon",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "AvatarIcon"
      }
    },
    "iconStyle": {
      "defaultValue": null,
      "description": "Extra styling for icon component.",
      "name": "iconStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "size": {
      "defaultValue": null,
      "description": "Size of the avatar.",
      "name": "size",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number | \"small\" | \"medium\" | \"large\" | \"xlarge\""
      }
    },
    "placeholderStyle": {
      "defaultValue": null,
      "description": "Adds style to the placeholder wrapper.",
      "name": "placeholderStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "renderPlaceholderContent": {
      "defaultValue": null,
      "description": "Custom placeholder element (by default, it's the title).",
      "name": "renderPlaceholderContent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "React.ReactElement<{}>"
      }
    },
    "imageProps": {
      "defaultValue": null,
      "description": "Optional properties to pass to the avatar e.g \"resizeMode\".",
      "name": "imageProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "Partial<ImageProps>"
      }
    },
    "ImageComponent": {
      "defaultValue": null,
      "description": "Custom ImageComponent for Avatar.",
      "name": "ImageComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Avatar/Avatar.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "React.ComponentClass"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Badge": {
    "containerStyle": {
      "defaultValue": null,
      "description": "Style for the container.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Badge/Badge.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "badgeStyle": {
      "defaultValue": null,
      "description": "Additional styling for badge (background) view component.",
      "name": "badgeStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Badge/Badge.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "textProps": {
      "defaultValue": null,
      "description": "Extra props for text component.",
      "name": "textProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Badge/Badge.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      }
    },
    "textStyle": {
      "defaultValue": null,
      "description": "Extra styling for icon component.",
      "name": "textStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Badge/Badge.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "value": {
      "defaultValue": null,
      "description": "Text value to be displayed by badge, defaults to empty.",
      "name": "value",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Badge/Badge.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "React.ReactNode"
      }
    },
    "Component": {
      "defaultValue": {
        "value": "onPress || onLongPress || onPressIn || onPressOut\n    ? Pressable\n    : View"
      },
      "description": "Custom component to replace the badge outer component.",
      "name": "Component",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Badge/Badge.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "status": {
      "defaultValue": {
        "value": "primary"
      },
      "description": "Determines color of the indicator.",
      "name": "status",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Badge/Badge.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"primary\" | \"success\" | \"warning\" | \"error\""
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      }
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "theme": {
      "defaultValue": {
        "value": "{\n  colors,\n}"
      },
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "BottomSheet": {
    "containerStyle": {
      "defaultValue": null,
      "description": "Style of the bottom sheet's container. Use this to change the color of the underlay.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/BottomSheet/BottomSheet.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "modalProps": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Additional props handed to the `Modal`.",
      "name": "modalProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/BottomSheet/BottomSheet.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ModalProps"
      }
    },
    "backdropStyle": {
      "defaultValue": null,
      "description": "Style of the backdrop container.",
      "name": "backdropStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/BottomSheet/BottomSheet.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "onBackdropPress": {
      "defaultValue": {
        "value": "() => null"
      },
      "description": "Handler for backdrop press.",
      "name": "onBackdropPress",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/BottomSheet/BottomSheet.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "isVisible": {
      "defaultValue": {
        "value": false
      },
      "description": "Is the modal component shown.",
      "name": "isVisible",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/BottomSheet/BottomSheet.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "scrollViewProps": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Used to add props to Scroll view.",
      "name": "scrollViewProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/BottomSheet/BottomSheet.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ScrollViewProps"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Button": {
    "activeOpacity": {
      "defaultValue": null,
      "description": "Determines what the opacity of the wrapped view should be when touch is active.\nDefaults to 0.2",
      "name": "activeOpacity",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n\nenabled: If true, parallax effects are enabled.  Defaults to true.\nshiftDistanceX: Defaults to 2.0.\nshiftDistanceY: Defaults to 2.0.\ntiltAngle: Defaults to 0.05.\nmagnification: Defaults to 1.0.\npressMagnification: Defaults to 1.0.\npressDuration: Defaults to 0.3.\npressDelay: Defaults to 0.0.\n@platform android",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      }
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Delay in ms, from onPressIn, before onLongPress is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "delayPressIn": {
      "defaultValue": null,
      "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
      "name": "delayPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "delayPressOut": {
      "defaultValue": null,
      "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
      "name": "delayPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "disabled": {
      "defaultValue": {
        "value": false
      },
      "description": "If true, disable all interactions for this component.\nDisables user interaction.",
      "name": "disabled",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far your touch can start away from the button.\nThis is added to pressRetentionOffset when moving off of the button.\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch hits\ntwo overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "onBlur": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"blur\" occurs, meaning the element lost focus.\nSome platforms may not have the concept of blur.",
      "name": "onBlur",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"focus\" occurs. Some platforms may not have\nthe concept of focus.",
      "name": "onFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n{nativeEvent: {layout: {x, y, width, height}}}",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "",
      "name": "onLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPress": {
      "defaultValue": {
        "value": "() => console.log('Please attach a method to this component')"
      },
      "description": "Called when the touch is released,\nbut not if cancelled (e.g. by a scroll that steals the responder lock).",
      "name": "onPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "//FIXME: not in doc but available in examples",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "When the scroll view is disabled, this defines how far your\ntouch may move off of the button, before deactivating the button.\nOnce deactivated, try moving it back and you'll see that the button\nis once again reactivated! Move it back and forth several times\nwhile the scroll view is disabled. Ensure you pass in a constant\nto reduce memory allocations.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "touchSoundDisabled": {
      "defaultValue": null,
      "description": "If true, doesn't play a system sound on touch.\n@platform android",
      "name": "touchSoundDisabled",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* TV preferred focus (see documentation for the View component).\n@platform ios",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "nextFocusDown": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates down. See the Android documentation.\n@platform android",
      "name": "nextFocusDown",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusForward": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates forward. See the Android documentation.\n@platform android",
      "name": "nextFocusForward",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusLeft": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates left. See the Android documentation.\n@platform android",
      "name": "nextFocusLeft",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusRight": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates right. See the Android documentation.\n@platform android",
      "name": "nextFocusRight",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusUp": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates up. See the Android documentation.\n@platform android",
      "name": "nextFocusUp",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "background": {
      "defaultValue": null,
      "description": "Determines the type of background drawable that's going to be used to display feedback.\nIt takes an object with type property and extra data depending on the type.\nIt's recommended to use one of the following static methods to generate that dictionary:\n     1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n        default background for selectable elements (?android:attr/selectableItemBackground)\n     2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n        theme's default background for borderless selectable elements\n        (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n        with specified color (as a string). If property borderless evaluates to true the ripple will render\n        outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n        type is available on Android API level 21+",
      "name": "background",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "BackgroundPropType"
      }
    },
    "useForeground": {
      "defaultValue": null,
      "description": "",
      "name": "useForeground",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "title": {
      "defaultValue": {
        "value": ""
      },
      "description": "Add button title.",
      "name": "title",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Add additional styling for title component.",
      "name": "titleStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "titleProps": {
      "defaultValue": null,
      "description": "Add additional props for Text component.",
      "name": "titleProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      }
    },
    "buttonStyle": {
      "defaultValue": null,
      "description": "Add additional styling for button component.",
      "name": "buttonStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "type": {
      "defaultValue": {
        "value": "solid"
      },
      "description": "Type of button.",
      "name": "type",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"solid\" | \"clear\" | \"outline\""
      }
    },
    "loading": {
      "defaultValue": {
        "value": false
      },
      "description": "Prop to display a loading spinner.",
      "name": "loading",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "loadingStyle": {
      "defaultValue": null,
      "description": "Add additional styling for loading component.",
      "name": "loadingStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "loadingProps": {
      "defaultValue": null,
      "description": "Add additional props for ActivityIndicator component.",
      "name": "loadingProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ActivityIndicatorProps"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for Component container.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "icon": {
      "defaultValue": null,
      "description": "Displays a centered icon (when no title) or to the left (with text). (can be used along with iconRight as well). Can be an object or a custom component.",
      "name": "icon",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "iconContainerStyle": {
      "defaultValue": null,
      "description": "Styling for Icon Component container.",
      "name": "iconContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "iconRight": {
      "defaultValue": {
        "value": false
      },
      "description": "Displays Icon to the right of title. Needs to be used along with `icon` prop.",
      "name": "iconRight",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Displays a linear gradient. See [usage](#lineargradient-usage).",
      "name": "linearGradientProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      }
    },
    "TouchableComponent": {
      "defaultValue": null,
      "description": "Component for user interaction.",
      "name": "TouchableComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "ViewComponent": {
      "defaultValue": null,
      "description": "Component for container.",
      "name": "ViewComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style of the button when disabled.",
      "name": "disabledStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "disabledTitleStyle": {
      "defaultValue": null,
      "description": "Style of the title when disabled.",
      "name": "disabledTitleStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "raised": {
      "defaultValue": {
        "value": false
      },
      "description": "Add raised button styling (optional). Has no effect if `type=\"clear\"`.",
      "name": "raised",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "iconPosition": {
      "defaultValue": {
        "value": "left"
      },
      "description": "Displays Icon to the position mentioned. Needs to be used along with `icon` prop.",
      "name": "iconPosition",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\" | \"top\" | \"bottom\""
      }
    },
    "theme": {
      "defaultValue": {
        "value": "{\n  colors,\n}"
      },
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "ButtonGroup": {
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      }
    },
    "onPress": {
      "defaultValue": {
        "value": "() => null"
      },
      "description": "Called when a single tap gesture is detected.\nMethod to update Button Group Index.",
      "name": "onPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "((event: GestureResponderEvent) => void) & ((...args: any[]) => void)"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "button": {
      "defaultValue": null,
      "description": "Button for the component.",
      "name": "button",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      }
    },
    "Component": {
      "defaultValue": null,
      "description": "Choose other button component such as TouchableOpacity.",
      "name": "Component",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "buttons": {
      "defaultValue": null,
      "description": "Array of buttons for component (required), if returning a component, must be an object with { element: componentName }.",
      "name": "buttons",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any[]"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Specify styling for main button container.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "textStyle": {
      "defaultValue": null,
      "description": "Specify specific styling for text.",
      "name": "textStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "selectedTextStyle": {
      "defaultValue": null,
      "description": "Specify specific styling for text in the selected state.",
      "name": "selectedTextStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "selectedButtonStyle": {
      "defaultValue": null,
      "description": "Specify styling for selected button.",
      "name": "selectedButtonStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "underlayColor": {
      "defaultValue": {
        "value": "theme?.colors?.primary"
      },
      "description": "Specify underlayColor for TouchableHighlight.",
      "name": "underlayColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "selectedIndex": {
      "defaultValue": {
        "value": null
      },
      "description": "Current selected index of array of buttons.",
      "name": "selectedIndex",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "selectedIndexes": {
      "defaultValue": {
        "value": "[]"
      },
      "description": "Current selected indexes from the array of buttons.",
      "name": "selectedIndexes",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number[]"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Add active opacity to the button in buttonGroup.",
      "name": "activeOpacity",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onHideUnderlay": {
      "defaultValue": null,
      "description": "Function called on hiding underlay.",
      "name": "onHideUnderlay",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onShowUnderlay": {
      "defaultValue": null,
      "description": "Function called on showing underlay.",
      "name": "onShowUnderlay",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "setOpacityTo": {
      "defaultValue": null,
      "description": "Function to set the opacity.",
      "name": "setOpacityTo",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(value: number) => void"
      }
    },
    "innerBorderStyle": {
      "defaultValue": null,
      "description": "Update the styling of the interior border of the list of buttons.",
      "name": "innerBorderStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ color?: string; width?: number; }"
      }
    },
    "buttonStyle": {
      "defaultValue": null,
      "description": "Specify styling for button.",
      "name": "buttonStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "buttonContainerStyle": {
      "defaultValue": null,
      "description": "Specify styling for button containers.",
      "name": "buttonContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "selectMultiple": {
      "defaultValue": {
        "value": false
      },
      "description": "Allows the user to select multiple buttons.",
      "name": "selectMultiple",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "disabled": {
      "defaultValue": {
        "value": false
      },
      "description": "Controls if buttons are disabled. Setting `true` makes all of them disabled, while using an array only makes those indices disabled.",
      "name": "disabled",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean | number[]"
      }
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Styling for each button when disabled.",
      "name": "disabledStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "disabledTextStyle": {
      "defaultValue": null,
      "description": "Styling for the text of each button when disabled.",
      "name": "disabledTextStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "disabledSelectedStyle": {
      "defaultValue": null,
      "description": "Styling for each selected button when disabled.",
      "name": "disabledSelectedStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "disabledSelectedTextStyle": {
      "defaultValue": null,
      "description": "Styling for the text of each selected button when disabled.",
      "name": "disabledSelectedTextStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "vertical": {
      "defaultValue": {
        "value": false
      },
      "description": "Display the ButtonGroup vertically.",
      "name": "vertical",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ButtonGroup/ButtonGroup.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "theme": {
      "defaultValue": {
        "value": "{\n  colors,\n}"
      },
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Card": {
    "containerStyle": {
      "defaultValue": null,
      "description": "Outer container style.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Card/Card.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "wrapperStyle": {
      "defaultValue": null,
      "description": "Inner container style.",
      "name": "wrapperStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Card/Card.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "CheckBox": {
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onBlur": {
      "defaultValue": null,
      "description": "Called after the element loses focus.\n@platform windows",
      "name": "onBlur",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "Called after the element is focused.\n@platform windows",
      "name": "onFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "children": {
      "defaultValue": null,
      "description": "Either children or a render prop that receives a boolean reflecting whether\nthe component is currently pressed.",
      "name": "children",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        },
        {
          "fileName": "d/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(ReactNode | ((state: PressableStateCallbackType) => ReactNode)) & ReactNode"
      }
    },
    "cancelable": {
      "defaultValue": null,
      "description": "Whether a press gesture can be interrupted by a parent gesture such as a\nscroll event. Defaults to true.",
      "name": "cancelable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "Whether the press behavior is disabled.",
      "name": "disabled",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a press is detected.",
      "name": "hitSlop",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      }
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a touch is considered a\npress before `onPressOut` is triggered.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      }
    },
    "android_disableSound": {
      "defaultValue": null,
      "description": "If true, doesn't play system sound on touch.",
      "name": "android_disableSound",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "android_ripple": {
      "defaultValue": null,
      "description": "Enables the Android ripple effect and configures its color.",
      "name": "android_ripple",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableAndroidRippleConfig"
      }
    },
    "testOnly_pressed": {
      "defaultValue": null,
      "description": "Used only for documentation or testing (e.g. snapshot testing).",
      "name": "testOnly_pressed",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "Either view styles or a function that receives a boolean reflecting whether\nthe component is currently pressed and returns view styles.",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle> | ((state: PressableStateCallbackType) => StyleProp<ViewStyle>)"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      }
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.\n@platform ios",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.\n@platform ios",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n@platform ios",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.\n@platform ios",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.\n@platform ios",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "checked": {
      "defaultValue": {
        "value": false
      },
      "description": "Flag for checking the icon.",
      "name": "checked",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onIconPress": {
      "defaultValue": null,
      "description": "onPress function for checkbox.",
      "name": "onIconPress",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onLongIconPress": {
      "defaultValue": null,
      "description": "onLongPress function for checkbox.",
      "name": "onLongIconPress",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "size": {
      "defaultValue": null,
      "description": "Size of the checkbox.",
      "name": "size",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "checkedIcon": {
      "defaultValue": null,
      "description": "Default checked icon ([Font Awesome Icon](http://fontawesome.io/icons/)).",
      "name": "checkedIcon",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "uncheckedIcon": {
      "defaultValue": null,
      "description": "Default checked icon ([Font Awesome Icon](http://fontawesome.io/icons/))",
      "name": "uncheckedIcon",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "iconType": {
      "defaultValue": null,
      "description": "Type of icon set. [Supported sets here](icon#available-icon-sets).",
      "name": "iconType",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "checkedColor": {
      "defaultValue": {
        "value": "theme?.colors?.primary"
      },
      "description": "Default checked color.",
      "name": "checkedColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "uncheckedColor": {
      "defaultValue": null,
      "description": "Default unchecked color.",
      "name": "uncheckedColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/components/CheckBoxIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "Component": {
      "defaultValue": null,
      "description": "Specify React Native component for main button.",
      "name": "Component",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/CheckBox.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "iconRight": {
      "defaultValue": {
        "value": false
      },
      "description": "Moves icon to right of text.",
      "name": "iconRight",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/CheckBox.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "title": {
      "defaultValue": null,
      "description": "Title of checkbox.",
      "name": "title",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/CheckBox.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "titleProps": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Additional props for the title Text component.",
      "name": "titleProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/CheckBox.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      }
    },
    "center": {
      "defaultValue": {
        "value": false
      },
      "description": "Aligns checkbox to center.",
      "name": "center",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/CheckBox.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "right": {
      "defaultValue": {
        "value": false
      },
      "description": "Aligns checkbox to right.",
      "name": "right",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/CheckBox.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Style of main container.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/CheckBox.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "wrapperStyle": {
      "defaultValue": null,
      "description": "Style for the wrapper of checkbox.",
      "name": "wrapperStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/CheckBox.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "textStyle": {
      "defaultValue": null,
      "description": "Style of text.",
      "name": "textStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/CheckBox.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "checkedTitle": {
      "defaultValue": null,
      "description": "Specify a custom checked message.",
      "name": "checkedTitle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/CheckBox.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "fontFamily": {
      "defaultValue": null,
      "description": "Specify different font family.",
      "name": "fontFamily",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/CheckBox/CheckBox.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "theme": {
      "defaultValue": {
        "value": "{\n  colors,\n}"
      },
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Chip": {
    "onPress": {
      "defaultValue": null,
      "description": "Called when the touch is released,\nbut not if cancelled (e.g. by a scroll that steals the responder lock).",
      "name": "onPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "",
      "name": "onLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "//FIXME: not in doc but available in examples",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far your touch can start away from the button.\nThis is added to pressRetentionOffset when moving off of the button.\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch hits\ntwo overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n{nativeEvent: {layout: {x, y, width, height}}}",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* TV preferred focus (see documentation for the View component).\n@platform ios",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n\nenabled: If true, parallax effects are enabled.  Defaults to true.\nshiftDistanceX: Defaults to 2.0.\nshiftDistanceY: Defaults to 2.0.\ntiltAngle: Defaults to 0.05.\nmagnification: Defaults to 1.0.\npressMagnification: Defaults to 1.0.\npressDuration: Defaults to 0.3.\npressDelay: Defaults to 0.0.\n@platform android",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for Component container.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "title": {
      "defaultValue": null,
      "description": "Add button title.",
      "name": "title",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Add additional styling for title component.",
      "name": "titleStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Determines what the opacity of the wrapped view should be when touch is active.\nDefaults to 0.2",
      "name": "activeOpacity",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "icon": {
      "defaultValue": null,
      "description": "Displays a centered icon (when no title) or to the left (with text). (can be used along with iconRight as well). Can be an object or a custom component.",
      "name": "icon",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "onBlur": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"blur\" occurs, meaning the element lost focus.\nSome platforms may not have the concept of blur.",
      "name": "onBlur",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"focus\" occurs. Some platforms may not have\nthe concept of focus.",
      "name": "onFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Delay in ms, from onPressIn, before onLongPress is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "If true, disable all interactions for this component.\nDisables user interaction.",
      "name": "disabled",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "When the scroll view is disabled, this defines how far your\ntouch may move off of the button, before deactivating the button.\nOnce deactivated, try moving it back and you'll see that the button\nis once again reactivated! Move it back and forth several times\nwhile the scroll view is disabled. Ensure you pass in a constant\nto reduce memory allocations.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "delayPressIn": {
      "defaultValue": null,
      "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
      "name": "delayPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "delayPressOut": {
      "defaultValue": null,
      "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
      "name": "delayPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "touchSoundDisabled": {
      "defaultValue": null,
      "description": "If true, doesn't play a system sound on touch.\n@platform android",
      "name": "touchSoundDisabled",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "nextFocusDown": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates down. See the Android documentation.\n@platform android",
      "name": "nextFocusDown",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusForward": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates forward. See the Android documentation.\n@platform android",
      "name": "nextFocusForward",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusLeft": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates left. See the Android documentation.\n@platform android",
      "name": "nextFocusLeft",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusRight": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates right. See the Android documentation.\n@platform android",
      "name": "nextFocusRight",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusUp": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates up. See the Android documentation.\n@platform android",
      "name": "nextFocusUp",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "background": {
      "defaultValue": null,
      "description": "Determines the type of background drawable that's going to be used to display feedback.\nIt takes an object with type property and extra data depending on the type.\nIt's recommended to use one of the following static methods to generate that dictionary:\n     1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n        default background for selectable elements (?android:attr/selectableItemBackground)\n     2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n        theme's default background for borderless selectable elements\n        (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n        with specified color (as a string). If property borderless evaluates to true the ripple will render\n        outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n        type is available on Android API level 21+",
      "name": "background",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "BackgroundPropType"
      }
    },
    "useForeground": {
      "defaultValue": null,
      "description": "",
      "name": "useForeground",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "titleProps": {
      "defaultValue": null,
      "description": "Add additional props for Text component.",
      "name": "titleProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      }
    },
    "buttonStyle": {
      "defaultValue": null,
      "description": "Add additional styling for button component.",
      "name": "buttonStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "type": {
      "defaultValue": null,
      "description": "Type of button.",
      "name": "type",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Chip/Chip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"solid\" | \"outline\""
      }
    },
    "iconContainerStyle": {
      "defaultValue": null,
      "description": "Styling for Icon Component container.",
      "name": "iconContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "iconRight": {
      "defaultValue": null,
      "description": "Displays Icon to the right of title. Needs to be used along with `icon` prop.",
      "name": "iconRight",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Displays a linear gradient. See [usage](#lineargradient-usage).",
      "name": "linearGradientProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      }
    },
    "TouchableComponent": {
      "defaultValue": null,
      "description": "Component for user interaction.",
      "name": "TouchableComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "ViewComponent": {
      "defaultValue": null,
      "description": "Component for container.",
      "name": "ViewComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style of the button when disabled.",
      "name": "disabledStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "disabledTitleStyle": {
      "defaultValue": null,
      "description": "Style of the title when disabled.",
      "name": "disabledTitleStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "raised": {
      "defaultValue": null,
      "description": "Add raised button styling (optional). Has no effect if `type=\"clear\"`.",
      "name": "raised",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "iconPosition": {
      "defaultValue": null,
      "description": "Displays Icon to the position mentioned. Needs to be used along with `icon` prop.",
      "name": "iconPosition",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\" | \"top\" | \"bottom\""
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Dialog": {
    "children": {
      "defaultValue": null,
      "description": "Add Enclosed components.",
      "name": "children",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Dialog/Dialog.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "d/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      }
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.\n@platform ios",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.\n@platform ios",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n@platform ios",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.\n@platform ios",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.\n@platform ios",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      }
    },
    "backdropStyle": {
      "defaultValue": null,
      "description": "Style of the backdrop container.",
      "name": "backdropStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Overlay/Overlay.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "onBackdropPress": {
      "defaultValue": null,
      "description": "Handler for backdrop press (only works when `fullscreen` is false).",
      "name": "onBackdropPress",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Overlay/Overlay.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "isVisible": {
      "defaultValue": null,
      "description": "If true, the overlay is visible.\nIf true, the dialog is visible.",
      "name": "isVisible",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Overlay/Overlay.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Dialog/Dialog.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "animated": {
      "defaultValue": null,
      "description": "@deprecated Use animationType instead",
      "name": "animated",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "animationType": {
      "defaultValue": null,
      "description": "The `animationType` prop controls how the modal animates.\n\n- `slide` slides in from the bottom\n- `fade` fades into view\n- `none` appears without an animation",
      "name": "animationType",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"slide\" | \"fade\""
      }
    },
    "transparent": {
      "defaultValue": null,
      "description": "The `transparent` prop determines whether your modal will fill the entire view.\nSetting this to `true` will render the modal over a transparent background.",
      "name": "transparent",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onRequestClose": {
      "defaultValue": null,
      "description": "The `onRequestClose` prop allows passing a function that will be called once the modal has been dismissed.\n_On the Android platform, this is a required function._",
      "name": "onRequestClose",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onShow": {
      "defaultValue": null,
      "description": "The `onShow` prop allows passing a function that will be called once the modal has been shown.",
      "name": "onShow",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<any>) => void"
      }
    },
    "presentationStyle": {
      "defaultValue": null,
      "description": "The `presentationStyle` determines the style of modal to show",
      "name": "presentationStyle",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "\"fullScreen\" | \"pageSheet\" | \"formSheet\" | \"overFullScreen\""
      }
    },
    "supportedOrientations": {
      "defaultValue": null,
      "description": "The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.\nOn iOS, the modal is still restricted by what's specified in your app's Info.plist's UISupportedInterfaceOrientations field.",
      "name": "supportedOrientations",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "(\"portrait\" | \"portrait-upside-down\" | \"landscape\" | \"landscape-left\" | \"landscape-right\")[]"
      }
    },
    "onDismiss": {
      "defaultValue": null,
      "description": "The `onDismiss` prop allows passing a function that will be called once the modal has been dismissed.",
      "name": "onDismiss",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onOrientationChange": {
      "defaultValue": null,
      "description": "The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed.\nThe orientation provided is only 'portrait' or 'landscape'. This callback is also called on initial render, regardless of the current orientation.",
      "name": "onOrientationChange",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<any>) => void"
      }
    },
    "hardwareAccelerated": {
      "defaultValue": null,
      "description": "Controls whether to force hardware acceleration for the underlying window.",
      "name": "hardwareAccelerated",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "statusBarTranslucent": {
      "defaultValue": null,
      "description": "Determines whether your modal should go under the system statusbar.",
      "name": "statusBarTranslucent",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "overlayStyle": {
      "defaultValue": null,
      "description": "Style of the actual overlay.\nAdd additional styling to the internal Overlay component.",
      "name": "overlayStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Overlay/Overlay.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Dialog/Dialog.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "ModalComponent": {
      "defaultValue": null,
      "description": "Override React Native `Modal` component (usable for web-platform).",
      "name": "ModalComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Overlay/Overlay.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Divider": {
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      }
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "Applies style to the divider.",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Divider/Divider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.\n@platform ios",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.\n@platform ios",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n@platform ios",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.\n@platform ios",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.\n@platform ios",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "color": {
      "defaultValue": null,
      "description": "The color of the component.",
      "name": "color",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Divider/Divider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "inset": {
      "defaultValue": {
        "value": false
      },
      "description": "Applies inset to the divider.",
      "name": "inset",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Divider/Divider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "insetType": {
      "defaultValue": {
        "value": "left"
      },
      "description": "Applies inset to a specific direction to the divider.",
      "name": "insetType",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Divider/Divider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\" | \"middle\""
      }
    },
    "subHeader": {
      "defaultValue": null,
      "description": "Adds subHeader text to the divider.",
      "name": "subHeader",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Divider/Divider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "subHeaderStyle": {
      "defaultValue": null,
      "description": "Adds style to the subHeader text of the divider",
      "name": "subHeaderStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Divider/Divider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "orientation": {
      "defaultValue": {
        "value": "horizontal"
      },
      "description": "Apply orientation to the divider.",
      "name": "orientation",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Divider/Divider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"vertical\" | \"horizontal\""
      }
    },
    "width": {
      "defaultValue": null,
      "description": "Apply width to the divider.",
      "name": "width",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Divider/Divider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "FAB": {
    "activeOpacity": {
      "defaultValue": null,
      "description": "Determines what the opacity of the wrapped view should be when touch is active.\nDefaults to 0.2",
      "name": "activeOpacity",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n\nenabled: If true, parallax effects are enabled.  Defaults to true.\nshiftDistanceX: Defaults to 2.0.\nshiftDistanceY: Defaults to 2.0.\ntiltAngle: Defaults to 0.05.\nmagnification: Defaults to 1.0.\npressMagnification: Defaults to 1.0.\npressDuration: Defaults to 0.3.\npressDelay: Defaults to 0.0.\n@platform android",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      }
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Delay in ms, from onPressIn, before onLongPress is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "delayPressIn": {
      "defaultValue": null,
      "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
      "name": "delayPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "delayPressOut": {
      "defaultValue": null,
      "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
      "name": "delayPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "If true, disable all interactions for this component.\nDisables user interaction.",
      "name": "disabled",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far your touch can start away from the button.\nThis is added to pressRetentionOffset when moving off of the button.\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch hits\ntwo overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "onBlur": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"blur\" occurs, meaning the element lost focus.\nSome platforms may not have the concept of blur.",
      "name": "onBlur",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"focus\" occurs. Some platforms may not have\nthe concept of focus.",
      "name": "onFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n{nativeEvent: {layout: {x, y, width, height}}}",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "",
      "name": "onLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when the touch is released,\nbut not if cancelled (e.g. by a scroll that steals the responder lock).",
      "name": "onPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "//FIXME: not in doc but available in examples\nStyle for FAB",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/FAB/FAB.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "When the scroll view is disabled, this defines how far your\ntouch may move off of the button, before deactivating the button.\nOnce deactivated, try moving it back and you'll see that the button\nis once again reactivated! Move it back and forth several times\nwhile the scroll view is disabled. Ensure you pass in a constant\nto reduce memory allocations.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "touchSoundDisabled": {
      "defaultValue": null,
      "description": "If true, doesn't play a system sound on touch.\n@platform android",
      "name": "touchSoundDisabled",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* TV preferred focus (see documentation for the View component).\n@platform ios",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "nextFocusDown": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates down. See the Android documentation.\n@platform android",
      "name": "nextFocusDown",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusForward": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates forward. See the Android documentation.\n@platform android",
      "name": "nextFocusForward",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusLeft": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates left. See the Android documentation.\n@platform android",
      "name": "nextFocusLeft",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusRight": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates right. See the Android documentation.\n@platform android",
      "name": "nextFocusRight",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusUp": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates up. See the Android documentation.\n@platform android",
      "name": "nextFocusUp",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "background": {
      "defaultValue": null,
      "description": "Determines the type of background drawable that's going to be used to display feedback.\nIt takes an object with type property and extra data depending on the type.\nIt's recommended to use one of the following static methods to generate that dictionary:\n     1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n        default background for selectable elements (?android:attr/selectableItemBackground)\n     2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n        theme's default background for borderless selectable elements\n        (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n        with specified color (as a string). If property borderless evaluates to true the ripple will render\n        outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n        type is available on Android API level 21+",
      "name": "background",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "BackgroundPropType"
      }
    },
    "useForeground": {
      "defaultValue": null,
      "description": "",
      "name": "useForeground",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "title": {
      "defaultValue": null,
      "description": "Add button title.",
      "name": "title",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Add additional styling for title component.",
      "name": "titleStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "titleProps": {
      "defaultValue": null,
      "description": "Add additional props for Text component.",
      "name": "titleProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      }
    },
    "buttonStyle": {
      "defaultValue": null,
      "description": "Add additional styling for button component.",
      "name": "buttonStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "type": {
      "defaultValue": null,
      "description": "Type of button.",
      "name": "type",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"solid\" | \"clear\" | \"outline\""
      }
    },
    "loading": {
      "defaultValue": null,
      "description": "Prop to display a loading spinner.",
      "name": "loading",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "loadingStyle": {
      "defaultValue": null,
      "description": "Add additional styling for loading component.",
      "name": "loadingStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "loadingProps": {
      "defaultValue": null,
      "description": "Add additional props for ActivityIndicator component.",
      "name": "loadingProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ActivityIndicatorProps"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for Component container.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "icon": {
      "defaultValue": null,
      "description": "Displays a centered icon (when no title) or to the left (with text). (can be used along with iconRight as well). Can be an object or a custom component.",
      "name": "icon",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "iconContainerStyle": {
      "defaultValue": null,
      "description": "Styling for Icon Component container.",
      "name": "iconContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "iconRight": {
      "defaultValue": null,
      "description": "Displays Icon to the right of title. Needs to be used along with `icon` prop.",
      "name": "iconRight",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Displays a linear gradient. See [usage](#lineargradient-usage).",
      "name": "linearGradientProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      }
    },
    "TouchableComponent": {
      "defaultValue": null,
      "description": "Component for user interaction.",
      "name": "TouchableComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "ViewComponent": {
      "defaultValue": null,
      "description": "Component for container.",
      "name": "ViewComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style of the button when disabled.",
      "name": "disabledStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "disabledTitleStyle": {
      "defaultValue": null,
      "description": "Style of the title when disabled.",
      "name": "disabledTitleStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "raised": {
      "defaultValue": null,
      "description": "Add raised button styling (optional). Has no effect if `type=\"clear\"`.",
      "name": "raised",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "iconPosition": {
      "defaultValue": null,
      "description": "Displays Icon to the position mentioned. Needs to be used along with `icon` prop.",
      "name": "iconPosition",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\" | \"top\" | \"bottom\""
      }
    },
    "color": {
      "defaultValue": null,
      "description": "Change the color of the FAB.",
      "name": "color",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/FAB/FAB.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "size": {
      "defaultValue": {
        "value": "large"
      },
      "description": "Change Size of FAB.",
      "name": "size",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/FAB/FAB.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"small\" | \"large\""
      }
    },
    "placement": {
      "defaultValue": null,
      "description": "FAB placement at bottom, (optional) use [`style`](#style) in case of custom placement.",
      "name": "placement",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/FAB/FAB.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\""
      }
    },
    "visible": {
      "defaultValue": {
        "value": true
      },
      "description": "Decide the visibility of the FAB.",
      "name": "visible",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/FAB/FAB.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "upperCase": {
      "defaultValue": null,
      "description": "Transform Extended Label text to uppercase.",
      "name": "upperCase",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/FAB/FAB.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "theme": {
      "defaultValue": {
        "value": "{\n  colors,\n}"
      },
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Header": {
    "children": {
      "defaultValue": {
        "value": "[]"
      },
      "description": "Add children component to the header.",
      "name": "children",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "d/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode & (Element | Element[])"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      }
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.\n@platform ios",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.\n@platform ios",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n@platform ios",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.\n@platform ios",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.\n@platform ios",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "ViewComponent": {
      "defaultValue": {
        "value": "linearGradientProps || !backgroundImage\n    ? View\n    : ImageBackground"
      },
      "description": "Component for container.",
      "name": "ViewComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Displays a linear gradient. See [usage](#lineargradient-usage).",
      "name": "linearGradientProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "Object"
      }
    },
    "statusBarProps": {
      "defaultValue": null,
      "description": "Accepts all props for StatusBar.",
      "name": "statusBarProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StatusBarProps"
      }
    },
    "barStyle": {
      "defaultValue": null,
      "description": "Sets the color of the status bar text.",
      "name": "barStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StatusBarStyle"
      }
    },
    "leftComponent": {
      "defaultValue": null,
      "description": "Define your left component here.",
      "name": "leftComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "centerComponent": {
      "defaultValue": null,
      "description": "Define your center component here.",
      "name": "centerComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "rightComponent": {
      "defaultValue": null,
      "description": "Define your right component here.",
      "name": "rightComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "backgroundColor": {
      "defaultValue": null,
      "description": "Sets backgroundColor of the parent component.",
      "name": "backgroundColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "backgroundImage": {
      "defaultValue": null,
      "description": "Sets backgroundImage for parent component.",
      "name": "backgroundImage",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageSourcePropType"
      }
    },
    "backgroundImageStyle": {
      "defaultValue": null,
      "description": "Styling for backgroundImage in the main container.",
      "name": "backgroundImageStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageStyle"
      }
    },
    "placement": {
      "defaultValue": {
        "value": "center"
      },
      "description": "Alignment for title.",
      "name": "placement",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\" | \"center\""
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling around the main container.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "centerContainerStyle": {
      "defaultValue": null,
      "description": "Styling for container around the centerComponent.",
      "name": "centerContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "leftContainerStyle": {
      "defaultValue": null,
      "description": "Styling for container around the leftComponent.",
      "name": "leftContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "rightContainerStyle": {
      "defaultValue": null,
      "description": "Styling for container around the rightComponent.",
      "name": "rightContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "elevated": {
      "defaultValue": null,
      "description": "Elevation for header",
      "name": "elevated",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Header/Header.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "theme": {
      "defaultValue": {
        "value": "{\n  colors,\n}"
      },
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Icon": {
    "color": {
      "defaultValue": {
        "value": "'white'"
      },
      "description": "Text and icon color\nUse iconStyle or nest a Text component if you need different colors.",
      "name": "color",
      "parent": {
        "fileName": "d/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | ColorValue"
      }
    },
    "borderRadius": {
      "defaultValue": {
        "value": "5"
      },
      "description": "Border radius of the button\nSet to 0 to disable.",
      "name": "borderRadius",
      "parent": {
        "fileName": "d/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "iconStyle": {
      "defaultValue": {
        "value": "{marginRight: 10}"
      },
      "description": "Styles applied to the icon only\nGood for setting margins or a different color.",
      "name": "iconStyle",
      "parent": {
        "fileName": "d/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TextStyle"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "Style prop inherited from TextProps and TouchableWithoutFeedbackProperties\nOnly exist here so we can have ViewStyle or TextStyle",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ViewStyle | TextStyle"
      }
    },
    "backgroundColor": {
      "defaultValue": {
        "value": "'#007AFF'"
      },
      "description": "Background color of the button",
      "name": "backgroundColor",
      "parent": {
        "fileName": "d/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconButtonProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconButtonProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | ColorValue"
      }
    },
    "size": {
      "defaultValue": {
        "value": 24
      },
      "description": "Size of the icon, can also be passed as fontSize in the style object.",
      "name": "size",
      "parent": {
        "fileName": "d/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "name": {
      "defaultValue": null,
      "description": "Name of the icon to show\n\nSee Icon Explorer app\n{@link https ://github.com/oblador/react-native-vector-icons/tree/master/Examples/IconExplorer}",
      "name": "name",
      "parent": {
        "fileName": "d/node_modules/@types/react-native-vector-icons/Icon.d.ts",
        "name": "IconProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native-vector-icons/Icon.d.ts",
          "name": "IconProps"
        }
      ],
      "required": true,
      "type": {
        "name": "string"
      }
    },
    "allowFontScaling": {
      "defaultValue": null,
      "description": "Specifies whether fonts should scale to respect Text Size accessibility settings.\nThe default is `true`.",
      "name": "allowFontScaling",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "ellipsizeMode": {
      "defaultValue": null,
      "description": "This can be one of the following values:\n\n- `head` - The line is displayed so that the end fits in the container and the missing text\nat the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n- `middle` - The line is displayed so that the beginning and end fit in the container and the\nmissing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n- `tail` - The line is displayed so that the beginning fits in the container and the\nmissing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n- `clip` - Lines are not drawn past the edge of the text container.\n\nThe default is `tail`.\n\n`numberOfLines` must be set in conjunction with this prop.\n\n> `clip` is working only for iOS",
      "name": "ellipsizeMode",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"middle\" | \"head\" | \"tail\" | \"clip\""
      }
    },
    "lineBreakMode": {
      "defaultValue": null,
      "description": "Line Break mode. Works only with numberOfLines.\nclip is working only for iOS",
      "name": "lineBreakMode",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"middle\" | \"head\" | \"tail\" | \"clip\""
      }
    },
    "numberOfLines": {
      "defaultValue": null,
      "description": "Used to truncate the text with an ellipsis after computing the text\nlayout, including line wrapping, such that the total number of lines\ndoes not exceed this number.\n\nThis prop is commonly used with `ellipsizeMode`.",
      "name": "numberOfLines",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "onTextLayout": {
      "defaultValue": null,
      "description": "Invoked on Text layout",
      "name": "onTextLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TextLayoutEventData>) => void"
      }
    },
    "onPress": {
      "defaultValue": null,
      "description": "This function is called on press.\nText intrinsically supports press handling with a default highlight state (which can be disabled with suppressHighlighting).\nCalled when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        },
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "((event: GestureResponderEvent) => void) & ((event: GestureResponderEvent) => void)"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        },
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "((event: GestureResponderEvent) => void) & ((event: GestureResponderEvent) => void)"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        },
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "((event: GestureResponderEvent) => void) & ((event: GestureResponderEvent) => void)"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "This function is called on long press.\ne.g., `onLongPress={this.increaseSize}>``\nCalled when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        },
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "((event: GestureResponderEvent) => void) & ((event: GestureResponderEvent) => void)"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "maxFontSizeMultiplier": {
      "defaultValue": null,
      "description": "Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n- null/undefined (default): inherit from the parent node or the global default (0)\n- 0: no max, ignore parent/global default\n- >= 1: sets the maxFontSizeMultiplier of this node to this value",
      "name": "maxFontSizeMultiplier",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "adjustsFontSizeToFit": {
      "defaultValue": null,
      "description": "Specifies whether font should be scaled down automatically to fit given style constraints.",
      "name": "adjustsFontSizeToFit",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "minimumFontScale": {
      "defaultValue": null,
      "description": "Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).",
      "name": "minimumFontScale",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "suppressHighlighting": {
      "defaultValue": null,
      "description": "When `true`, no visual change is made when text is pressed down. By\ndefault, a gray oval highlights the text on press down.",
      "name": "suppressHighlighting",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "selectable": {
      "defaultValue": null,
      "description": "Lets the user select text, to use the native copy and paste functionality.",
      "name": "selectable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "selectionColor": {
      "defaultValue": null,
      "description": "The highlight color of the text.",
      "name": "selectionColor",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      }
    },
    "textBreakStrategy": {
      "defaultValue": null,
      "description": "Set text break strategy on Android API Level 23+\ndefault is `highQuality`.",
      "name": "textBreakStrategy",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"simple\" | \"highQuality\" | \"balanced\""
      }
    },
    "dataDetectorType": {
      "defaultValue": null,
      "description": "Determines the types of data converted to clickable URLs in the text element.\nBy default no data types are detected.",
      "name": "dataDetectorType",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"link\" | \"phoneNumber\" | \"email\" | \"all\""
      }
    },
    "android_hyphenationFrequency": {
      "defaultValue": null,
      "description": "Hyphenation strategy",
      "name": "android_hyphenationFrequency",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"balanced\" | \"normal\" | \"full\" | \"high\""
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Determines what the opacity of the wrapped view should be when touch is active.",
      "name": "activeOpacity",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onHideUnderlay": {
      "defaultValue": null,
      "description": "Called immediately after the underlay is hidden",
      "name": "onHideUnderlay",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onShowUnderlay": {
      "defaultValue": null,
      "description": "Called immediately after the underlay is shown",
      "name": "onShowUnderlay",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "underlayColor": {
      "defaultValue": {
        "value": "transparent"
      },
      "description": "The color of the underlay that will show through when the touch is active.",
      "name": "underlayColor",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableHighlightProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableHighlightProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      }
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Delay in ms, from onPressIn, before onLongPress is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "delayPressIn": {
      "defaultValue": null,
      "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
      "name": "delayPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "delayPressOut": {
      "defaultValue": null,
      "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
      "name": "delayPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "disabled": {
      "defaultValue": {
        "value": false
      },
      "description": "If true, disable all interactions for this component.\nDisables onPress events. Only works when `onPress` has a handler.",
      "name": "disabled",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Icon/Icon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far your touch can start away from the button.\nThis is added to pressRetentionOffset when moving off of the button.\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch hits\ntwo overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "onBlur": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"blur\" occurs, meaning the element lost focus.\nSome platforms may not have the concept of blur.",
      "name": "onBlur",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"focus\" occurs. Some platforms may not have\nthe concept of focus.",
      "name": "onFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "When the scroll view is disabled, this defines how far your\ntouch may move off of the button, before deactivating the button.\nOnce deactivated, try moving it back and you'll see that the button\nis once again reactivated! Move it back and forth several times\nwhile the scroll view is disabled. Ensure you pass in a constant\nto reduce memory allocations.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "touchSoundDisabled": {
      "defaultValue": null,
      "description": "If true, doesn't play a system sound on touch.\n@platform android",
      "name": "touchSoundDisabled",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "background": {
      "defaultValue": null,
      "description": "Determines the type of background drawable that's going to be used to display feedback.\nIt takes an object with type property and extra data depending on the type.\nIt's recommended to use one of the following static methods to generate that dictionary:\n     1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n        default background for selectable elements (?android:attr/selectableItemBackground)\n     2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n        theme's default background for borderless selectable elements\n        (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n        with specified color (as a string). If property borderless evaluates to true the ripple will render\n        outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n        type is available on Android API level 21+",
      "name": "background",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "BackgroundPropType"
      }
    },
    "useForeground": {
      "defaultValue": null,
      "description": "",
      "name": "useForeground",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* TV preferred focus (see documentation for the View component).\n@platform ios",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "nextFocusDown": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates down. See the Android documentation.\n@platform android",
      "name": "nextFocusDown",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusForward": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates forward. See the Android documentation.\n@platform android",
      "name": "nextFocusForward",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusLeft": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates left. See the Android documentation.\n@platform android",
      "name": "nextFocusLeft",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusRight": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates right. See the Android documentation.\n@platform android",
      "name": "nextFocusRight",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusUp": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates up. See the Android documentation.\n@platform android",
      "name": "nextFocusUp",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "type": {
      "defaultValue": {
        "value": "material"
      },
      "description": "Type of icon set. [Supported sets here](#available-icon-sets).",
      "name": "type",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Icon/Icon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "Component": {
      "defaultValue": {
        "value": "onPress || onLongPress || onPressIn || onPressOut\n    ? Pressable\n    : View"
      },
      "description": "Update React Native Component.",
      "name": "Component",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Icon/Icon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "reverse": {
      "defaultValue": {
        "value": false
      },
      "description": "Reverses color scheme.",
      "name": "reverse",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Icon/Icon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "raised": {
      "defaultValue": {
        "value": false
      },
      "description": "Adds box shadow to button.",
      "name": "raised",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Icon/Icon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Add styling to container holding icon.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Icon/Icon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "iconProps": {
      "defaultValue": null,
      "description": "Provide all props from react-native Icon component.",
      "name": "iconProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Icon/Icon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "IconProps"
      }
    },
    "reverseColor": {
      "defaultValue": null,
      "description": "Specify reverse icon color.",
      "name": "reverseColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Icon/Icon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style for the button when disabled. Only works when `onPress` has a handler.",
      "name": "disabledStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Icon/Icon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "solid": {
      "defaultValue": {
        "value": false
      },
      "description": "Uses the solid font.",
      "name": "solid",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Icon/Icon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "brand": {
      "defaultValue": {
        "value": false
      },
      "description": "Uses the brands font (FontAwesome5 only).",
      "name": "brand",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Icon/Icon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      }
    },
    "theme": {
      "defaultValue": {
        "value": "{\n  colors,\n}"
      },
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "DefaultImage": {
    "style": {
      "defaultValue": null,
      "description": "Style",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImageProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImageProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ImageStyle>"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "onLayout function\n\nInvoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height} }}.",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "onError": {
      "defaultValue": null,
      "description": "Invoked on load error with {nativeEvent: {error}}",
      "name": "onError",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "(error: NativeSyntheticEvent<ImageErrorEventData>) => void"
      }
    },
    "onLoad": {
      "defaultValue": null,
      "description": "Invoked when load completes successfully\n{ source: { uri, height, width } }.",
      "name": "onLoad",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<ImageLoadEventData>) => void"
      }
    },
    "onLoadEnd": {
      "defaultValue": null,
      "description": "Invoked when load either succeeds or fails",
      "name": "onLoadEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onLoadStart": {
      "defaultValue": null,
      "description": "Invoked on load start",
      "name": "onLoadStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "progressiveRenderingEnabled": {
      "defaultValue": null,
      "description": "",
      "name": "progressiveRenderingEnabled",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "borderRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderRadius",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "borderTopLeftRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderTopLeftRadius",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "borderTopRightRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderTopRightRadius",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "borderBottomLeftRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderBottomLeftRadius",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "borderBottomRightRadius": {
      "defaultValue": null,
      "description": "",
      "name": "borderBottomRightRadius",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "resizeMode": {
      "defaultValue": null,
      "description": "Determines how to resize the image when the frame doesn't match the raw\nimage dimensions.\n\n'cover': Scale the image uniformly (maintain the image's aspect ratio)\nso that both dimensions (width and height) of the image will be equal\nto or larger than the corresponding dimension of the view (minus padding).\n\n'contain': Scale the image uniformly (maintain the image's aspect ratio)\nso that both dimensions (width and height) of the image will be equal to\nor less than the corresponding dimension of the view (minus padding).\n\n'stretch': Scale width and height independently, This may change the\naspect ratio of the src.\n\n'repeat': Repeat the image to cover the frame of the view.\nThe image will keep it's size and aspect ratio. (iOS only)\n\n'center': Scale the image down so that it is completely visible,\nif bigger than the area of the view.\nThe image will not be scaled up.",
      "name": "resizeMode",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageResizeMode"
      }
    },
    "resizeMethod": {
      "defaultValue": null,
      "description": "The mechanism that should be used to resize the image when the image's dimensions\ndiffer from the image view's dimensions. Defaults to `auto`.\n\n- `auto`: Use heuristics to pick between `resize` and `scale`.\n\n- `resize`: A software operation which changes the encoded image in memory before it\ngets decoded. This should be used instead of `scale` when the image is much larger\nthan the view.\n\n- `scale`: The image gets drawn downscaled or upscaled. Compared to `resize`, `scale` is\nfaster (usually hardware accelerated) and produces higher quality images. This\nshould be used if the image is smaller than the view. It should also be used if the\nimage is slightly bigger than the view.\n\nMore details about `resize` and `scale` can be found at http://frescolib.org/docs/resizing-rotating.html.\n@platform android",
      "name": "resizeMethod",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"resize\" | \"scale\""
      }
    },
    "source": {
      "defaultValue": null,
      "description": "The image source (either a remote URL or a local file resource).\n\nThis prop can also contain several remote URLs, specified together with their width and height and potentially with scale/other URI arguments.\nThe native side will then choose the best uri to display based on the measured size of the image container.\nA cache property can be added to control how networked request interacts with the local cache.\n\nThe currently supported formats are png, jpg, jpeg, bmp, gif, webp (Android only), psd (iOS only).",
      "name": "source",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": true,
      "type": {
        "name": "ImageSourcePropType"
      }
    },
    "loadingIndicatorSource": {
      "defaultValue": null,
      "description": "similarly to `source`, this property represents the resource used to render\nthe loading indicator for the image, displayed until image is ready to be\ndisplayed, typically after when it got downloaded from network.",
      "name": "loadingIndicatorSource",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "ImageURISource"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "A unique identifier for this element to be used in UI Automation testing scripts.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed images from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "defaultSource": {
      "defaultValue": null,
      "description": "A static image to display while downloading the final image off the network.",
      "name": "defaultSource",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsBase"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsBase"
        }
      ],
      "required": false,
      "type": {
        "name": "number | ImageURISource"
      }
    },
    "blurRadius": {
      "defaultValue": null,
      "description": "blurRadius: the blur radius of the blur filter added to the image\n@platform ios",
      "name": "blurRadius",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "capInsets": {
      "defaultValue": null,
      "description": "When the image is resized, the corners of the size specified by capInsets will stay a fixed size,\nbut the center content and borders of the image will be stretched.\nThis is useful for creating resizable rounded buttons, shadows, and other resizable assets.\nMore info on Apple documentation",
      "name": "capInsets",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "onProgress": {
      "defaultValue": null,
      "description": "Invoked on download progress with {nativeEvent: {loaded, total}}",
      "name": "onProgress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<ImageProgressEventDataIOS>) => void"
      }
    },
    "onPartialLoad": {
      "defaultValue": null,
      "description": "Invoked when a partial load of the image is complete. The definition of\nwhat constitutes a \"partial load\" is loader specific though this is meant\nfor progressive JPEG loads.\n@platform ios",
      "name": "onPartialLoad",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "fadeDuration": {
      "defaultValue": null,
      "description": "Duration of fade in animation in ms. Defaults to 300\n@platform android",
      "name": "fadeDuration",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "width": {
      "defaultValue": null,
      "description": "Required if loading images via 'uri' from drawable folder on Android.\nExplanation: https://medium.com/@adamjacobb/react-native-performance-images-adf5843e120",
      "name": "width",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "height": {
      "defaultValue": null,
      "description": "Required if loading images via 'uri' from drawable folder on Android\nExplanation: https://medium.com/@adamjacobb/react-native-performance-images-adf5843e120",
      "name": "height",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ImagePropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ImagePropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      }
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.\nCallback function when pressing component.",
      "name": "onPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Image/Image.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "((event: GestureResponderEvent) => void) & (() => void)"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.\nCallback function when long pressing component.",
      "name": "onLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Image/Image.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "((event: GestureResponderEvent) => void) & (() => void)"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "Component": {
      "defaultValue": {
        "value": "`Press handlers present then Pressable else View`"
      },
      "description": "Define the component passed to image.",
      "name": "Component",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Image/Image.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "ImageComponent": {
      "defaultValue": null,
      "description": "Specify a different component as the Image component.",
      "name": "ImageComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Image/Image.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "PlaceholderContent": {
      "defaultValue": null,
      "description": "Content to load when Image is rendering.",
      "name": "PlaceholderContent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Image/Image.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "React.ReactElement"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Additional styling for the container.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Image/Image.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "childrenContainerStyle": {
      "defaultValue": null,
      "description": "Additional styling for the children container.",
      "name": "childrenContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Image/Image.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "placeholderStyle": {
      "defaultValue": null,
      "description": "Additional styling for the placeholder container.",
      "name": "placeholderStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Image/Image.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "transition": {
      "defaultValue": null,
      "description": "Perform fade transition on image load.",
      "name": "transition",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Image/Image.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "transitionDuration": {
      "defaultValue": null,
      "description": "Perform fade transition on image load.",
      "name": "transitionDuration",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Image/Image.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Default": {
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      }
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "Add additional styling for linear progress component.",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/LinearProgress/LinearProgress.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.\n@platform ios",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.\n@platform ios",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n@platform ios",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.\n@platform ios",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.\n@platform ios",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "value": {
      "defaultValue": null,
      "description": "The value of the progress indicator for the determinate variant. Value between 0 and 1.",
      "name": "value",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/LinearProgress/LinearProgress.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "variant": {
      "defaultValue": null,
      "description": "Type of button.",
      "name": "variant",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/LinearProgress/LinearProgress.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"indeterminate\" | \"determinate\""
      }
    },
    "color": {
      "defaultValue": null,
      "description": "Color for linear progress.",
      "name": "color",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/LinearProgress/LinearProgress.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "trackColor": {
      "defaultValue": null,
      "description": "Track color for linear progress.",
      "name": "trackColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/LinearProgress/LinearProgress.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "animation": {
      "defaultValue": null,
      "description": "Animation duration",
      "name": "animation",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/LinearProgress/LinearProgress.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean | { duration?: number; }"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "ListItem": {
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onBlur": {
      "defaultValue": null,
      "description": "Called after the element loses focus.\n@platform windows",
      "name": "onBlur",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "Called after the element is focused.\n@platform windows",
      "name": "onFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "children": {
      "defaultValue": null,
      "description": "Either children or a render prop that receives a boolean reflecting whether\nthe component is currently pressed.\nAdd enclosed children.",
      "name": "children",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ListItem/ListItem.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "d/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "cancelable": {
      "defaultValue": null,
      "description": "Whether a press gesture can be interrupted by a parent gesture such as a\nscroll event. Defaults to true.",
      "name": "cancelable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "Whether the press behavior is disabled.",
      "name": "disabled",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a press is detected.",
      "name": "hitSlop",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      }
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a touch is considered a\npress before `onPressOut` is triggered.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      }
    },
    "android_disableSound": {
      "defaultValue": null,
      "description": "If true, doesn't play system sound on touch.",
      "name": "android_disableSound",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "android_ripple": {
      "defaultValue": null,
      "description": "Enables the Android ripple effect and configures its color.",
      "name": "android_ripple",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableAndroidRippleConfig"
      }
    },
    "testOnly_pressed": {
      "defaultValue": null,
      "description": "Used only for documentation or testing (e.g. snapshot testing).",
      "name": "testOnly_pressed",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "Either view styles or a function that receives a boolean reflecting whether\nthe component is currently pressed and returns view styles.",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle> | ((state: PressableStateCallbackType) => StyleProp<ViewStyle>)"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      }
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.\n@platform ios",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.\n@platform ios",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n@platform ios",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.\n@platform ios",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.\n@platform ios",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Additional main container styling.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ListItem/ListItem.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Specific styling to be used when list item is disabled.",
      "name": "disabledStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ListItem/ListItem.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "topDivider": {
      "defaultValue": null,
      "description": "Add divider at the top of the list item.",
      "name": "topDivider",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ListItem/ListItem.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "bottomDivider": {
      "defaultValue": null,
      "description": "Add divider at the bottom of the list item.",
      "name": "bottomDivider",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ListItem/ListItem.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "pad": {
      "defaultValue": null,
      "description": "Adds spacing between the leftComponent, the title component & right component.",
      "name": "pad",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ListItem/ListItem.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "Component": {
      "defaultValue": null,
      "description": "Replace element with custom element.",
      "name": "Component",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ListItem/ListItem.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "ViewComponent": {
      "defaultValue": null,
      "description": "Container for linear gradient.",
      "name": "ViewComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ListItem/ListItem.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Props for linear gradient component.",
      "name": "linearGradientProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/ListItem/ListItem.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Overlay": {
    "style": {
      "defaultValue": null,
      "description": "",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      }
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.\n@platform ios",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.\n@platform ios",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n@platform ios",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.\n@platform ios",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.\n@platform ios",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "animated": {
      "defaultValue": null,
      "description": "@deprecated Use animationType instead",
      "name": "animated",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "animationType": {
      "defaultValue": null,
      "description": "The `animationType` prop controls how the modal animates.\n\n- `slide` slides in from the bottom\n- `fade` fades into view\n- `none` appears without an animation",
      "name": "animationType",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"slide\" | \"fade\""
      }
    },
    "transparent": {
      "defaultValue": null,
      "description": "The `transparent` prop determines whether your modal will fill the entire view.\nSetting this to `true` will render the modal over a transparent background.",
      "name": "transparent",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onRequestClose": {
      "defaultValue": null,
      "description": "The `onRequestClose` prop allows passing a function that will be called once the modal has been dismissed.\n_On the Android platform, this is a required function._",
      "name": "onRequestClose",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onShow": {
      "defaultValue": null,
      "description": "The `onShow` prop allows passing a function that will be called once the modal has been shown.",
      "name": "onShow",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalBaseProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalBaseProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<any>) => void"
      }
    },
    "presentationStyle": {
      "defaultValue": null,
      "description": "The `presentationStyle` determines the style of modal to show",
      "name": "presentationStyle",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "\"fullScreen\" | \"pageSheet\" | \"formSheet\" | \"overFullScreen\""
      }
    },
    "supportedOrientations": {
      "defaultValue": null,
      "description": "The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.\nOn iOS, the modal is still restricted by what's specified in your app's Info.plist's UISupportedInterfaceOrientations field.",
      "name": "supportedOrientations",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "(\"portrait\" | \"portrait-upside-down\" | \"landscape\" | \"landscape-left\" | \"landscape-right\")[]"
      }
    },
    "onDismiss": {
      "defaultValue": null,
      "description": "The `onDismiss` prop allows passing a function that will be called once the modal has been dismissed.",
      "name": "onDismiss",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onOrientationChange": {
      "defaultValue": null,
      "description": "The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed.\nThe orientation provided is only 'portrait' or 'landscape'. This callback is also called on initial render, regardless of the current orientation.",
      "name": "onOrientationChange",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<any>) => void"
      }
    },
    "hardwareAccelerated": {
      "defaultValue": null,
      "description": "Controls whether to force hardware acceleration for the underlying window.",
      "name": "hardwareAccelerated",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "statusBarTranslucent": {
      "defaultValue": null,
      "description": "Determines whether your modal should go under the system statusbar.",
      "name": "statusBarTranslucent",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ModalPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ModalPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "isVisible": {
      "defaultValue": null,
      "description": "If true, the overlay is visible.",
      "name": "isVisible",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Overlay/Overlay.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": true,
      "type": {
        "name": "boolean"
      }
    },
    "backdropStyle": {
      "defaultValue": null,
      "description": "Style of the backdrop container.",
      "name": "backdropStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Overlay/Overlay.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "overlayStyle": {
      "defaultValue": null,
      "description": "Style of the actual overlay.",
      "name": "overlayStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Overlay/Overlay.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "onBackdropPress": {
      "defaultValue": {
        "value": "() => null"
      },
      "description": "Handler for backdrop press (only works when `fullscreen` is false).",
      "name": "onBackdropPress",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Overlay/Overlay.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "fullScreen": {
      "defaultValue": {
        "value": false
      },
      "description": "If set to true, the modal will take up the entire screen width and height.",
      "name": "fullScreen",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Overlay/Overlay.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "ModalComponent": {
      "defaultValue": null,
      "description": "Override React Native `Modal` component (usable for web-platform).",
      "name": "ModalComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Overlay/Overlay.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "PricingCard": {
    "containerStyle": {
      "defaultValue": null,
      "description": "Outer component styling.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/PricingCard/PricingCard.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "wrapperStyle": {
      "defaultValue": null,
      "description": "Inner wrapper component styling.",
      "name": "wrapperStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/PricingCard/PricingCard.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "title": {
      "defaultValue": null,
      "description": "Add title in the pricing card.",
      "name": "title",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/PricingCard/PricingCard.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "price": {
      "defaultValue": null,
      "description": "Price mentioned in the pricing card.",
      "name": "price",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/PricingCard/PricingCard.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string | number"
      }
    },
    "info": {
      "defaultValue": {
        "value": "[]"
      },
      "description": "Pricing information.",
      "name": "info",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/PricingCard/PricingCard.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string[]"
      }
    },
    "button": {
      "defaultValue": null,
      "description": "Button information.",
      "name": "button",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/PricingCard/PricingCard.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ButtonProps | ButtonInformation"
      }
    },
    "color": {
      "defaultValue": {
        "value": "theme?.colors?.primary"
      },
      "description": "Color scheme for button & title.",
      "name": "color",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/PricingCard/PricingCard.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "onButtonPress": {
      "defaultValue": null,
      "description": "Function to be run when button is pressed.",
      "name": "onButtonPress",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/PricingCard/PricingCard.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Specify title text style.",
      "name": "titleStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/PricingCard/PricingCard.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "pricingStyle": {
      "defaultValue": null,
      "description": "Specify pricing text style.",
      "name": "pricingStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/PricingCard/PricingCard.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "infoStyle": {
      "defaultValue": null,
      "description": "Specify pricing information style.",
      "name": "infoStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/PricingCard/PricingCard.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "theme": {
      "defaultValue": {
        "value": "{\n  colors,\n}"
      },
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Rating": {
    "type": {
      "defaultValue": null,
      "description": "Graphic used for represent a rating\n\nDefault is 'star'",
      "name": "type",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "ratingImage": {
      "defaultValue": null,
      "description": "Pass in a custom image source; use this along with type='custom' prop above",
      "name": "ratingImage",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "React.ReactNode"
      }
    },
    "ratingColor": {
      "defaultValue": null,
      "description": "Pass in a custom fill-color for the rating icon; use this along with type='custom' prop above\n\nDefault is '#f1c40f'",
      "name": "ratingColor",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "ratingBackgroundColor": {
      "defaultValue": null,
      "description": "Pass in a custom background-fill-color for the rating icon; use this along with type='custom' prop above\n\nDefault is 'white'",
      "name": "ratingBackgroundColor",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "ratingCount": {
      "defaultValue": null,
      "description": "Number of rating images to display\n\nDefault is 5",
      "name": "ratingCount",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "ratingTextColor": {
      "defaultValue": null,
      "description": "Color used for the text labels",
      "name": "ratingTextColor",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "imageSize": {
      "defaultValue": null,
      "description": "The size of each rating image\n\nDefault is 50",
      "name": "imageSize",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onStartRating": {
      "defaultValue": null,
      "description": "Callback method when the user starts rating.",
      "name": "onStartRating",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      }
    },
    "onFinishRating": {
      "defaultValue": null,
      "description": "Callback method when the user finishes rating. Gives you the final rating value as a whole number",
      "name": "onFinishRating",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "Function"
      }
    },
    "showRating": {
      "defaultValue": null,
      "description": "Displays the Built-in Rating UI to show the rating value in real-time\n\nDefault is false",
      "name": "showRating",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "Exposes style prop to add additonal styling to the container view",
      "name": "style",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "readonly": {
      "defaultValue": null,
      "description": "Whether the rating can be modiefied by the user\n\nDefault is false",
      "name": "readonly",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "showReadOnlyText": {
      "defaultValue": null,
      "description": "Whether the text is read only\n\nDefault is false",
      "name": "showReadOnlyText",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "startingValue": {
      "defaultValue": null,
      "description": "The initial rating to render\n\nDefault is ratingCount/2",
      "name": "startingValue",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "fractions": {
      "defaultValue": null,
      "description": "The number of decimal places for the rating value; must be between 0 and 20",
      "name": "fractions",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "minValue": {
      "defaultValue": null,
      "description": "The minimum value the user can select\n\nDefault is 0",
      "name": "minValue",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onSwipeRating": {
      "defaultValue": null,
      "description": "Callback method when the user is swiping.",
      "name": "onSwipeRating",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(number: any) => void"
      }
    },
    "tintColor": {
      "defaultValue": null,
      "description": "Color used for the background",
      "name": "tintColor",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "jumpValue": {
      "defaultValue": null,
      "description": "The number to jump per swipe\nDefault is 0 (not to jump)",
      "name": "jumpValue",
      "declarations": [
        {
          "fileName": "d/node_modules/react-native-ratings/dist/SwipeRating.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Slider": {
    "value": {
      "defaultValue": {
        "value": 0
      },
      "description": "Initial value of the slider.",
      "name": "value",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "If true the user won't be able to move the slider.",
      "name": "disabled",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "minimumValue": {
      "defaultValue": {
        "value": 0
      },
      "description": "Initial minimum value of the slider.",
      "name": "minimumValue",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "maximumValue": {
      "defaultValue": {
        "value": 1
      },
      "description": "Initial maximum value of the slider.",
      "name": "maximumValue",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "step": {
      "defaultValue": {
        "value": 0
      },
      "description": "Step value of the slider. The value should be between 0 and maximumValue - minimumValue).",
      "name": "step",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "minimumTrackTintColor": {
      "defaultValue": {
        "value": "#3f3f3f"
      },
      "description": "The color used for the track to the left of the button.",
      "name": "minimumTrackTintColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "maximumTrackTintColor": {
      "defaultValue": {
        "value": "#b3b3b3"
      },
      "description": "The color used for the track to the right of the button.",
      "name": "maximumTrackTintColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "allowTouchTrack": {
      "defaultValue": {
        "value": false
      },
      "description": "If true, thumb will respond and jump to any touch along the track.",
      "name": "allowTouchTrack",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "thumbTintColor": {
      "defaultValue": {
        "value": "red"
      },
      "description": "The color used for the thumb.",
      "name": "thumbTintColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "thumbTouchSize": {
      "defaultValue": {
        "value": "{ width: THUMB_SIZE, height: THUMB_SIZE }"
      },
      "description": "The size of the touch area that allows moving the thumb. The touch area has the same center as the visible thumb. This allows to have a visually small thumb while still allowing the user to move it easily.",
      "name": "thumbTouchSize",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "Sizable"
      }
    },
    "onValueChange": {
      "defaultValue": null,
      "description": "Callback continuously called while the user is dragging the slider.",
      "name": "onValueChange",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(value: number) => void"
      }
    },
    "onSlidingStart": {
      "defaultValue": null,
      "description": "Callback called when the user starts changing the value (e.g. when the slider is pressed).",
      "name": "onSlidingStart",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(value: number) => void"
      }
    },
    "onSlidingComplete": {
      "defaultValue": null,
      "description": "Callback called when the user finishes changing the value (e.g. when the slider is released).",
      "name": "onSlidingComplete",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(value: number) => void"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "The style applied to the slider container.",
      "name": "style",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "trackStyle": {
      "defaultValue": null,
      "description": "The style applied to the track.",
      "name": "trackStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "thumbStyle": {
      "defaultValue": null,
      "description": "The style applied to the thumb.",
      "name": "thumbStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "thumbProps": {
      "defaultValue": null,
      "description": "The props applied to the thumb. Uses `Component` prop which can accept `Animated` components.",
      "name": "thumbProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "debugTouchArea": {
      "defaultValue": {
        "value": false
      },
      "description": "Set this to true to visually see the thumb touch rect in green.",
      "name": "debugTouchArea",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "animateTransitions": {
      "defaultValue": null,
      "description": "Set to true if you want to use the default 'spring' animation.",
      "name": "animateTransitions",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "animationType": {
      "defaultValue": {
        "value": "timing"
      },
      "description": "Set to 'spring' or 'timing' to use one of those two types of animations with the default [animation properties](https://reactnative.dev/docs/animations.html).",
      "name": "animationType",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"spring\" | \"timing\""
      }
    },
    "orientation": {
      "defaultValue": {
        "value": "horizontal"
      },
      "description": "Set the orientation of the slider.",
      "name": "orientation",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"vertical\" | \"horizontal\""
      }
    },
    "animationConfig": {
      "defaultValue": null,
      "description": "Used to configure the animation parameters. These are the same parameters in the [Animated library](https://reactnative.dev/docs/animations.html).",
      "name": "animationConfig",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "TimingAnimationConfig | SpringAnimationConfig"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Apply style to the container of the slider.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Slider/Slider.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ containerHorizontal: { height: number; justifyContent: \"center\"; }; containerVertical: { width: number; flexDirection: \"column\"; alignItems: \"center\"; }; track: { borderRadius: number; }; trackHorizontal: { ...; }; trackVertical: { ...; }; touchArea: { ...; }; debugThumbTouchArea: { ...; }; }"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "SocialIcon": {
    "Component": {
      "defaultValue": {
        "value": "onPress || onLongPress || onPressIn || onPressOut\n    ? Pressable\n    : View"
      },
      "description": "Type of button.",
      "name": "Component",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "type": {
      "defaultValue": null,
      "description": "Social media type.",
      "name": "type",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "SocialMediaType"
      }
    },
    "button": {
      "defaultValue": {
        "value": false
      },
      "description": "Creates button with a social icon.",
      "name": "button",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "iconType": {
      "defaultValue": {
        "value": "font-awesome"
      },
      "description": "Type of icon set. [Supported sets here](icon#available-icon-sets).",
      "name": "iconType",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "iconStyle": {
      "defaultValue": null,
      "description": "Extra styling for icon component.",
      "name": "iconStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "Adds styling to the button.",
      "name": "style",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "iconColor": {
      "defaultValue": {
        "value": "white"
      },
      "description": "Specify the color of the icon.",
      "name": "iconColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "underlayColor": {
      "defaultValue": null,
      "description": "Add Underlay color.",
      "name": "underlayColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "title": {
      "defaultValue": null,
      "description": "Title if made into a button.",
      "name": "title",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "raised": {
      "defaultValue": {
        "value": true
      },
      "description": "Raised adds a drop shadow, set to false to remove.",
      "name": "raised",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disables the button, if true.",
      "name": "disabled",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "loading": {
      "defaultValue": null,
      "description": "Shows loading indicator.",
      "name": "loading",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "activityIndicatorStyle": {
      "defaultValue": null,
      "description": "Style to render when in loading state.",
      "name": "activityIndicatorStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "small": {
      "defaultValue": null,
      "description": "Decides the size of the activity indicator.",
      "name": "small",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "iconSize": {
      "defaultValue": {
        "value": 24
      },
      "description": "Specify the size of the icon.",
      "name": "iconSize",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "light": {
      "defaultValue": null,
      "description": "Reverses icon color scheme, setting background to white and icon to primary color.",
      "name": "light",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "fontWeight": {
      "defaultValue": null,
      "description": "Specify font weight of title if set as a button with a title.",
      "name": "fontWeight",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "fontStyle": {
      "defaultValue": null,
      "description": "Specify text styling.",
      "name": "fontStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "fontFamily": {
      "defaultValue": null,
      "description": "Specify different font family.",
      "name": "fontFamily",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SocialIcon/SocialIcon.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "pressableProps": {
      "defaultValue": {
        "value": "None"
      },
      "description": "",
      "name": "pressableProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps except click handlers"
      }
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "DefaultSpeedDial": {
    "isOpen": {
      "defaultValue": null,
      "description": "Opens the action stack.",
      "name": "isOpen",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SpeedDial/SpeedDial.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": true,
      "type": {
        "name": "boolean"
      }
    },
    "onOpen": {
      "defaultValue": null,
      "description": "Callback fired when the component requests to be open.",
      "name": "onOpen",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SpeedDial/SpeedDial.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onClose": {
      "defaultValue": null,
      "description": "Callback fired when the component requests to be closed.",
      "name": "onClose",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SpeedDial/SpeedDial.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "openIcon": {
      "defaultValue": null,
      "description": "Icon shown on FAB when action stack is open.",
      "name": "openIcon",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SpeedDial/SpeedDial.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "overlayColor": {
      "defaultValue": null,
      "description": "Add overlay color to the speed dial.",
      "name": "overlayColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SpeedDial/SpeedDial.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "children": {
      "defaultValue": null,
      "description": "SpeedDial Action as children.",
      "name": "children",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SpeedDial/SpeedDial.tsx",
          "name": "TypeLiteral"
        },
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        },
        {
          "fileName": "d/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "React.ReactChild[] & ReactNode"
      }
    },
    "transitionDuration": {
      "defaultValue": null,
      "description": "The duration for the transition, in milliseconds.",
      "name": "transitionDuration",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SpeedDial/SpeedDial.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "backdropPressableProps": {
      "defaultValue": null,
      "description": "Props for Backdrop Pressable",
      "name": "backdropPressableProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/SpeedDial/SpeedDial.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableProps"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Determines what the opacity of the wrapped view should be when touch is active.\nDefaults to 0.2",
      "name": "activeOpacity",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n\nenabled: If true, parallax effects are enabled.  Defaults to true.\nshiftDistanceX: Defaults to 2.0.\nshiftDistanceY: Defaults to 2.0.\ntiltAngle: Defaults to 0.05.\nmagnification: Defaults to 1.0.\npressMagnification: Defaults to 1.0.\npressDuration: Defaults to 0.3.\npressDelay: Defaults to 0.0.\n@platform android",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableOpacityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableOpacityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      }
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Delay in ms, from onPressIn, before onLongPress is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "delayPressIn": {
      "defaultValue": null,
      "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
      "name": "delayPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "delayPressOut": {
      "defaultValue": null,
      "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
      "name": "delayPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "If true, disable all interactions for this component.\nDisables user interaction.",
      "name": "disabled",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far your touch can start away from the button.\nThis is added to pressRetentionOffset when moving off of the button.\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch hits\ntwo overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "onBlur": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"blur\" occurs, meaning the element lost focus.\nSome platforms may not have the concept of blur.",
      "name": "onBlur",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "When `accessible` is true (which is the default) this may be called when\nthe OS-specific concept of \"focus\" occurs. Some platforms may not have\nthe concept of focus.",
      "name": "onFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n{nativeEvent: {layout: {x, y, width, height}}}",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "",
      "name": "onLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPress": {
      "defaultValue": null,
      "description": "Called when the touch is released,\nbut not if cancelled (e.g. by a scroll that steals the responder lock).",
      "name": "onPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "//FIXME: not in doc but available in examples\nStyle for FAB",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        },
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/FAB/FAB.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "When the scroll view is disabled, this defines how far your\ntouch may move off of the button, before deactivating the button.\nOnce deactivated, try moving it back and you'll see that the button\nis once again reactivated! Move it back and forth several times\nwhile the scroll view is disabled. Ensure you pass in a constant\nto reduce memory allocations.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "touchSoundDisabled": {
      "defaultValue": null,
      "description": "If true, doesn't play a system sound on touch.\n@platform android",
      "name": "touchSoundDisabled",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableWithoutFeedbackPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableWithoutFeedbackPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* TV preferred focus (see documentation for the View component).\n@platform ios",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "nextFocusDown": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates down. See the Android documentation.\n@platform android",
      "name": "nextFocusDown",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusForward": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates forward. See the Android documentation.\n@platform android",
      "name": "nextFocusForward",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusLeft": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates left. See the Android documentation.\n@platform android",
      "name": "nextFocusLeft",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusRight": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates right. See the Android documentation.\n@platform android",
      "name": "nextFocusRight",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "nextFocusUp": {
      "defaultValue": null,
      "description": "Designates the next view to receive focus when the user navigates up. See the Android documentation.\n@platform android",
      "name": "nextFocusUp",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "background": {
      "defaultValue": null,
      "description": "Determines the type of background drawable that's going to be used to display feedback.\nIt takes an object with type property and extra data depending on the type.\nIt's recommended to use one of the following static methods to generate that dictionary:\n     1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n        default background for selectable elements (?android:attr/selectableItemBackground)\n     2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n        theme's default background for borderless selectable elements\n        (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n        with specified color (as a string). If property borderless evaluates to true the ripple will render\n        outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n        type is available on Android API level 21+",
      "name": "background",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "BackgroundPropType"
      }
    },
    "useForeground": {
      "defaultValue": null,
      "description": "",
      "name": "useForeground",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TouchableNativeFeedbackProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TouchableNativeFeedbackProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "title": {
      "defaultValue": null,
      "description": "Add button title.",
      "name": "title",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Add additional styling for title component.",
      "name": "titleStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "titleProps": {
      "defaultValue": null,
      "description": "Add additional props for Text component.",
      "name": "titleProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "TextProps"
      }
    },
    "buttonStyle": {
      "defaultValue": null,
      "description": "Add additional styling for button component.",
      "name": "buttonStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "type": {
      "defaultValue": null,
      "description": "Type of button.",
      "name": "type",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"solid\" | \"clear\" | \"outline\""
      }
    },
    "loading": {
      "defaultValue": null,
      "description": "Prop to display a loading spinner.",
      "name": "loading",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "loadingStyle": {
      "defaultValue": null,
      "description": "Add additional styling for loading component.",
      "name": "loadingStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "loadingProps": {
      "defaultValue": null,
      "description": "Add additional props for ActivityIndicator component.",
      "name": "loadingProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ActivityIndicatorProps"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for Component container.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "icon": {
      "defaultValue": null,
      "description": "Displays a centered icon (when no title) or to the left (with text). (can be used along with iconRight as well). Can be an object or a custom component.",
      "name": "icon",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "iconContainerStyle": {
      "defaultValue": null,
      "description": "Styling for Icon Component container.",
      "name": "iconContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "iconRight": {
      "defaultValue": null,
      "description": "Displays Icon to the right of title. Needs to be used along with `icon` prop.",
      "name": "iconRight",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "linearGradientProps": {
      "defaultValue": null,
      "description": "Displays a linear gradient. See [usage](#lineargradient-usage).",
      "name": "linearGradientProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      }
    },
    "TouchableComponent": {
      "defaultValue": null,
      "description": "Component for user interaction.",
      "name": "TouchableComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "ViewComponent": {
      "defaultValue": null,
      "description": "Component for container.",
      "name": "ViewComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "disabledStyle": {
      "defaultValue": null,
      "description": "Style of the button when disabled.",
      "name": "disabledStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "disabledTitleStyle": {
      "defaultValue": null,
      "description": "Style of the title when disabled.",
      "name": "disabledTitleStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "raised": {
      "defaultValue": null,
      "description": "Add raised button styling (optional). Has no effect if `type=\"clear\"`.",
      "name": "raised",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "iconPosition": {
      "defaultValue": null,
      "description": "Displays Icon to the position mentioned. Needs to be used along with `icon` prop.",
      "name": "iconPosition",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Button/Button.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\" | \"top\" | \"bottom\""
      }
    },
    "color": {
      "defaultValue": null,
      "description": "Change the color of the FAB.",
      "name": "color",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/FAB/FAB.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "size": {
      "defaultValue": null,
      "description": "Change Size of FAB.",
      "name": "size",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/FAB/FAB.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"small\" | \"large\""
      }
    },
    "placement": {
      "defaultValue": null,
      "description": "FAB placement at bottom, (optional) use [`style`](#style) in case of custom placement.",
      "name": "placement",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/FAB/FAB.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"left\" | \"right\""
      }
    },
    "visible": {
      "defaultValue": null,
      "description": "Decide the visibility of the FAB.",
      "name": "visible",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/FAB/FAB.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "upperCase": {
      "defaultValue": null,
      "description": "Transform Extended Label text to uppercase.",
      "name": "upperCase",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/FAB/FAB.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Switch": {
    "thumbColor": {
      "defaultValue": null,
      "description": "Color of the foreground switch grip.",
      "name": "thumbColor",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      }
    },
    "trackColor": {
      "defaultValue": null,
      "description": "Custom colors for the switch track\n\nColor when false and color when true",
      "name": "trackColor",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "{ false?: ColorValue; true?: ColorValue; }"
      }
    },
    "disabled": {
      "defaultValue": {
        "value": false
      },
      "description": "If true the user won't be able to toggle the switch.\nDefault value is false.",
      "name": "disabled",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onChange": {
      "defaultValue": null,
      "description": "Invoked with the the change event as an argument when the value changes.",
      "name": "onChange",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: SwitchChangeEvent) => void | Promise<void>"
      }
    },
    "onValueChange": {
      "defaultValue": null,
      "description": "Invoked with the new value when the value changes.",
      "name": "onValueChange",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(value: boolean) => void | Promise<void>"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "value": {
      "defaultValue": {
        "value": false
      },
      "description": "The value of the switch. If true the switch will be turned on.\nDefault value is false.",
      "name": "value",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "ios_backgroundColor": {
      "defaultValue": null,
      "description": "On iOS, custom color for the background.\nCan be seen when the switch value is false or when the switch is disabled.",
      "name": "ios_backgroundColor",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "onTintColor": {
      "defaultValue": null,
      "description": "Background color when the switch is turned on.\n@deprecated use trackColor instead",
      "name": "onTintColor",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      }
    },
    "thumbTintColor": {
      "defaultValue": null,
      "description": "Color of the foreground switch grip.\n@deprecated use thumbColor instead",
      "name": "thumbTintColor",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      }
    },
    "tintColor": {
      "defaultValue": null,
      "description": "Background color when the switch is turned off.\n@deprecated use trackColor instead",
      "name": "tintColor",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "SwitchPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "SwitchPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      }
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.\n@platform ios",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.\n@platform ios",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n@platform ios",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.\n@platform ios",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.\n@platform ios",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "color": {
      "defaultValue": {
        "value": "primary"
      },
      "description": "The color of the Switch component.",
      "name": "color",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Switch/Switch.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "theme": {
      "defaultValue": {
        "value": "{\n  colors,\n}"
      },
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Tab": {
    "hitSlop": {
      "defaultValue": null,
      "description": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views.",
      "name": "hitSlop",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Insets"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      }
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.\n@platform ios",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.\n@platform ios",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n@platform ios",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.\n@platform ios",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.\n@platform ios",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "value": {
      "defaultValue": null,
      "description": "Child position index value.",
      "name": "value",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tab/Tab.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "scrollable": {
      "defaultValue": null,
      "description": "Makes Tab Scrolling",
      "name": "scrollable",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tab/Tab.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onChange": {
      "defaultValue": null,
      "description": "On Index Change Callback.",
      "name": "onChange",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tab/Tab.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(value: number) => void"
      }
    },
    "disableIndicator": {
      "defaultValue": null,
      "description": "Disable the indicator below.",
      "name": "disableIndicator",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tab/Tab.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "indicatorStyle": {
      "defaultValue": null,
      "description": "Additional styling for tab indicator.",
      "name": "indicatorStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tab/Tab.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Style for Tab container",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tab/Tab.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "variant": {
      "defaultValue": null,
      "description": "Define the background Variant.",
      "name": "variant",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tab/Tab.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"primary\" | \"default\""
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "TabView": {
    "value": {
      "defaultValue": null,
      "description": "Child position index value.",
      "name": "value",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/TabView/TabView.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onChange": {
      "defaultValue": null,
      "description": "On Index Change Callback.",
      "name": "onChange",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/TabView/TabView.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(value: number) => any"
      }
    },
    "animationType": {
      "defaultValue": null,
      "description": "Choose the animation type among `spring` and `timing`. This is visible when there is tab change.",
      "name": "animationType",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/TabView/TabView.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "\"spring\" | \"timing\""
      }
    },
    "animationConfig": {
      "defaultValue": null,
      "description": "Define the animation configurations.",
      "name": "animationConfig",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/TabView/TabView.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "Omit<SpringAnimationConfig & TimingAnimationConfig, \"toValue\">"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for Component container.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/TabView/TabView.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "tabItemContainerStyle": {
      "defaultValue": null,
      "description": "Styling for TabView.Item Component container.",
      "name": "tabItemContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/TabView/TabView.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Text": {
    "style": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Add additional styling for Text.",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "h1": {
      "defaultValue": {
        "value": false
      },
      "description": "Text with Font size 40.",
      "name": "h1",
      "parent": {
        "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "h2": {
      "defaultValue": {
        "value": false
      },
      "description": "Text with Font size 34.",
      "name": "h2",
      "parent": {
        "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "h3": {
      "defaultValue": {
        "value": false
      },
      "description": "Text with Font size 28.",
      "name": "h3",
      "parent": {
        "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "h4": {
      "defaultValue": {
        "value": false
      },
      "description": "Text with Font size 22.",
      "name": "h4",
      "parent": {
        "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "h1Style": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Styling when h1 is set.",
      "name": "h1Style",
      "parent": {
        "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "h2Style": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Styling when h2 is set.",
      "name": "h2Style",
      "parent": {
        "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "h3Style": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Styling when h3 is set.",
      "name": "h3Style",
      "parent": {
        "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "h4Style": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Styling when h3 is set.",
      "name": "h4Style",
      "parent": {
        "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Text/Text.tsx",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "allowFontScaling": {
      "defaultValue": null,
      "description": "Specifies whether fonts should scale to respect Text Size accessibility settings.\nThe default is `true`.",
      "name": "allowFontScaling",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "ellipsizeMode": {
      "defaultValue": null,
      "description": "This can be one of the following values:\n\n- `head` - The line is displayed so that the end fits in the container and the missing text\nat the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n- `middle` - The line is displayed so that the beginning and end fit in the container and the\nmissing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n- `tail` - The line is displayed so that the beginning fits in the container and the\nmissing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n- `clip` - Lines are not drawn past the edge of the text container.\n\nThe default is `tail`.\n\n`numberOfLines` must be set in conjunction with this prop.\n\n> `clip` is working only for iOS",
      "name": "ellipsizeMode",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"middle\" | \"head\" | \"tail\" | \"clip\""
      }
    },
    "lineBreakMode": {
      "defaultValue": null,
      "description": "Line Break mode. Works only with numberOfLines.\nclip is working only for iOS",
      "name": "lineBreakMode",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"middle\" | \"head\" | \"tail\" | \"clip\""
      }
    },
    "numberOfLines": {
      "defaultValue": null,
      "description": "Used to truncate the text with an ellipsis after computing the text\nlayout, including line wrapping, such that the total number of lines\ndoes not exceed this number.\n\nThis prop is commonly used with `ellipsizeMode`.",
      "name": "numberOfLines",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "onTextLayout": {
      "defaultValue": null,
      "description": "Invoked on Text layout",
      "name": "onTextLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TextLayoutEventData>) => void"
      }
    },
    "onPress": {
      "defaultValue": null,
      "description": "This function is called on press.\nText intrinsically supports press handling with a default highlight state (which can be disabled with suppressHighlighting).",
      "name": "onPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "This function is called on long press.\ne.g., `onLongPress={this.increaseSize}>``",
      "name": "onLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "maxFontSizeMultiplier": {
      "defaultValue": null,
      "description": "Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n- null/undefined (default): inherit from the parent node or the global default (0)\n- 0: no max, ignore parent/global default\n- >= 1: sets the maxFontSizeMultiplier of this node to this value",
      "name": "maxFontSizeMultiplier",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "adjustsFontSizeToFit": {
      "defaultValue": null,
      "description": "Specifies whether font should be scaled down automatically to fit given style constraints.",
      "name": "adjustsFontSizeToFit",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "minimumFontScale": {
      "defaultValue": null,
      "description": "Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).",
      "name": "minimumFontScale",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "suppressHighlighting": {
      "defaultValue": null,
      "description": "When `true`, no visual change is made when text is pressed down. By\ndefault, a gray oval highlights the text on press down.",
      "name": "suppressHighlighting",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "selectable": {
      "defaultValue": null,
      "description": "Lets the user select text, to use the native copy and paste functionality.",
      "name": "selectable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "selectionColor": {
      "defaultValue": null,
      "description": "The highlight color of the text.",
      "name": "selectionColor",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      }
    },
    "textBreakStrategy": {
      "defaultValue": null,
      "description": "Set text break strategy on Android API Level 23+\ndefault is `highQuality`.",
      "name": "textBreakStrategy",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"simple\" | \"highQuality\" | \"balanced\""
      }
    },
    "dataDetectorType": {
      "defaultValue": null,
      "description": "Determines the types of data converted to clickable URLs in the text element.\nBy default no data types are detected.",
      "name": "dataDetectorType",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"link\" | \"phoneNumber\" | \"email\" | \"all\""
      }
    },
    "android_hyphenationFrequency": {
      "defaultValue": null,
      "description": "Hyphenation strategy",
      "name": "android_hyphenationFrequency",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TextPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TextPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"balanced\" | \"normal\" | \"full\" | \"high\""
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "theme": {
      "defaultValue": {
        "value": "{\n  colors,\n}"
      },
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Tile": {
    "onPress": {
      "defaultValue": null,
      "description": "Called when a single tap gesture is detected.",
      "name": "onPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressIn": {
      "defaultValue": null,
      "description": "Called when a touch is engaged before `onPress`.",
      "name": "onPressIn",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onPressOut": {
      "defaultValue": null,
      "description": "Called when a touch is released before `onPress`.",
      "name": "onPressOut",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onLongPress": {
      "defaultValue": null,
      "description": "Called when a long-tap gesture is detected.",
      "name": "onLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onBlur": {
      "defaultValue": null,
      "description": "Called after the element loses focus.\n@platform windows",
      "name": "onBlur",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "Called after the element is focused.\n@platform windows",
      "name": "onFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: NativeSyntheticEvent<TargetedEvent>) => void"
      }
    },
    "children": {
      "defaultValue": null,
      "description": "Either children or a render prop that receives a boolean reflecting whether\nthe component is currently pressed.",
      "name": "children",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        },
        {
          "fileName": "d/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(ReactNode | ((state: PressableStateCallbackType) => ReactNode)) & ReactNode"
      }
    },
    "cancelable": {
      "defaultValue": null,
      "description": "Whether a press gesture can be interrupted by a parent gesture such as a\nscroll event. Defaults to true.",
      "name": "cancelable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "delayLongPress": {
      "defaultValue": null,
      "description": "Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.",
      "name": "delayLongPress",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "Whether the press behavior is disabled.",
      "name": "disabled",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hitSlop": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a press is detected.",
      "name": "hitSlop",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      }
    },
    "pressRetentionOffset": {
      "defaultValue": null,
      "description": "Additional distance outside of this view in which a touch is considered a\npress before `onPressOut` is triggered.",
      "name": "pressRetentionOffset",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number | Insets"
      }
    },
    "android_disableSound": {
      "defaultValue": null,
      "description": "If true, doesn't play system sound on touch.",
      "name": "android_disableSound",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "android_ripple": {
      "defaultValue": null,
      "description": "Enables the Android ripple effect and configures its color.",
      "name": "android_ripple",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "PressableAndroidRippleConfig"
      }
    },
    "testOnly_pressed": {
      "defaultValue": null,
      "description": "Used only for documentation or testing (e.g. snapshot testing).",
      "name": "testOnly_pressed",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "Either view styles or a function that receives a boolean reflecting whether\nthe component is currently pressed and returns view styles.",
      "name": "style",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "PressableProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "PressableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle> | ((state: PressableStateCallbackType) => StyleProp<ViewStyle>)"
      }
    },
    "accessible": {
      "defaultValue": null,
      "description": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible.",
      "name": "accessible",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityActions": {
      "defaultValue": null,
      "description": "Provides an array of custom actions available for accessibility.",
      "name": "accessibilityActions",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "readonly Readonly<{ name: string; label?: string; }>[]"
      }
    },
    "accessibilityLabel": {
      "defaultValue": null,
      "description": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
      "name": "accessibilityLabel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityRole": {
      "defaultValue": null,
      "description": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.",
      "name": "accessibilityRole",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityRole"
      }
    },
    "accessibilityState": {
      "defaultValue": null,
      "description": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.",
      "name": "accessibilityState",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityState"
      }
    },
    "accessibilityHint": {
      "defaultValue": null,
      "description": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.",
      "name": "accessibilityHint",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "accessibilityValue": {
      "defaultValue": null,
      "description": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum).",
      "name": "accessibilityValue",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AccessibilityValue"
      }
    },
    "onAccessibilityAction": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action.",
      "name": "onAccessibilityAction",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: AccessibilityActionEvent) => void"
      }
    },
    "accessibilityLiveRegion": {
      "defaultValue": null,
      "description": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n@platform android",
      "name": "accessibilityLiveRegion",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"polite\" | \"assertive\""
      }
    },
    "importantForAccessibility": {
      "defaultValue": null,
      "description": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n\nPossible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
      "name": "importantForAccessibility",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\""
      }
    },
    "accessibilityElementsHidden": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.\n@platform ios",
      "name": "accessibilityElementsHidden",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessibilityViewIsModal": {
      "defaultValue": null,
      "description": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n@platform ios",
      "name": "accessibilityViewIsModal",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onAccessibilityEscape": {
      "defaultValue": null,
      "description": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).\n@platform ios",
      "name": "onAccessibilityEscape",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onAccessibilityTap": {
      "defaultValue": null,
      "description": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n@platform ios",
      "name": "onAccessibilityTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onMagicTap": {
      "defaultValue": null,
      "description": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n@platform ios",
      "name": "onMagicTap",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "accessibilityIgnoresInvertColors": {
      "defaultValue": null,
      "description": "https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios\n@platform ios",
      "name": "accessibilityIgnoresInvertColors",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "AccessibilityPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "AccessibilityPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "onLayout": {
      "defaultValue": null,
      "description": "Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}.",
      "name": "onLayout",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: LayoutChangeEvent) => void"
      }
    },
    "pointerEvents": {
      "defaultValue": null,
      "description": "In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
      "name": "pointerEvents",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "\"none\" | \"auto\" | \"box-none\" | \"box-only\""
      }
    },
    "removeClippedSubviews": {
      "defaultValue": null,
      "description": "This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
      "name": "removeClippedSubviews",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "testID": {
      "defaultValue": null,
      "description": "Used to locate this view in end-to-end tests.",
      "name": "testID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "nativeID": {
      "defaultValue": null,
      "description": "Used to reference react managed views from native code.",
      "name": "nativeID",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewProps"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "collapsable": {
      "defaultValue": null,
      "description": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
      "name": "collapsable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "needsOffscreenAlphaCompositing": {
      "defaultValue": null,
      "description": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
      "name": "needsOffscreenAlphaCompositing",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "renderToHardwareTextureAndroid": {
      "defaultValue": null,
      "description": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
      "name": "renderToHardwareTextureAndroid",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "focusable": {
      "defaultValue": null,
      "description": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.",
      "name": "focusable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsAndroid"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsAndroid"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "shouldRasterizeIOS": {
      "defaultValue": null,
      "description": "Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.",
      "name": "shouldRasterizeIOS",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "ViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "ViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "isTVSelectable": {
      "defaultValue": null,
      "description": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.\n@platform ios",
      "name": "isTVSelectable",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "hasTVPreferredFocus": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.\n@platform ios",
      "name": "hasTVPreferredFocus",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "tvParallaxProperties": {
      "defaultValue": null,
      "description": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.\n@platform ios",
      "name": "tvParallaxProperties",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "TVParallaxProperties"
      }
    },
    "tvParallaxShiftDistanceX": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceX",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxShiftDistanceY": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n@platform ios",
      "name": "tvParallaxShiftDistanceY",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxTiltAngle": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.\n@platform ios",
      "name": "tvParallaxTiltAngle",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "tvParallaxMagnification": {
      "defaultValue": null,
      "description": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.\n@platform ios",
      "name": "tvParallaxMagnification",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "TVViewPropsIOS"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "TVViewPropsIOS"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onStartShouldSetResponder": {
      "defaultValue": null,
      "description": "Does this view want to become responder on the start of a touch?",
      "name": "onStartShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponder": {
      "defaultValue": null,
      "description": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
      "name": "onMoveShouldSetResponder",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderEnd": {
      "defaultValue": null,
      "description": "If the View returns true and attempts to become the responder, one of the following will happen:",
      "name": "onResponderEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderGrant": {
      "defaultValue": null,
      "description": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening",
      "name": "onResponderGrant",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderReject": {
      "defaultValue": null,
      "description": "Something else is the responder right now and will not release it",
      "name": "onResponderReject",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderMove": {
      "defaultValue": null,
      "description": "The user is moving their finger",
      "name": "onResponderMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderRelease": {
      "defaultValue": null,
      "description": "Fired at the end of the touch, ie \"touchUp\"",
      "name": "onResponderRelease",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderStart": {
      "defaultValue": null,
      "description": "",
      "name": "onResponderStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onResponderTerminationRequest": {
      "defaultValue": null,
      "description": "Something else wants to become responder.\nShould this view release the responder? Returning true allows release",
      "name": "onResponderTerminationRequest",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onResponderTerminate": {
      "defaultValue": null,
      "description": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)",
      "name": "onResponderTerminate",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onStartShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onStartShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onMoveShouldSetResponderCapture": {
      "defaultValue": null,
      "description": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.",
      "name": "onMoveShouldSetResponderCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "GestureResponderHandlers"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "GestureResponderHandlers"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => boolean"
      }
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "d/node_modules/@types/react-native/index.d.ts",
        "name": "Touchable"
      },
      "declarations": [
        {
          "fileName": "d/node_modules/@types/react-native/index.d.ts",
          "name": "Touchable"
        }
      ],
      "required": false,
      "type": {
        "name": "(event: GestureResponderEvent) => void"
      }
    },
    "title": {
      "defaultValue": null,
      "description": "Text inside the tile.",
      "name": "title",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "icon": {
      "defaultValue": null,
      "description": "Icon Component Props.",
      "name": "icon",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "IconObject & IconButtonProps & { type?: string; Component?: any; reverse?: boolean; raised?: boolean; containerStyle?: StyleProp<ViewStyle>; ... 5 more ...; brand?: boolean; } & Partial<...>"
      }
    },
    "caption": {
      "defaultValue": null,
      "description": "Text inside the tilt when tile is featured.",
      "name": "caption",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "React.ReactNode"
      }
    },
    "imageSrc": {
      "defaultValue": null,
      "description": "Source for the image.",
      "name": "imageSrc",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ImageSourcePropType"
      }
    },
    "activeOpacity": {
      "defaultValue": null,
      "description": "Number passed to control opacity on press.",
      "name": "activeOpacity",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "containerStyle": {
      "defaultValue": null,
      "description": "Styling for the outer tile container.",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "imageContainerStyle": {
      "defaultValue": null,
      "description": "Styling for the image.",
      "name": "imageContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "iconContainerStyle": {
      "defaultValue": null,
      "description": "Styling for the outer icon container.",
      "name": "iconContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "overlayContainerStyle": {
      "defaultValue": null,
      "description": "Styling for the overlay container when using featured tile.",
      "name": "overlayContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "titleStyle": {
      "defaultValue": null,
      "description": "Styling for the title.",
      "name": "titleStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "captionStyle": {
      "defaultValue": null,
      "description": "Styling for the caption (optional); You only use this if `caption` is a string.",
      "name": "captionStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<TextStyle>"
      }
    },
    "width": {
      "defaultValue": {
        "value": "Dimensions.get('window').width"
      },
      "description": "Width for the tile.",
      "name": "width",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "height": {
      "defaultValue": {
        "value": "width * 0.8"
      },
      "description": "Height for the tile.",
      "name": "height",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "featured": {
      "defaultValue": null,
      "description": "Changes the look of the tile.",
      "name": "featured",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "contentContainerStyle": {
      "defaultValue": null,
      "description": "Styling for bottom container when not featured tile.",
      "name": "contentContainerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "titleNumberOfLines": {
      "defaultValue": null,
      "description": "Number of lines for Title.",
      "name": "titleNumberOfLines",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "imageProps": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Optional properties to pass to the image if provided e.g \"resizeMode\".",
      "name": "imageProps",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "Partial<ImageProps>"
      }
    },
    "ImageComponent": {
      "defaultValue": {
        "value": "Object.assign(Image, {\n  getSize: ImageNative.getSize,\n  getSizeWithHeaders: ImageNative.getSizeWithHeaders,\n  prefetch: ImageNative.prefetch,\n  abortPrefetch: ImageNative.abortPrefetch,\n  queryCache: ImageNative.queryCache,\n  resolveAssetSource: ImageNative.resolveAssetSource,\n})"
      },
      "description": "Custom ImageComponent for Tile.",
      "name": "ImageComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tile/Tile.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "theme": {
      "defaultValue": {
        "value": "{\n  colors,\n}"
      },
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  },
  "Tooltip": {
    "visible": {
      "defaultValue": {
        "value": false
      },
      "description": "To show the tooltip.",
      "name": "visible",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "withPointer": {
      "defaultValue": {
        "value": true
      },
      "description": "Flag to determine whether or not to display the pointer.",
      "name": "withPointer",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "popover": {
      "defaultValue": null,
      "description": "Component to be rendered as the display container.",
      "name": "popover",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "React.ReactElement<{}>"
      }
    },
    "toggleOnPress": {
      "defaultValue": {
        "value": true
      },
      "description": "Flag to determine to toggle or not the tooltip on press.",
      "name": "toggleOnPress",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "toggleAction": {
      "defaultValue": {
        "value": "onPress"
      },
      "description": "Define type of action that should trigger tooltip. Available options _onPress_, _onLongPress_",
      "name": "toggleAction",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "height": {
      "defaultValue": {
        "value": 40
      },
      "description": "Tooltip container height. Necessary in order to render the container in the correct place. Pass height according to the size of the content rendered inside the container.",
      "name": "height",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "width": {
      "defaultValue": {
        "value": 150
      },
      "description": "Tooltip container width. Necessary in order to render the container in the correct place. Pass height according to the size of the content rendered inside the container.",
      "name": "width",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "containerStyle": {
      "defaultValue": {
        "value": "{}"
      },
      "description": "Passes style object to tooltip container",
      "name": "containerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "pointerColor": {
      "defaultValue": {
        "value": "#617080"
      },
      "description": "Color of tooltip pointer, it defaults to the [`backgroundColor`](#backgroundcolor) if none is passed.",
      "name": "pointerColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      }
    },
    "onClose": {
      "defaultValue": {
        "value": "() => {}"
      },
      "description": "Function which gets called on closing the tooltip.",
      "name": "onClose",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "onOpen": {
      "defaultValue": {
        "value": "() => {}"
      },
      "description": "Function which gets called on opening the tooltip.",
      "name": "onOpen",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "() => void"
      }
    },
    "overlayColor": {
      "defaultValue": {
        "value": "#fafafa14"
      },
      "description": "Color of overlay shadow when tooltip is open.",
      "name": "overlayColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      }
    },
    "withOverlay": {
      "defaultValue": {
        "value": true
      },
      "description": "Flag to determine whether or not display overlay shadow when tooltip is open.",
      "name": "withOverlay",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "backgroundColor": {
      "defaultValue": {
        "value": "#617080"
      },
      "description": "Sets backgroundColor of the tooltip and pointer.",
      "name": "backgroundColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      }
    },
    "highlightColor": {
      "defaultValue": {
        "value": "transparent"
      },
      "description": "Color to highlight the item the tooltip is surrounding.",
      "name": "highlightColor",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ColorValue"
      }
    },
    "skipAndroidStatusBar": {
      "defaultValue": {
        "value": false
      },
      "description": "Force skip StatusBar height when calculating element position. Pass `true` if Tooltip used inside react-native Modal component.",
      "name": "skipAndroidStatusBar",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "closeOnlyOnBackdropPress": {
      "defaultValue": {
        "value": false
      },
      "description": "Flag to determine whether to disable auto hiding of tooltip when touching/scrolling anywhere inside the active tooltip popover container. When `true`, Tooltip closes only when overlay backdrop is pressed (or) highlighted tooltip button is pressed.",
      "name": "closeOnlyOnBackdropPress",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "ModalComponent": {
      "defaultValue": null,
      "description": "Override React Native `Modal` component (usable for web-platform).",
      "name": "ModalComponent",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "pointerStyle": {
      "defaultValue": null,
      "description": "Style to be applied on the pointer.",
      "name": "pointerStyle",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/Tooltip/Tooltip.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "StyleProp<ViewStyle>"
      }
    },
    "theme": {
      "defaultValue": null,
      "description": "",
      "name": "theme",
      "declarations": [
        {
          "fileName": "d/node_modules/@react-native-elements/base/src/helpers/index.tsx",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "{ colors: Colors; }"
      }
    }
  }
}
